<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>GitHub01-二重身份验证方法</title>
    <url>/posts/597bd277/</url>
    <content><![CDATA[<p>&emsp;&emsp;写前一篇教程用GitHub的时候，出现了一个二重身份验证，历经了极其麻烦的过程之后，打给整理了一下这些，下载软件基本都要魔法，我塞到百度网盘也可。</p>
<hr>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>&emsp;&emsp;1、<a class="link"   href="https://apkpure.com/cn/" >APKpure<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>：用来下载Google Play<br>&emsp;&emsp;2、Google Play：用来下载Authenticator<br>&emsp;&emsp;3、Authenticator：验证二重身份，重点就是这个，这个是微软的，也比较好用，建议就是登陆微软账号，但是我没登，因为，我登录时老是出现登录异常，不登录也能用。</p>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>&emsp;&emsp;<a class="link"   href="https://pan.baidu.com/s/1eHKylxujG_axNVpeoPdgxQ?pwd=qhru" >Authenticator<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<hr>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>&emsp;&emsp;1、用APKpure下载Google Play<br>&emsp;&emsp;2、用Google Play下载Authenticator<br>&emsp;&emsp;3、打开Authenticator<br>&emsp;&emsp;4、点击最下方 <em><strong>已验证ID</strong></em> <br>&emsp;&emsp;5、然后扫描GitHub的QR码即可</p>
]]></content>
      <categories>
        <category>GitHub系列</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo建设日志01-将.ani转换为.cur</title>
    <url>/posts/54966/</url>
    <content><![CDATA[<p><em><strong>&emsp;&emsp;欢迎各位来观看这篇教程~<br>&emsp;&emsp;这次我们要学习的是将.ani（动态光标）转换为.cur（静态光标）。<br></strong></em></p>
<hr>
<h2 id="准备："><a href="#准备：" class="headerlink" title="准备："></a>准备：<br></h2><p>&emsp;&emsp;&emsp;&emsp;1、.ani（动态光标）文件<br><br>&emsp;&emsp;&emsp;&emsp;2、CursorWorkshop（原版为英文付费软件，不过这边有汉化绿色版 <a class="link"   href="https://www.bilibili.com/read/cv18455542/" >Axialis CursorWorkshop汉化版<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br></p>
<hr>
<h2 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h2><p>&emsp;&emsp;第一步：打开准备好的CursorWorkshop，将我们的.ani文件拖进去。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2023/12/11/mSHxWF1lRZMhtuc.png"
                      alt="image.png"
                ><br>然后在下面的帧选项中随便选择一帧自己喜欢的，点一下，让他处于蓝色被选状态<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2023/12/11/rs7fYm18RndPIpV.png"
                      alt="image.png"
                ><br>右键点一下，选择&emsp;<em><strong>此帧的新静态光标</strong></em>&emsp;<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2023/12/11/zS1GyYDWXltognx.png"
                      alt="image.png"
                ><br>打开新的窗口后，按照我的配置选就好了<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2023/12/11/rIq7MZuoW14QXfF.png"
                      alt="image.png"
                ><br>接下来我们跳转来到新的一个窗口<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2023/12/11/YVPbu3XZBJMnFRc.png"
                      alt="image.png"
                ><br>选择第一个&nbsp;<em><strong>32x32&nbsp;-&nbsp;RGB&#x2F;A</strong></em>&nbsp;即可<br>最后Ctrl+S保存导出即可，也可以选择&nbsp;<em><strong>32x32&nbsp;-&nbsp;RGB&#x2F;A</strong></em>&nbsp;上边的&emsp;<em><strong>磁盘小图标</strong></em>&emsp;保存。<br>&emsp;&emsp;这样我们就做好了一个静态图标的转换~希望有用~~</p>
]]></content>
      <categories>
        <category>Hexo建设日志</category>
      </categories>
      <tags>
        <tag>Hexo建设日志</tag>
      </tags>
  </entry>
  <entry>
    <title>鸿蒙开发学习日志02——HelloWorld</title>
    <url>/posts/c78fab16/</url>
    <content><![CDATA[<h2 id="创建一个新项目"><a href="#创建一个新项目" class="headerlink" title="创建一个新项目"></a>创建一个新项目</h2><p>&emsp;&emsp;使用DevEco Studio创建一个空项目，了解ArkUI模板代码和预览器的使用方法。</p>
<h3 id="第一步-检测环境"><a href="#第一步-检测环境" class="headerlink" title="第一步 检测环境"></a>第一步 检测环境</h3><p>&emsp;&emsp;打开我们的DevEco Studio，点击左边的<code>诊断</code><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2025/01/19/jutPbxYSU8yNezp.png"
                      alt="image.png"
                ><br>&emsp;&emsp;正常结果如下:<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2025/01/19/91CuM5rZQi4O3bg.png"
                      alt="image.png"
                ><br>&emsp;&emsp;如果遇到任何错误，请依据错误提示信息采取相应的解决措施。若需要下载Git，请前往官方网站获取最新版本的安装包。对于安装GIT的操作，您可以参考隔壁的<a class="link"   href="https://tikara.us.kg/posts/e5e9716c/" >网站搭建教程<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>来指导您的安装过程。如果问题是由于网络连接导致的，请确保您的网络设置正确无误，并尝试重新连接网络。</p>
<h3 id="第二步-创建项目"><a href="#第二步-创建项目" class="headerlink" title="第二步 创建项目"></a>第二步 创建项目</h3><p>&emsp;&emsp;创建一个新项目，我们可以在DevEco Studio的欢迎页进行创建<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2025/01/20/nyuoE3dISvR7Q92.png"
                      alt="image.png"
                ><br>&emsp;&emsp;打开如果不是欢迎页而是我们在第一篇里面创建的项目，我们可以按照下图来重新创建新的项目<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2025/01/20/vCWmUzuQRH7FAGk.png"
                      alt="image.png"
                ><br>&emsp;&emsp;同样的，我们也可以选择退出项目，回到欢迎页后选择新建项目。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2025/01/20/CnH1EzofYZAq3ry.png"
                      alt="image.png"
                ><br>&emsp;&emsp;之后我们进入这个页面，选择<code>Application</code>，<code>Empty Ability</code>，这是一个专门写HelloWorld的模板。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2025/01/20/yEAUnHiOIZ9jwlJ.png"
                      alt="image.png"
                ><br>&emsp;&emsp;点击<code>Next</code>后，进入下一个页面，根据下面的参数讲解调整合适之后点击<code>Finish</code>。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2025/01/20/Ps48TmYWQdVrEAf.png"
                      alt="image.png"
                ></p>
<p>&emsp;&emsp;各参数含义如下</p>
<ol>
<li><code>Project Name</code>：项目名称，默认为<code>MyApplication</code>，可以修改为任意名称。此处我将其改为<code>HelloWorld</code>。</li>
<li><code>Bundle name</code>：包名，即安装包名，熟悉安卓开发的同学应该大体知道这种东西，比如世界计划的包名就是com.sega.pjsekai；再比如QQ的包名就是com.tencent.mobileqq。这边默认是<code>com.example.myapplication</code>，改项目名称为<code>HelloWorld</code>之后，包名会自动更新称<code>com.example.helloworld</code>。两者要一致，如果不一致请手动更新。这个东西是鸿蒙开发者个人中心那边上架应用用的，我们这个不上架，所以参数之类的不展开介绍。</li>
<li><code>Save location</code>：保存位置，默认为<code>C:\Users\Administrator\Documents\MyApplication</code>，可以修改为任意位置。后面的<code>MyApplication</code>是项目名，在创建时会跟随项目名自动更改。</li>
<li><code>Compatible SDK</code>：在编译构建时，DevEco Studio会根据指定的Compatible SDK版本进行编译打包。建议是选择最新版。</li>
<li><code>Module name</code>：模块名称，本期不做介绍，保持默认即可。</li>
<li><code>Device type</code>：设备类型，其中Phone（手机）、Tablet（平板）、2in1（二合一类型设备）和Car（车机）。这边做一个HelloWorld的话，保持默认即可。</li>
</ol>
<p>&emsp;&emsp;创建完成之后，工具会自动生成示例代码和相关资源。等待工程创建完成，创建后界面如下图所示。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2025/01/20/tcKhCTvXywMNqdA.png"
                      alt="image.png"
                ><br>&emsp;&emsp;其中在Project导航栏中选中 entry -&gt; src -&gt; main -&gt; ets -&gt; pages -&gt; Index.ets，即可看到初始创建项目的模板代码。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2025/01/20/gEQhiWv2nVN6o5t.png"
                      alt="image.png"
                ><br>&emsp;&emsp;官方对于代码的解释如下：</p>
<blockquote>
<p>&emsp;&emsp;@Component装饰器装饰了struct关键字声明的数据结构Index。Index被@Component装饰后具备组件化的能力，通过实现build方法描述UI。<br>&emsp;&emsp;@Entry装饰的@Component将作为UI页面的入口。在单个UI页面中，最多可以使用@Entry装饰一个自定义组件。<br>&emsp;&emsp;界面由RelativeContainer相对布局容器作为根容器RelativeContainer支持容器内部的子元素设置相对位置关系，适用于界面复杂场景的情况，对多个子组件进行对齐和排列。<br>&emsp;&emsp;通过Text组件展示一段文本。文本信息由@State装饰器装饰的状态变量message驱动。<br>&emsp;&emsp;Text组件定义了组件标识id为HelloWorld，用于唯一指定组件。定义字体大小fontSize取值为50；定义文本的字体粗细fontWeight取值为Bold，即字体较粗。<br>&emsp;&emsp;alignRules属性用于指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效，在这里定义Text组件横向居中和纵向居中。</p>
</blockquote>
<p>&emsp;&emsp;这段话挺绕是吧，我也觉得，但是官方就是这么写的，所以说，我们直接从代码中下手会好很多，下面是加了注释的代码展示：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// index.ets定义一个名为Index的组件，作为应用的主入口</span><br><span class="line">@Entry</span><br><span class="line">@Component</span><br><span class="line">struct Index &#123;</span><br><span class="line">  // 初始化一个状态变量message，用于显示欢迎文本</span><br><span class="line">  @State message: string = &#x27;Hello World&#x27;;</span><br><span class="line"></span><br><span class="line">  // 构建组件的主体内容</span><br><span class="line">  build() &#123;</span><br><span class="line">    // 使用RelativeContainer来布局页面中的元素</span><br><span class="line">    RelativeContainer() &#123;</span><br><span class="line">      // 显示一个文本元素，内容为message状态变量的值</span><br><span class="line">      Text(this.message)</span><br><span class="line">        // 为文本元素设置一个标识符，便于后续可能的引用或操作</span><br><span class="line">        .id(&#x27;HelloWorld&#x27;)</span><br><span class="line">        // 设置文本的字体大小，引用资源文件中的定义</span><br><span class="line">        .fontSize($r(&#x27;app.float.page_text_font_size&#x27;))</span><br><span class="line">        // 设置文本的字体加粗</span><br><span class="line">        .fontWeight(FontWeight.Bold)</span><br><span class="line">        // 设置文本的对齐方式，使其在容器中心居中显示</span><br><span class="line">        .alignRules(&#123;</span><br><span class="line">          center: &#123; anchor: &#x27;__container__&#x27;, align: VerticalAlign.Center &#125;,</span><br><span class="line">          middle: &#123; anchor: &#x27;__container__&#x27;, align: HorizontalAlign.Center &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        // 设置文本点击事件的处理函数，修改message状态变量的值</span><br><span class="line">        .onClick(() =&gt; &#123;</span><br><span class="line">          this.message = &#x27;Welcome&#x27;;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    // 设置RelativeContainer的高度和宽度，使其充满整个父容器</span><br><span class="line">    .height(&#x27;100%&#x27;)</span><br><span class="line">    .width(&#x27;100%&#x27;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>&emsp;&emsp;看完加了注释的代码之后，是不是能感觉出来些什么，这时我们再来看上面那些话。</p>
<blockquote>
<p>&emsp;&emsp;@Component装饰器装饰了struct关键字声明的数据结构Index。Index被@Component装饰后具备组件化的能力，通过实现build方法描述UI。</p>
</blockquote>
<p>&emsp;&emsp;这句话也就是说，你用@Component装饰器将struct关键字声明的数据结构Index这一整块，打了个包，变成了一个整体的结构，可以通过这一个包来描述UI。<del>（偏个人理解化，不确定对不对，我也是边学边写）</del></p>
<blockquote>
<p>&emsp;&emsp;@Entry装饰的@Component将作为UI页面的入口。在单个UI页面中，最多可以使用@Entry装饰一个自定义组件。</p>
</blockquote>
<p>&emsp;&emsp;这句话是说@Entry是这个UI的入口。同时说明，在单个UI页面中，@Entry能且只能装饰一个自定义组件。也就是上面的@Component</p>
<blockquote>
<p>&emsp;&emsp;界面由RelativeContainer相对布局容器作为根容器，RelativeContainer支持容器内部的子元素设置相对位置关系，适用于界面复杂场景的情况，对多个子组件进行对齐和排列。</p>
</blockquote>
<p>&emsp;&emsp;这句话是说，我们创建的UI界面，是以RelativeContainer作为基底，就像是收纳盒最外面的那一层，然后我们可以在里面防止其他的东西，但是这些东西只能在RelativeContainer排布，不能超出RelativeContainer，就像是PPT的页面一样，你的PPT大小是固定的，里面可以摆文本框，可以摆图片等等，但是不能超出这个固定的大小。<br>&emsp;&emsp;接下来的话就好理解了。</p>
<blockquote>
<p>&emsp;&emsp;通过Text组件展示一段文本文本信息由@State装饰器装饰的状态变量message驱动。Text组件定义了组件标识id为HelloWorld，用于唯一指定组件。定义字体大小fontSize取值为50；定义文本的字体粗细fontWeight取值为Bold，即字体较粗。</p>
</blockquote>
<p>&emsp;&emsp;这段话对应的代码是7~10行（不算注释）具体可以在代码注释中好好摸索一下<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2025/01/20/XcBafs1PIQhgvid.png"
                      alt="image.png"
                ></p>
<blockquote>
<p>&emsp;&emsp;alignRules属性用于指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效，在这里定义Text组件横向居中和纵向居中。</p>
</blockquote>
<p>&emsp;&emsp;这段话是说明了Text这一块组件的对齐方式，也就是在RelativeContainer中，这个组件是横向居中，并且是纵向居中。<br>&emsp;&emsp;这一段比较难理解，建议对照代码注释多看看。<br>&emsp;&emsp;接下来我们修改应用名称，修改entry&#x2F;src&#x2F;main&#x2F;resources&#x2F;base&#x2F;element&#x2F;string.json文件，将EntryAbility_label的value修改为“HMOS世界入门版”。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2025/01/20/PDOB17pk9wNMmYe.png"
                      alt="image.png"
                ><br>&emsp;&emsp;最后我们修改APP的图标。我们在entry&#x2F;src&#x2F;main&#x2F;resources&#x2F;base&#x2F;media文件夹中，将其中原本的background.png和foreground.png文件替换为自己所准备好的图片即可。<br>&emsp;&emsp;至此，我们的项目基础设计就到此结束，接下来我们来创建一下应用的界面吧。</p>
<h3 id="第三步-页面结构拆分分析"><a href="#第三步-页面结构拆分分析" class="headerlink" title="第三步 页面结构拆分分析"></a>第三步 页面结构拆分分析</h3><h2 id="emsp-emsp-在本篇中，我们尝试制作一种最简单的界面展示效果，如下图所示-emsp-emsp-在上图中，我们将页面内的结构抽象三大部分。其中从上到下，第1部分为轮播图部分，第2部分为赋能套件部分，第3部分为入门教程部分。-emsp-emsp-轮播图部分（第一部分-：可以自动播放，展示多张图片的租价，命名为Banner，每个元素为Bannerltem，由Swiper组件提供华东轮播的显示能力。-emsp-emsp-赋能套件部分（第二部分）：横向可滑动的组件，命名为Enablement，由多个Enablementltem组成，Grid组件为网格容器，由“行”和“列”分隔的单元格组成，其中容器内各条目对应一个Gridltem组件。如果仅设置行、列数量与占比中的一个，网格单元将按照设置的方向排列，超出Grid的显示区域之后，Grid拥有可滚动的能力。在这部分，可以设置单行显示，则赋能套件部分可以横向滑动。-emsp-emsp-入门教程部分（第三部分）：纵向可滑动的组件，命名为Tutorial，由多个Tutorialltem组成。List容器可以轻松高效的显示结构化、可滚动化的信息。当列表项达到一定数量，内容超过屏幕大小时，可以自动提供滚动功能。这样我们对这个页面就拆分完成了，接下来我们尝试实现它。-第四步-自定义文本视图-emsp-emsp-通过"><a href="#emsp-emsp-在本篇中，我们尝试制作一种最简单的界面展示效果，如下图所示-emsp-emsp-在上图中，我们将页面内的结构抽象三大部分。其中从上到下，第1部分为轮播图部分，第2部分为赋能套件部分，第3部分为入门教程部分。-emsp-emsp-轮播图部分（第一部分-：可以自动播放，展示多张图片的租价，命名为Banner，每个元素为Bannerltem，由Swiper组件提供华东轮播的显示能力。-emsp-emsp-赋能套件部分（第二部分）：横向可滑动的组件，命名为Enablement，由多个Enablementltem组成，Grid组件为网格容器，由“行”和“列”分隔的单元格组成，其中容器内各条目对应一个Gridltem组件。如果仅设置行、列数量与占比中的一个，网格单元将按照设置的方向排列，超出Grid的显示区域之后，Grid拥有可滚动的能力。在这部分，可以设置单行显示，则赋能套件部分可以横向滑动。-emsp-emsp-入门教程部分（第三部分）：纵向可滑动的组件，命名为Tutorial，由多个Tutorialltem组成。List容器可以轻松高效的显示结构化、可滚动化的信息。当列表项达到一定数量，内容超过屏幕大小时，可以自动提供滚动功能。这样我们对这个页面就拆分完成了，接下来我们尝试实现它。-第四步-自定义文本视图-emsp-emsp-通过" class="headerlink" title="&emsp;&emsp;在本篇中，我们尝试制作一种最简单的界面展示效果，如下图所示&emsp;&emsp;在上图中，我们将页面内的结构抽象三大部分。其中从上到下，第1部分为轮播图部分，第2部分为赋能套件部分，第3部分为入门教程部分。&emsp;&emsp;轮播图部分（第一部分)：可以自动播放，展示多张图片的租价，命名为Banner，每个元素为Bannerltem，由Swiper组件提供华东轮播的显示能力。&emsp;&emsp;赋能套件部分（第二部分）：横向可滑动的组件，命名为Enablement，由多个Enablementltem组成，Grid组件为网格容器，由“行”和“列”分隔的单元格组成，其中容器内各条目对应一个Gridltem组件。如果仅设置行、列数量与占比中的一个，网格单元将按照设置的方向排列，超出Grid的显示区域之后，Grid拥有可滚动的能力。在这部分，可以设置单行显示，则赋能套件部分可以横向滑动。&emsp;&emsp;入门教程部分（第三部分）：纵向可滑动的组件，命名为Tutorial，由多个Tutorialltem组成。List容器可以轻松高效的显示结构化、可滚动化的信息。当列表项达到一定数量，内容超过屏幕大小时，可以自动提供滚动功能。这样我们对这个页面就拆分完成了，接下来我们尝试实现它。### 第四步 自定义文本视图&emsp;&emsp;通过"></a>&emsp;&emsp;在本篇中，我们尝试制作一种最简单的界面展示效果，如下图所示<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2025/01/20/492LTQ7mFPDbusk.png"
                      alt="02.png"
                ><br>&emsp;&emsp;在上图中，我们将页面内的结构抽象三大部分。其中从上到下，第1部分为轮播图部分，第2部分为赋能套件部分，第3部分为入门教程部分。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2025/01/20/xXrtjyKAD4RJMnl.png"
                      alt="1.png"
                ><br>&emsp;&emsp;轮播图部分（第一部分)：可以自动播放，展示多张图片的租价，命名为Banner，每个元素为Bannerltem，由Swiper组件提供华东轮播的显示能力。<br>&emsp;&emsp;赋能套件部分（第二部分）：横向可滑动的组件，命名为Enablement，由多个Enablementltem组成，Grid组件为网格容器，由“行”和“列”分隔的单元格组成，其中容器内各条目对应一个Gridltem组件。如果仅设置行、列数量与占比中的一个，网格单元将按照设置的方向排列，超出Grid的显示区域之后，Grid拥有可滚动的能力。在这部分，可以设置单行显示，则赋能套件部分可以横向滑动。<br>&emsp;&emsp;入门教程部分（第三部分）：纵向可滑动的组件，命名为Tutorial，由多个Tutorialltem组成。List容器可以轻松高效的显示结构化、可滚动化的信息。当列表项达到一定数量，内容超过屏幕大小时，可以自动提供滚动功能。<br>这样我们对这个页面就拆分完成了，接下来我们尝试实现它。<br>### 第四步 自定义文本视图<br>&emsp;&emsp;通过</h2><h2 id="未完，后续更"><a href="#未完，后续更" class="headerlink" title="未完，后续更"></a>未完，后续更</h2>]]></content>
      <categories>
        <category>HarmonyOS_Next</category>
      </categories>
      <tags>
        <tag>HarmonyOS_Next</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo建设日志02-如将.avif文件转化为常用图片格式</title>
    <url>/posts/22756/</url>
    <content><![CDATA[<p>&emsp;&emsp; <em><strong>最近我发现从浏览器上直接捕获的图片，不管是通过下载器下载还是直接另存，都成了一种没见过的格式&ensp;.avif&ensp;。没办法打开做处理，我以为是浏览器问题，所以去搜了搜这个文件格式。</strong></em><br> </p>
<hr>
<h2 id="关于-avif文件："><a href="#关于-avif文件：" class="headerlink" title="关于.avif文件："></a><em>关于.avif文件</em>：</h2><h3 id="emsp-emsp-什么是AVIF"><a href="#emsp-emsp-什么是AVIF" class="headerlink" title="&emsp;&emsp;什么是AVIF"></a><em>&emsp;&emsp;什么是AVIF</em></h3><p>&emsp;&emsp;AVIF（ AV1 Image File Format）是一种由AOM（ Alliance for Open Media）开发的基于AV1编解码器的网络图像格式。这是一种开源免版税的图像格式。AVIF支持全分辨率的10位和12位色彩以及HDR。<br></p>
<h3 id="emsp-emsp-AVIF的优势"><a href="#emsp-emsp-AVIF的优势" class="headerlink" title="&emsp;&emsp;AVIF的优势"></a><em>&emsp;&emsp;AVIF的优势</em><br></h3><p>&emsp;&emsp;Netflix的博客从 2020年2月就开始大力宣传AVIF标准的优点。该博客[1]详细介绍了AVIF，并提供了一些优于JPEG的技术信息。作为AOM的创始成员 ，Netflix一直是AV1编解码标准的坚定支持者。因此，毫不奇怪，他们会对使用AV1来改善其UI体验感兴趣。相比于JPEG，AVIF无论是在压缩率上还是在生态上都有着不可小觑的实力。</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. AV1编解码标准和AVIF格式免版税。</span><br><span class="line">2. 所有Chromium浏览器（Chrome 85或更高版本）都支持AVIF。</span><br><span class="line">3. Microsoft Windows 10从19H1开始支持AVIF。</span><br><span class="line">4. AVIF得到了Google、Amazon、Netflix、Microsoft、Intel、Apple等公司的支持。</span><br><span class="line">5. AVIF提供比JPEG更高的压缩效率。</span><br><span class="line">6. AVIF图像格式支持透明度，HDR，宽色域和其他现代功能。</span><br></pre></td></tr></table></figure></div>
<p>&emsp;&emsp;在与其他图像格式的PK中，AVIF表现十分突出。<br><br>&emsp;&emsp;来源：<a class="link"   href="https://zhuanlan.zhihu.com/p/444624167" >AVIF：新一代的图像压缩格式<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<hr>
<h2 id="如何转换："><a href="#如何转换：" class="headerlink" title="如何转换："></a><em>如何转换：</em></h2><p>&emsp;&emsp;首先，去微软应用商店下载拓展&ensp;<em><strong>AV1 Video Extension</strong></em>&ensp;<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2023/12/19/aczl6ihYsJIRw8u.png"
                      alt="image.png"
                ><br>&emsp;&emsp;然后正常打开照片<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2023/12/19/jIQoOMH5lyhGBuw.png"
                      alt="image.png"
                ><br>&emsp;&emsp;然后点击上面<em><strong>三个点</strong></em>或者<em><strong>Ctrl+S</strong></em>另存为其他格式即可<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2023/12/19/GDTUkfuWz8edCvr.png"
                      alt="image.png"
                ></p>
]]></content>
      <categories>
        <category>Hexo建设日志</category>
      </categories>
      <tags>
        <tag>Hexo建设日志</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo建设日志03-关于网易云.ncm文件的破解与转换</title>
    <url>/posts/38949/</url>
    <content><![CDATA[<p><em><strong>&emsp;&emsp;最近在做mmd的时候，网易云下载到的文件是.ncm。直接转换成MP3会导致文件错误。看了看ncm这个文件，加密方式是网易云独家加密。转换为其他格式是很麻烦的。强行用格式工厂转换会导致文件损坏（网易云你坏事干尽），找遍教程，不容易找到个看上去不错的，结果是广告。</strong></em></p>
<hr>
<h2 id="转换教程"><a href="#转换教程" class="headerlink" title="转换教程:"></a><em><strong>转换教程:</strong></em></h2><p>&emsp;&emsp;首先打开这个网站<a class="link"   href="https://cwo.cc/musicc" >Cwo | 影视工作者的书签-音乐解锁<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2023/12/20/5vZL3SYerfk7UQp.png"
                      alt="image.png"
                ><br>&emsp;&emsp;把ncm导入进去，电脑不好的同学可以打开&ensp;<em><strong>立即保存</strong></em>&ensp;，选择好文件夹，解密后就会直接存到文件夹里，很方便的。每次建议导入的文件数量小于40首，这样就不会很卡。</p>
<hr>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a><em><strong>后记</strong></em></h2><p>&emsp;&emsp;某些同学在解密之后有文件错误或者文件损坏的情况。但是一次解密的歌曲会很多，一首一首的测试显然不太可能，批量文件的校验可以看下一篇文章。</p>
]]></content>
      <categories>
        <category>Hexo建设日志</category>
      </categories>
      <tags>
        <tag>Hexo建设日志</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo建设日志04-关于多个音频文件的完整性校验方法</title>
    <url>/posts/23140/</url>
    <content><![CDATA[<p><em><strong>&emsp;&emsp;最近在大量校验歌曲完整性时遇到了一点点小困难，文件错误或者文件损坏不能比较简便的检查出来。多方查询之后发现了一个较为简单的方法。</strong></em></p>
<hr>
<h2 id="工具："><a href="#工具：" class="headerlink" title="工具："></a><em><strong>工具：</strong></em></h2><p>&emsp;&emsp;<em><strong>foobar2000</strong></em><br>&emsp;&emsp;<em><strong>需要校验的文件</strong></em></p>
<hr>
<h2 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a><em><strong>步骤：</strong></em></h2><p>&emsp;&emsp;首先，在&ensp;<a class="link"   href="http://www.foobar2000.org/" >foobar2000<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>&ensp;官网下载原始英文版软件，或者在吾爱破解等网站下载汉化版。我使用的是这个<br>&emsp;&emsp;链接：<a class="link"   href="https://pan.baidu.com/s/1dI4ZSIPnbLY7wLYiJzpLmg?pwd=r6er" >https://pan.baidu.com/s/1dI4ZSIPnbLY7wLYiJzpLmg?pwd=r6er<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br>&emsp;&emsp;提取码：r6er<br><br>&emsp;&emsp;然后打开软件。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2023/12/21/3DQ5Y7JEfBAU9ZR.png"
                      alt="image.png"
                ><br>&emsp;&emsp;把我们要校验的文件拖进来，同时<em><strong>Ctrl+A</strong></em>一下（全选完成就是文件名字上面变成了蓝色的条条）<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2023/12/21/UVsD25Qf8i7wXYI.png"
                      alt="image.png"
                ><br>&emsp;&emsp;然后右键，选择&ensp;<em><strong>工具-检验完整性</strong></em><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2023/12/21/CpzSr1Nm7w3ibyq.png"
                      alt="image.png"
                ><br>&emsp;&emsp;然后等他走完进度条<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2023/12/21/d3SaRNzmnhWvb9q.png"
                      alt="image.png"
                ><br>&emsp;&emsp;查看结果即可，有需要的话也可以导出成txt文件看<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2023/12/21/Z7p2S8wqBJzAbxy.png"
                      alt="image.png"
                ></p>
]]></content>
      <categories>
        <category>Hexo建设日志</category>
      </categories>
      <tags>
        <tag>Hexo建设日志</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo建设日志05-对于Error Spawn failed报错的修复（歪门邪道）</title>
    <url>/posts/39589/</url>
    <content><![CDATA[<p>&emsp;&emsp;最近被Error:Spawn failed这个报错，折磨得一塌糊涂。试了试网上的，什么删除.deploy_git文件夹，什么改_config.yml里面的deploy:repo的<a class="link"   href="mailto:&#103;&#105;&#x74;&#x40;&#103;&#x69;&#116;&#x68;&#x75;&#x62;&#x2e;&#99;&#111;&#x6d;" >&#103;&#105;&#x74;&#x40;&#103;&#x69;&#116;&#x68;&#x75;&#x62;&#x2e;&#99;&#111;&#x6d;<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>:，还有本地推送啥的，对我都没作用。试了试一个偏方。在这把方法分享一下。</p>
<hr>
<h1 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h1><p>&emsp;&emsp;首先，我们直接打开Git Bash，不要在任何一个文件夹下运行。打开应该是下图这个样子（ <em><strong>~</strong></em> 后面没有任何东西，或者是一个 <em><strong>&#x2F;</strong></em> 但是后面也没有东西）（我是在win菜单下运行的，没有添加到win菜单的话，你可以在你安装Git的文件夹下找到这个Git Bash）<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/21/2MpTKdWPS1zC8lR.png"
                      alt="image.png"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/21/wWRtYIMnuXsoejy.png"
                      alt="image.png"
                ><br>&emsp;&emsp;输入以下内容</p>
<div class="code-container" data-rel="Cmd"><figure class="iseeu highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.ssh</span><br><span class="line"># 进入以下文件夹：C:\Users\user\.ssh</span><br></pre></td></tr></table></figure></div>
<p>&emsp;&emsp;现在上面的info信息就是这样<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/21/2jKHUNEpcTFQy9I.png"
                      alt="image.png"
                ><br>&emsp;&emsp;然后呢，，接下来我们要通过常用的来创建一个控制.ssh的config，然后我习惯就是用，<a class="link"   href="https://code.visualstudio.com/Download" >VSCode<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>，但是呢，我习惯用的vscode的zip版本。直接使用Git启动的话我倒是不会。所以我是下图这样的创建config的。视频看上去有点卡的话，这边有百度网盘的链，可以通过百度网盘看看，或者挂梯子。<a class="link"   href="https://pan.baidu.com/s/184laBs0d5H2yMEK8xfl_GQ?pwd=48wq" >HexoMader05-01 百度网盘在线版<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>）</p>
<iframe id="spkj" src="https://www.acfun.cn/player/ac43642408" width="100%" frameborder="no" scrolling="no" allowfullscreen="allowfullscreen"><span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;" class="mce_SELRES_start"></span> <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;" class="mce_SELRES_start"></span> </iframe> <script type="text/javascript"> document.getElementById("spkj").style.height=document.getElementById("spkj").scrollWidth*0.76+"px"; </script>

<p>&emsp;&emsp;然后呢就会唤起我的vscode，打开这样的界面<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/21/FZjyOwUbfQKc4vo.png"
                      alt="image.png"
                ><br>&emsp;&emsp;在里面输入</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">User git</span><br><span class="line">Hostname ssh.github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/id_rsa</span><br><span class="line">Port 443</span><br><span class="line"></span><br><span class="line">Host gitlab.com</span><br><span class="line">Hostname altssh.gitlab.com</span><br><span class="line">User git</span><br><span class="line">Port 443</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure></div>
<p>&emsp;&emsp;保存，在GIT输入以下内容</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure></div>
<p>&emsp;&emsp;如果出现以下内容，说明修改成功了，但是GitHub不提供服务。</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><figcaption><span>bash</span></figcaption><table><tr><td class="code"><pre><span class="line">Hi 你的名字! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure></div>
<p>&emsp;&emsp;如果出现有个需要填yes还是弄的地方，填yes。我填完忘记截图了，然后来解决GitHub does not provide shell access.这个问题。解决办法就是重新生成SSH秘钥。<br>&emsp;&emsp;首先在Git输入以下信息：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><figcaption><span>bash</span></figcaption><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C “your_email.com”</span><br></pre></td></tr></table></figure></div>
<p>&emsp;&emsp;然后，第一个按一下回车；第二个，输入y；第三个，回车；第四个，回车。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/21/ZHyMiU1r4dueEGb.png"
                      alt="image.png"
                ><br>&emsp;&emsp;然后在 <em><strong>.ssh</strong></em> 文件夹下的找到 <em><strong>id_rsa.pub</strong></em> 打开，把里面的文本全部复制到GitHub的SSH秘钥里面，步骤就是：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">登录github</span><br><span class="line">点击 setting</span><br><span class="line">点击SSH and GPG keys</span><br><span class="line">选择 new ssh key</span><br><span class="line">添加公钥</span><br><span class="line">完成</span><br></pre></td></tr></table></figure></div>
<p>&emsp;&emsp;这样就可以正常推送了</p>
<hr>
<h2 id="2024年11月20日补充："><a href="#2024年11月20日补充：" class="headerlink" title="2024年11月20日补充："></a>2024年11月20日补充：</h2><p>&emsp;&emsp;可以利用该命令来解决：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><figcaption><span>Bash</span></figcaption><table><tr><td class="code"><pre><span class="line">git config --global user.email &quot;you@example.com&quot;</span><br><span class="line">git config --global user.name &quot;Your Name&quot;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>Hexo建设日志</category>
      </categories>
      <tags>
        <tag>Hexo建设日志</tag>
      </tags>
  </entry>
  <entry>
    <title>APK技术日常01—APK解包</title>
    <url>/posts/55002/</url>
    <content><![CDATA[<p><em><strong>&emsp;&emsp;本教程全部基于 <em><strong>Windows10</strong></em> 系统下，不同系统下可能略有差异。教程中的文件都源自于网络开源，其STAFF列表会在文章末尾标注。本教程 <em><strong>不适用于游戏提取等用途</strong></em> ，教程中教学的是处理并修改APK文件以及查看相关文件等，如有侵权，请联系我删除。</strong></em></p>
<hr>
<h2 id="所需工具"><a href="#所需工具" class="headerlink" title="所需工具"></a>所需工具</h2><p>&emsp;&emsp;<a class="link"   href="https://apktool.org/docs/install/" >APKTool<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>：编译和反编译apk，可以从APK中获得基础性资源（如图片等）<br></p>
<hr>
<h2 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h2><p>&emsp;&emsp;一、安装<a class="link"   href="https://www.java.com/zh-CN/" >Java<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>，具体步骤请详见Java官网，此处不再赘述；<br>&emsp;&emsp;二、下载<a class="link"   href="https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/windows/apktool.bat" >ApkTool脚本文件<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>；<br>&emsp;&emsp;&emsp;&emsp;（如果不会下载，可以复制网页中的文本，新建一个名为&ensp; <em><strong>apktool</strong></em> &ensp;的&ensp; <em><strong>txt</strong></em> &ensp;文件，将网页文本内容复制下来，保存在&ensp; <em><strong>apktool.txt</strong></em> &ensp;中，之后将后缀&ensp; <em><strong>.txt</strong></em>&ensp; 修改为&ensp; <em><strong>.bat</strong></em> &ensp;即可）<br>&emsp;&emsp;三、下载最新版本的<a class="link"   href="https://bitbucket.org/iBotPeaches/apktool/downloads/" >apktool.jar<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>，并且重命名为 <em><strong>apktool.jar</strong></em> <br>&emsp;&emsp;&emsp;&emsp;（例如，我下载的文件为apktool_2.9.2.jar，只需要删除_2.9.2，使文件名为apktool.jar即可）<br>&emsp;&emsp;四、将 <em><strong>apktool.bat</strong></em> 和 <em><strong>apktool.jar</strong></em> 放在 <em><strong>同一目录（文件夹）</strong></em> 下。</p>
<hr>
<h2 id="基本用法（为了方便展示，我把所有文件放在了一个目录下）"><a href="#基本用法（为了方便展示，我把所有文件放在了一个目录下）" class="headerlink" title="基本用法（为了方便展示，我把所有文件放在了一个目录下）"></a>基本用法（为了方便展示，我把所有文件放在了一个目录下）</h2><p>&emsp;&emsp;一、APK文件的提取<br>&emsp;&emsp;1、在APK文件目录下运行CMD（在路径那里输入cmd，敲回车即可）<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/08/7AmXYRbDNIrUGS4.png"
                      alt="image.png"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/08/BGtFrgCwSPbXmQD.png"
                      alt="image.png"
                ><br>&emsp;&emsp;2、输入命令</p>
<div class="code-container" data-rel="Cmd"><figure class="iseeu highlight cmd"><table><tr><td class="code"><pre><span class="line">apktool.bat d [-s] -f &lt;apkPath&gt; -o &lt;folderPath&gt;</span><br></pre></td></tr></table></figure></div>
<p>&emsp;&emsp;此处的 <em><strong>&lt; apkPath &gt;</strong></em> 是你的apk路径，比如我的为 <em><strong>“E:\apktool\pose-monitor-release.apk”</strong></em> （注意此处的引号为 <em><strong>英文</strong></em> ） <em><strong>&lt; folderPath &gt;</strong></em> 是你的导出目录， <em><strong>不填写</strong></em> 则会自动以 <em><strong>安装包名</strong></em>在 <em><strong>apk的相同目录</strong></em> 下新建文件夹并且导出， <em><strong>若不填写，请一并删去&ensp;-o&ensp;这一命令</strong></em> 。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/08/QeOiJfTmVbN8oYz.png"
                      alt="image.png"
                ><br>&emsp;&emsp;显示这样的信息且在导出文件夹下存在 <em><strong>apktool.yml</strong></em> 文件代表导出成功，接下来就在文件夹中修改你的基础资源（如图片等）吧。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/08/SAeLnvGIRZ1FUrE.png"
                      alt="image.png"
                ></p>
<hr>
<h2 id="STAFF"><a href="#STAFF" class="headerlink" title="STAFF"></a>STAFF</h2><p>&emsp;&emsp;APKTool：<a class="link"   href="https://apktool.org/docs/install/" >https://apktool.org/docs/install/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br>&emsp;&emsp;pose-monitor-release:<a class="link"   href="https://github.com/linyiLYi/pose-monitor" >https://github.com/linyiLYi/pose-monitor<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<div style="position:relative; width:100%; height:0; padding-bottom:75%;">
<iframe src="//player.bilibili.com/player.html?aid=732141008&bvid=BV1uD4y187zX&cid=879804782&p=1" 
scrolling="no" border="0" frameborder="no"  framespacing="0"  
style="position:absolute; width:100%; height:100%;  left:0; top:0"  > </iframe>
</div>]]></content>
      <categories>
        <category>APK修改系列</category>
      </categories>
      <tags>
        <tag>APK</tag>
        <tag>技术日常</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo建设日志06-个人网站的建设流程</title>
    <url>/posts/e5e9716c/</url>
    <content><![CDATA[<p>&emsp;&emsp;做了这么几次个人网站，总结一下基本流程，把踩到的坑也写一下，以后自己迁移网站应该会方便很多。据说可以配置到cloudfare，但是目前没有试过。用我的这个流程，除了时间成本和人力成本，不需要其他的，并且不需要备案，但是网站是在GitHub上，所以加载速度真就是随缘。<br>&emsp;&emsp; <em><strong>注：本教程全部基于windows10系统，若有差异，自行搜索解决！！！</strong></em> <del>小声：我亲友的话倒是可以QQ滴滴我</del></p>
<hr>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>&emsp;&emsp;这里是把所有的用到的网站都列了一遍，都是基本需求，但是不一定要下载，比如Hexo走的是命令，就不用下载，所以下文如果需要某个官网，点这里就能打开。要下载的我会在后面标注。<br>&emsp;&emsp;1、<a class="link"   href="https://github.com/" >GitHub<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>账户：需要自己创建。<br>&emsp;&emsp;2、<a class="link"   href="https://hexo.io/zh-cn/index.html" >Hexo<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>: Hexo是一个快速、简洁且高效的博客框架。可以避免自己写框架时的麻烦事<br>&emsp;&emsp;3、<a class="link"   href="https://gitee.com/" >Gitee<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>：GitHub的国内镜像，但是吧，，如果说做个人网站，这个要上传身份证什么的，还有审核期，不推荐<br>&emsp;&emsp;4、<a class="link"   href="https://git-scm.com/" >Git<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>：最重要的东西！我们之后所有的命令都要在这个上运行！要下载！类比的话，，CMD！我们之后所有的命令都要在Git上运行！注意的一点就是，这个上面不能用ctrl+C或者+V来复制粘贴，所以右键复制粘贴是明智的选择<br>&emsp;&emsp;5、<a class="link"   href="https://nodejs.org/zh-cn/" >Node.js<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>：Hexo的运行环境，要下载！<br>&emsp;&emsp;6、<a class="link"   href="https://code.visualstudio.com/" >VScode<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>：是一个文本编辑器，超级好用，有很多很多的插件，包括写文章时候的可以实时预览之类的，当然如果你用的管别的文本编辑器，像是exeryeditor，那么就用你喜欢的就好。<br>&emsp;&emsp;7、<a class="link"   href="https://sm.ms/" >SM图床<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>：用来上传你的图片并且生成Markdown格式的链接，这样就不会在插入图片的时候占用本地或者Github的存储空间。并且这个东西没有审核，想上传啥就上传啥（意味深长），但是需要注册<br>&emsp;&emsp;8、<a class="link"   href="https://markdown.com.cn/" >MarkDown语法教程<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>：MarkDown的中文网，里面提到了MarkDown语法要咋写，这个十分简单，常用的也就那几个<br><br>&emsp;&emsp;下载不方便的话，我将提供截止到写稿为止的最新版本的百度网盘下载方式。</p>
<hr>
<h2 id="基础本地博客构造"><a href="#基础本地博客构造" class="headerlink" title="基础本地博客构造"></a>基础本地博客构造</h2><p>&emsp;&emsp;1、安装Git和Node.js<br>&emsp;&emsp;&ensp;&emsp;首先打开git官网，点击右边的 <em><strong>Download for Windows</strong></em><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/06/15/bF146zjmfpgAOkX.png"
                      alt="image.png"
                ><br>&emsp;&emsp;打开如下界面后在 <em><strong>Standalone Installer</strong></em> 范围内选择自己的系统版本，比如我的是X64，就下载64位，如果不会，百度<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/06/15/VewItCL42Xg9rKF.png"
                      alt="Clip_2024-06-15_00-55-07.png"
                ><br>&emsp;&emsp;下载完成后，双击安装，无脑下一步即可（如果自己会，并且有特殊需求，按自己情况来定）安装完成后，鼠标右键空白处出现下图两个选项，若出现图示选项，则证明安装成功<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/06/15/kVnIUNhlYCS2Q8r.png"
                      alt="Clip_2024-06-15_01-06-41.png"
                ><br>&emsp;&emsp;打开Node.js官网，点击 <em><strong>Download Node.js (LTS)</strong></em><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/06/15/WYERh4OqKifZ3nB.png"
                      alt="Clip_2024-06-15_01-07-58.png"
                ><br>&emsp;&emsp;依旧是无脑下一步即可（如果自己会，并且有特殊需求，按自己情况来定），期间这个建议选一下，但是如果自己知道这是在干什么，不选也可以<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/06/15/uXbcSFnkyGwtAVT.png"
                      alt="image.png"
                ><br>&emsp;&emsp;然后cmd输入 <em><strong>node -v</strong></em> 查看是否安装成功，若出现版本号，则证明安装成功<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/06/15/8dRFDBASiysZt3O.png"
                      alt="Clip_2024-06-15_01-17-20.png"
                ><br>&emsp;&emsp;2、安装Hexo：Hexo是一个快速、简洁且高效的博客框架。对中文支持比较友好<br>&emsp;&emsp;&ensp;&emsp;首先我们找到自己要新建一个网站的存放文件夹，然后在这个文件夹右键，选择 <em><strong>Git Bash Here</strong></em><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/06/15/nH6EMa82kvQdFTG.png"
                      alt="Clip_2024-06-15_01-20-37.png"
                ><br>&emsp;&emsp;然后复制Hexo官网的第一行命令，输入到Git</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><figcaption><span>bash</span></figcaption><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure></div>
<p>出现下一或者下二的代码都是成功，下一是提示你npm版本有点旧，要升级而已，图二是绝对正常</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><figcaption><span>bash</span></figcaption><table><tr><td class="code"><pre><span class="line">removed 1 package,and changed 53 packages in 46s</span><br><span class="line">14 packages are looking for funding</span><br><span class="line">run&quot;npm fund`for detai1s</span><br><span class="line">npm notice</span><br><span class="line">npm notice New minor version of npm available! 10.7.0 -&gt; 10.8.1</span><br><span class="line">npm notice Changelog: https://github.com/npm/cli/releases/tag/v10.8.1npm notice To update run: npm insta11 -g npm@1o.8.1</span><br><span class="line">npm notice</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/06/15/NjenXori7KPtlFp.png"
                      alt="Clip_2024-06-15_01-28-57.png"
                ><br>&emsp;&emsp;然后复制第二行命令输入Git</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><figcaption><span>bash</span></figcaption><table><tr><td class="code"><pre><span class="line">hexo init blog</span><br></pre></td></tr></table></figure></div>
<p>&emsp;&emsp;出现如下内容则表明成功（这个过程可能极其漫长，视电脑配置和网络情况而定，尤其是连接GitHub的网速）<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/06/15/7WdQ9fopL8aF4GD.png"
                      alt="Clip_2024-06-15_01-38-10.png"
                ><br>&emsp;&emsp;然后你会发现你的文件夹下多了个blog文件夹<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/06/15/rvUkPVNEZofBmDw.png"
                      alt="Clip_2024-06-15_01-41-25.png"
                ><br>&emsp;&emsp;复制第三行命令到git，其实也可以直接打开这个文件夹，再打开一遍 <em><strong>Git Bash Here</strong></em> ，效果一样，因为下面这个代码作用就是，进入blog这个文件夹</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><figcaption><span>bash</span></figcaption><table><tr><td class="code"><pre><span class="line">cd blog</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/06/15/RXtsWbz7AQum1dB.png"
                      alt="Clip_2024-06-15_01-45-12.png"
                ><br>&emsp;&emsp;然后运行第四行命令</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><figcaption><span>bash</span></figcaption><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/06/15/C5fujMZwqzLTXm2.png"
                      alt="Clip_2024-06-15_01-46-50.png"
                ><br>&emsp;&emsp;这样博客的基本框架就构造完毕了，可以运行第五行命令来检验是否创建成功</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><figcaption><span>bash</span></figcaption><table><tr><td class="code"><pre><span class="line">hexo s</span><br><span class="line"># 是hexo server的缩写，两个效果一样</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/06/15/2YPL93vZTXauwke.png"
                      alt="Clip_2024-06-15_01-50-02.png"
                ><br>&emsp;&emsp;然后我们就可以将 <a class="link"   href="http://localhost:4000/" >http://localhost:4000/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 输入到浏览器，查看博客基本框架构造是否完成（切记不要用ctrl+c，当前场景中这个按键组合代表退出或者关闭当前服务），如下图<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/06/15/WogblQ8KtUFdG5e.png"
                      alt="Clip_2024-06-15_01-52-44.png"
                ></p>
<hr>
<h2 id="博客美化"><a href="#博客美化" class="headerlink" title="博客美化"></a>博客美化</h2><p>&emsp;&emsp;我们来让博客更好看一点，可以自己写css和json之类的美化，也可以下载现成的主题，这边我以下载主题这一方式来美化。<br>&emsp;&emsp;在Hexo主页面下有探索主题的按钮，或者打开网址：<a class="link"   href="https://hexo.io/themes/" >https://hexo.io/themes/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 。主题这边基本就是英文，并且切换简体中文没啥用，所以还是开个翻译器比较好，还有就是，这个页面加载异常缓慢，可以顺便开个加速器。<br>&emsp;&emsp;选一个自己合乎心意的的主题模板，我选择 <em><strong><a class="link"   href="https://github.com/fluid-dev/hexo-theme-fluid" >Fluid<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></strong></em> 这一主题演示（因为我喜欢这种有大头图的）<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/06/15/oEazbseqh2JdY6M.png"
                      alt="Clip_2024-06-15_02-03-24.png"
                ><br>&emsp;&emsp;首先打开他的GitHub项目页，往下翻翻，找到 <em><strong>快速开始</strong></em><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/06/15/XH5ONnumvg9bsaJ.png"
                      alt="Clip_2024-06-15_02-05-13.png"
                ><br>&emsp;&emsp;接下来我以习惯性的方式进行演示（方式二，因为npm不咋会用的话容易出奇奇怪怪的BUG）<br>&emsp;&emsp;下载最新release版本，解压到 themes 目录，并将解压出的文件夹重命名为 fluid。这样你的blog文件夹下的theme文件夹下一个就会有一个fluid文件夹了，然后这个文件夹里面就是我们解压出来的各种文件，如下图<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/06/15/9FegRvr4LqiCOnm.png"
                      alt="Clip_2024-06-15_02-11-08.png"
                ><br>&emsp;&emsp;然后我们回到blog文件夹下，找到 <em><strong>_config.yml</strong></em> 文件，打开它，找到 <em><strong>theme</strong></em> 这个字段，将值改为 fluid，如下图<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/06/15/7dloTtwQEC5qHKf.png"
                      alt="Clip_2024-06-15_02-13-27.png"
                ><br>&emsp;&emsp;再找到 <em><strong>language</strong></em> ，将值定义为 <em><strong>zh-CN</strong></em> ，如下图<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/06/15/2lLnfDOUpqYeoVz.png"
                      alt="Clip_2024-06-15_02-15-14.png"
                ><br>&emsp;&emsp;这样我们就完成了博客主题的更改，之后的博客名修改等等，参照下表即可（所有修改都是blog文件夹下的_config.yml文件，不要改主题下的_config.yml文件）</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>title</td>
<td>网站标题</td>
</tr>
<tr>
<td>subtitle</td>
<td>网站副标题</td>
</tr>
<tr>
<td>description</td>
<td>网站描述</td>
</tr>
<tr>
<td>keywords</td>
<td>网站的关键词。支持多个关键词。</td>
</tr>
<tr>
<td>author</td>
<td>您的名字</td>
</tr>
<tr>
<td>language</td>
<td>网站使用的语言。对于简体中文用户来说，使用不同的主题可能需要设置成不同的值，请参考你的主题的文档自行设置，常见的有 zh-Hans和 zh-CN。</td>
</tr>
<tr>
<td>timezone</td>
<td>网站时区。Hexo 默认使用您电脑的时区。请参考 时区列表 进行设置，如 America&#x2F;New_York, Japan, 和 UTC 。一般的，对于中国大陆地区可以使用 Asia&#x2F;Shanghai。</td>
</tr>
</tbody></table>
<p>&emsp;&emsp;还有就是，如果用某个主题，那么建议多看看这个主题的配置文档，如我本次使用的<a class="link"   href="https://hexo.fluid-dev.com/docs/guide/" >Fluid配置文档<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>，里面作者会要求你该咋用不该咋用。</p>
<hr>
<h2 id="编写文章和创建页面"><a href="#编写文章和创建页面" class="headerlink" title="编写文章和创建页面"></a>编写文章和创建页面</h2><p>&emsp;&emsp;在 <em><strong>blog文件夹</strong></em> 下运行 <em><strong>Git Bash Here</strong></em> ，输入下面的指令，你就可以在 <em><strong>source</strong></em>文件夹下的 <em><strong>POST</strong></em>文件夹里面看到你所创建的文章了。</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><figcaption><span>bash</span></figcaption><table><tr><td class="code"><pre><span class="line">hexo new post &quot;文章名&quot;</span><br></pre></td></tr></table></figure></div>
<p>&emsp;&emsp;此处举例</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><figcaption><span>bash</span></figcaption><table><tr><td class="code"><pre><span class="line">hexo new post Hexo建设日志06-个人网站的建设流程</span><br></pre></td></tr></table></figure></div>
<p>&emsp;&emsp;得到返回</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><figcaption><span>bash</span></figcaption><table><tr><td class="code"><pre><span class="line">INFO  Validating config</span><br><span class="line">INFO  Created: H:\测试\blog\source\_posts\Hexo建设日志06-个人网站的建设流程.md</span><br></pre></td></tr></table></figure></div>
<p>&emsp;&emsp;就表明创建成功，Hexo文章支持MarkDown语法，所以我们打开后要根据MarkDown语法来写文章，关于MarkDown语法的教程可以在上文准备处有提及。<br>&emsp;&emsp;在 <em><strong>blog文件夹</strong></em> 下运行 <em><strong>Git Bash Here</strong></em> ，输入下面的指令，你就可以在 <em><strong>source</strong></em>文件夹下看到你所创建的页面的同名文件夹了。（如果是英文页面，建议全小写）</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><figcaption><span>bash</span></figcaption><table><tr><td class="code"><pre><span class="line">hexo new page “页面名”</span><br></pre></td></tr></table></figure></div>
<p>&emsp;&emsp;此处以创建一个about页面为例</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><figcaption><span>bash</span></figcaption><table><tr><td class="code"><pre><span class="line">hexo new page about</span><br></pre></td></tr></table></figure></div>
<p>创建成功后，编辑博客目录下 &#x2F;source&#x2F;about&#x2F;index.md，添加 layout 属性。<br>修改后的文件示例如下：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: about</span><br><span class="line">layout: about</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">随便写一点什么吧~</span><br></pre></td></tr></table></figure></div>
<p>这样就成功创建了一个关于页，运行网站就能在最上面就能看到了。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/06/15/MVqfYQhAd4sokxD.png"
                      alt="Clip_2024-06-15_02-49-02.png"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/06/15/ZpOAxcIM3fvz4rn.png"
                      alt="Clip_2024-06-15_02-51-04.png"
                ><br>&emsp;&emsp;创建页面时，Hexo 会自动创建一个文件夹，里面有一个 index.md 文件，这个文件就是页面的内容。<br>&emsp;&emsp;下面是一些Hexo在Git中的代码：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>clean</td>
<td>删除生成的文件</td>
</tr>
<tr>
<td>deploy</td>
<td>部署网站</td>
</tr>
<tr>
<td>generate</td>
<td>生成静态网站</td>
</tr>
<tr>
<td>help</td>
<td>帮助</td>
</tr>
<tr>
<td>new</td>
<td>+post+名称是生成文章<br>+page+名称是生成某个页面<br>+名称默认是生成文章</td>
</tr>
<tr>
<td>server</td>
<td>开始本地服务器</td>
</tr>
<tr>
<td>version</td>
<td>版本</td>
</tr>
</tbody></table>
<hr>
<h2 id="将网站上传至GitHub并且创建GitHub-Pages"><a href="#将网站上传至GitHub并且创建GitHub-Pages" class="headerlink" title="将网站上传至GitHub并且创建GitHub Pages"></a>将网站上传至GitHub并且创建GitHub Pages</h2><p>&emsp;&emsp;首先，你需要注册一个GitHub账号，用户名慎重一点，因为这个会成为你的网址。在GitHub上创建一个仓库，名字叫 <em><strong>用户名.github.io</strong></em> ，比如我的就是 <em><strong>re-tikara.github.io</strong></em> 。<del>（等我换个号来演示一下）</del><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/06/15/2X5aHDJuOqpw1Zg.png"
                      alt="Clip_2024-06-15_13-00-55.png"
                ><br>&emsp;&emsp;然后在随便任何一个文件夹里面运行 <em><strong>Git Bush</strong></em> ，输入以下命令</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><figcaption><span>bash</span></figcaption><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;你的github注册邮件地址&quot;</span><br></pre></td></tr></table></figure></div>
<p>&emsp;&emsp;然后点四下回车，出现类似如下则表示成功</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><figcaption><span>bash</span></figcaption><table><tr><td class="code"><pre><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (默认路径):</span><br><span class="line">Created directory &#x27;默认路径&#x27;.</span><br><span class="line">Enter passphrase (empty for no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved in 默认路径</span><br><span class="line">Your public key has been saved in 默认路径</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256: XXXXXX</span><br><span class="line">The key&#x27;s randomart image is:</span><br><span class="line">+---[RSA 3072]----+</span><br><span class="line">| . .   .+|</span><br><span class="line">| .= o  oX|</span><br><span class="line">| +=+.+.=X|</span><br><span class="line">|   .oo.=+.o=+|</span><br><span class="line">|S o o+ oo|</span><br><span class="line">| o .  oE+|</span><br><span class="line">|. .B.|</span><br><span class="line">|   . .o+*|</span><br><span class="line">|..+o*|</span><br><span class="line">+----[SHA256]-----+</span><br></pre></td></tr></table></figure></div>
<p>&emsp;&emsp;然后文本编辑器打开如下路径</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\用户名\.ssh\id_rsa.pub</span><br></pre></td></tr></table></figure></div>
<p>&emsp;&emsp;这个里面就是你的SSH密码，切记不要外露，全部复制之后，回到GitHub的设置界面<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/07/06/uVRzCkl5n2NFrjs.png"
                      alt="20240706134521.png"
                ><br>&emsp;&emsp;点 <em><strong>NEW SSH Key</strong></em>，打开如下界面，把该填的填进去<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/07/06/RSXmhyLwad2lo8z.png"
                      alt="20240706134950.png"
                ><br>&emsp;&emsp;然后运行以下代码测试一下是否成功</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure></div>
<p>&emsp;&emsp;回车，点“yes”，出现如下</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">The authenticity of host &#x27;github.com (20.205.243.166)&#x27; can&#x27;t be established.</span><br><span class="line">XXXXX key fingerprint is SHA256:XXXXXXXXXXXXXXXXXXXXX</span><br><span class="line">This key is not known by any other names.</span><br><span class="line">Are you sure you want to continue connecting (yes/no/[fingerprint])? yes</span><br><span class="line">Warning: Permanently added &#x27;github.com&#x27; (XXXXX) to the list of known hosts.</span><br><span class="line">Hi re-alpworld! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure></div>

<p>&emsp;&emsp;这边基本的GitHub本地设置就好了，以后就可以本地直接推送到github，然后更改博客根目录下的 <em><strong>_config.yml</strong></em>，把下面的项目按照类似的改一下</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">## URL</span><br><span class="line">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span><br><span class="line">url: http://re-alpworld.github.io（这一项要改）</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br><span class="line">pretty_urls:</span><br><span class="line">trailing_index: true ## Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span><br><span class="line">trailing_html: true ## Set to false to remove trailing &#x27;.html&#x27; from permalinks</span><br><span class="line">## Deployment</span><br><span class="line">----------------------------------------------------------------------------------</span><br><span class="line">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="line">deploy:</span><br><span class="line">type: git</span><br><span class="line">repo: git@github.com:name/name.github.io</span><br><span class="line">branch: main</span><br><span class="line">message: blog file</span><br><span class="line">（这一块建议直接复制替换，然后把地址改一下）</span><br></pre></td></tr></table></figure></div>
<p>&emsp;&emsp;接下来开启github的个人page<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/07/06/aA9pTrH46GqFRyY.png"
                      alt="image.png"
                ><br>&emsp;&emsp;最后把本地文件推送上去即可，在根目录地下运行<em><strong>Git Bush</strong></em> ，输入以下命令</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure></div>
<p>&emsp;&emsp;这样就完成了在线推送，输入 <em><strong>用户名.github.io</strong></em> 就可以看到了</p>
]]></content>
      <categories>
        <category>Hexo建设日志</category>
      </categories>
      <tags>
        <tag>Hexo建设日志</tag>
      </tags>
  </entry>
  <entry>
    <title>AI学习系列01期-本地化AI搭建</title>
    <url>/posts/e3382b70/</url>
    <content><![CDATA[<h2 id="基础本地化AI构建教程"><a href="#基础本地化AI构建教程" class="headerlink" title="基础本地化AI构建教程"></a>基础本地化AI构建教程</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>&emsp;&emsp;本教程基于通义千问的qwen2.5，不用Docker，但是相对而言是有一个比较麻烦的过程，且本教程不适合关机（狗头）。为什么不用Docker，是因为我没学。根本不会用，还有就是，windows吧，能不Docker，就别Docker。我宁可再去装一个linux，也不要Docker</p>
<hr>
<h3 id="准备："><a href="#准备：" class="headerlink" title="准备："></a>准备：</h3><p>&emsp;&emsp;1、Ollama：<a class="link"   href="https://ollama.com/" >https://ollama.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br>&emsp;&emsp;2、VirtualBox：<a class="link"   href="https://www.virtualbox.org/" >https://www.virtualbox.org/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br>&emsp;&emsp;3、MobaXterm_Portable：<a class="link"   href="https://mobaxterm.mobatek.net/" >https://mobaxterm.mobatek.net/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br>&emsp;&emsp;4、MeterSphere 提供的 Ubuntu OVA 文件：<a class="link"   href="https://pan.baidu.com/s/1SDy2HZNlDQYCy6J7wPsmtw?pwd=423w" >https://pan.baidu.com/s/1SDy2HZNlDQYCy6J7wPsmtw?pwd=423w<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br>&emsp;&emsp;MaxKB离线部署包：<a class="link"   href="https://community.fit2cloud.com/#/products/maxkb/downloads" >https://community.fit2cloud.com/#/products/maxkb/downloads<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<hr>
<h3 id="步骤一：下载安装Ollama"><a href="#步骤一：下载安装Ollama" class="headerlink" title="步骤一：下载安装Ollama"></a>步骤一：下载安装Ollama</h3><p>&emsp;&emsp;1、打开Ollama官网，点击“Download”<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/11/17/bBLZcWr95IgleFo.png"
                      alt="image.png"
                ><br>&emsp;&emsp;2、安装Ollama，一直点下一步就可以<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/11/17/nG8SChO9FZJil75.png"
                      alt="image.png"
                ><br>&emsp;&emsp;3、打开PowerShell，输入以下命令</p>
<div class="code-container" data-rel="Powershell"><figure class="iseeu highlight powershell"><table><tr><td class="code"><pre><span class="line">ollama run qwen2.<span class="number">5</span></span><br></pre></td></tr></table></figure></div>

<p>&emsp;&emsp;4、等待模型下载<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/11/17/TEYHSz6kUJrLewd.png"
                      alt="image.png"
                ><br>&emsp;&emsp;5、等待模型下载完成，当出现下图相类似内容时，表明安装成功。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/11/17/xjIcDL7oWmkPJal.png"
                      alt="image.png"
                ><br>&emsp;&emsp;6、这时候可以随便输入一点测试一下，比如提问你是，<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/11/17/y9ldCFTmtAxuQwS.png"
                      alt="image.png"
                ><br>&emsp;&emsp;之后你可以继续使用第三步的命令来运行模型，并且不用重新下载。当然，命令行界面不咋好看，还没办法进行多模态交互，所以，我们要构建一个WebUI。</p>
<hr>
<h3 id="步骤二：WebUI构建"><a href="#步骤二：WebUI构建" class="headerlink" title="步骤二：WebUI构建"></a>步骤二：WebUI构建</h3><p>&emsp;&emsp;1、安装VirtualBox,依旧是无脑下一步即可<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/11/17/BoHiZt9Vvng7GSz.png"
                      alt="image.png"
                ><br>&emsp;&emsp;2、打开程序<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/11/17/SYMkvEnHpyVrKgq.png"
                      alt="image.png"
                ><br>&emsp;&emsp;3、点击<em><strong>导入</strong></em>，打开MeterSphere提供的Ubuntu OVA文件，然后等待系统载入<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/11/17/HiNRpZTuEdmWMst.png"
                      alt="image.png"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/11/17/6NsvpJquFIV4tnc.png"
                      alt="image.png"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/11/17/N6PbxM1RDJInSoY.png"
                      alt="image.png"
                ><br>&emsp;&emsp;4、点击启动后等待系统启动，等显示到此界面时，输入用户名以及密码，用户名：<em><strong>root</strong></em> ；密码： <em><strong>passwd</strong></em> ，注意的是，输入密码时界面并不会显示文字，所以输入后直接回车即可<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/11/17/1vfpIYacUX4quoi.png"
                      alt="image.png"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/11/17/J2rORaLYDh4tZqC.png"
                      alt="image.png"
                ><br>&emsp;&emsp;5、然后输入以下命令来查看虚拟机IP,注意区分本机IP和虚拟机IP，然后记住这个虚拟机IP，后续要用</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ip a</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/11/17/BWIJa5Rz6uKOTpZ.png"
                      alt="image.png"
                ><br>&emsp;&emsp;6、打开MobaXterm，新建会话，把我们的虚拟机IP，虚拟机的用户名“ROOT”和密码都输进去，需要注意的是，此时输入密码也是不会显示的，输入完直接敲回车就好。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/11/17/3FZkoiajwCUmtHs.png"
                      alt="image.png"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/11/17/n28izqv3EjNwc91.png"
                      alt="image.png"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/11/17/5d8mTCk12JoatBK.png"
                      alt="image.png"
                ><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/11/17/KFQlEOgNrLkUbyH.png"
                      alt="image.png"
                ><br>&emsp;&emsp;7、当显示下图时，代表启动成功<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/11/17/B5tuym7FpQ1YkCh.png"
                      alt="image.png"
                ><br>&emsp;&emsp;8、然后把我们刚才下载的MaxKB包直接拖到这个窗口上<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/11/17/swrBax73hoWV4D1.png"
                      alt="image.png"
                ><br>&emsp;&emsp;9、然后输入以下命令</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">#解压安装包</span><br><span class="line">tar -zxvf maxkb-v1.7.2-offline.tar.gz</span><br><span class="line">#其中maxkb-v1.7.2-offline.tar.gz为下载的离线安装包，注意版本是否与命令相同，不同的改一下命令</span><br><span class="line"></span><br><span class="line"># 进入安装包解压缩后目录 </span><br><span class="line">cd maxkb-v1.7.2-offline</span><br><span class="line"># 执行安装命令</span><br><span class="line">/bin/bash install.sh</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>&emsp;&emsp;10、打开环境变量配置，在用户变量中添加以下内容</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">变量名：OLLAMA_HOST</span><br><span class="line">变量值：0.0.0.0</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/11/18/nr1oKEgQUXcqAjs.png"
                      alt="image.png"
                ><br>&emsp;&emsp;11、在浏览器中输入以下地址，进入MaxKb配置界面，用户名： <em><strong>admin</strong></em> ； 密码： ***MaxKB@123..***，第一次登入要改密码</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">http://虚拟机IP:8080</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/11/17/uJZWzL2PCv3RjiH.png"
                      alt="image.png"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/11/17/36hOXboPYvCR4r8.png"
                      alt="image.png"
                ><br>&emsp;&emsp;12、按步骤点击，配置模型，因为我们是本地ollama模型，所以模型要选ollama，然后后续参数按我的图来，其中，基础模型要输入 <em><strong>qwen2.5</strong></em> 然后回车，不要用它列表里面的，关于API域名，是下面第三张图中框出来的部分加11434，整体就是</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><figcaption><span>域名</span></figcaption><table><tr><td class="code"><pre><span class="line">http://你的框出来的IP:11434</span><br></pre></td></tr></table></figure></div>

<p>&emsp;&emsp;关于API Key那一块可以随便输，只要你能记得就很好<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/11/17/KU5LRsEgfToez14.png"
                      alt="image.png"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/11/18/avFUAi6woD7EJ3l.png"
                      alt="image.png"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/11/18/6HfUVytejGgBic8.png"
                      alt="image.png"
                ><br>&emsp;&emsp;13、点击确定，然后回到应用，这一步可以做的有很多，小白建议跟着我做最基本的。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/11/18/6oUkO9AsHavj1fr.png"
                      alt="image.png"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/11/18/X3mKb8tJPr4cGOd.png"
                      alt="image.png"
                ><br>&emsp;&emsp;14、创建应用后来到这个界面<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/11/18/krSQVD5O2GKbU8t.png"
                      alt="image.png"
                ><br>&emsp;&emsp;具体参数如下：</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>应用名称</td>
<td>你的AI想叫什么名字</td>
</tr>
<tr>
<td>应用描述</td>
<td>想用来干什么</td>
</tr>
<tr>
<td>AI 模型</td>
<td>我们刚刚创建的模型名，我这里叫亓翎</td>
</tr>
<tr>
<td>角色设定</td>
<td>基础的模型设定，让模型自我介绍用</td>
</tr>
<tr>
<td>提示词</td>
<td>通过调整提示词内容，可以引导大模型聊天方向，该提示词会被固定在上下文的开头。可以使用变量：{question} 是用户提出问题的占位符。</td>
</tr>
<tr>
<td>历史聊天记录</td>
<td>按次数保存会话记录，一次退出算一次，我喜欢设置成5~10这样</td>
</tr>
<tr>
<td>关联知识库</td>
<td>可以关联知识库，可以自己创建，也可以关联网上的，我这里没有关联</td>
</tr>
<tr>
<td>提示词 (引用知识库)</td>
<td>这边可以不用填，因为没有关联知识库，如果填了，那就去细分一下</td>
</tr>
<tr>
<td>开场白</td>
<td>很简单的东西，就是AI第一句要说什么</td>
</tr>
<tr>
<td>语音输入</td>
<td>这边要创建语音模型，我们最基础的不用做</td>
</tr>
<tr>
<td>语音播放</td>
<td>这个根据需要开</td>
</tr>
</tbody></table>
<p>&emsp;&emsp;这些写完就可以点右上角的保存并发布了，如果需要更多的玩法可以参照MaxKb的官方文档。然后回到这个界面，点击图中框出来的地方就可以开始用了。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/11/18/1R25OkSbLyadUIl.png"
                      alt="image.png"
                ><br>&emsp;&emsp;后续如果浏览器访问的话，可以先点一下这个应用的名字，红色覆盖住的地方就是你的一个地址，收藏这个地址后续就可以即点即用了<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/11/18/ZPJjrtD5AfOpSal.png"
                      alt="image.png"
                ></p>
]]></content>
      <categories>
        <category>AI学习系列</category>
      </categories>
      <tags>
        <tag>AI</tag>
      </tags>
  </entry>
  <entry>
    <title>APK技术日常02-APK源码的查看</title>
    <url>/posts/64111/</url>
    <content><![CDATA[<p><em><strong>&emsp;&emsp;代码设计是每位工程师心血的结晶，源代码的查看仅能作为学习使用，不可以不劳而获。</strong></em></p>
<hr>
<h2 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h2><p>&emsp;&emsp;1、<a class="link"   href="https://sourceforge.net/projects/dex2jar/files/latest/download" >dex2jar<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>&emsp;用于可运行文件classes.dex反编译为jar文件；<br>&emsp;&emsp;2、<a class="link"   href="http://java-decompiler.github.io/" >JD-GUI<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>&emsp;用于查看jar文件源码</p>
<hr>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>&emsp;&emsp;1、将自己所要提取的apk文件后缀名改为zip（或者其他可以解压的后缀，如rar），并且解压（注：此过程不可逆，解压缩之后再压缩，会导致apk损坏，建议先备份一份，然后用副本做修改工作）<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/09/GpUrjXvH8EBdMnJ.png"
                      alt="image.png"
                ><br>&emsp;&emsp;2、将&ensp;<em><strong>classes.des</strong></em>&ensp;文件复制到dex2jar的目录之下<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/09/g7ewyZ4hQDvdGVS.png"
                      alt="image.png"
                ><br>&emsp;&emsp;3、在此目录下运行cmd（运行办法见<a href="https://re-tikara.github.io/2024/01/07/mou-xie-ji-zhu-ri-chang/apk-xiu-gai-xi-lie/ji-zhu-ri-chang-01-apk-fan-bian-yi/">APK技术日常01</a>），在CMD中运行以下命令</p>
<div class="code-container" data-rel="Cmd"><figure class="iseeu highlight cmd"><table><tr><td class="code"><pre><span class="line">d2j-dex2jar.bat classes.dex</span><br></pre></td></tr></table></figure></div>
<p>&emsp;&emsp;会生成由 <em><strong>classes.dex</strong></em> 反编译得到的jar文件 <em><strong>classes-dex2jar.jar</strong></em> 。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/09/8VIBrYyfChSlNpw.png"
                      alt="image.png"
                ><br>4、用JD-GUI打开 <em><strong>classes-dex2jar.jar</strong></em>即可查看源码（注：源码若经过混淆，此处能查看的也是经过混淆的版本）<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/09/wHEtAbVxR2OYCsP.png"
                      alt="image.png"
                ></p>
<hr>
<h2 id="STAFF"><a href="#STAFF" class="headerlink" title="STAFF"></a>STAFF</h2><p>&emsp;&emsp;1、dex2jar：<a class="link"   href="https://sourceforge.net/projects/dex2jar/files/latest/download" >https://sourceforge.net/projects/dex2jar/files/latest/download<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br>&emsp;&emsp;2、JD-GUI：<a class="link"   href="http://java-decompiler.github.io/" >http://java-decompiler.github.io/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<hr>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>&emsp;&emsp;如果只是想更换图片等资源，在<a href="https://re-tikara.github.io/2024/01/07/mou-xie-ji-zhu-ri-chang/apk-xiu-gai-xi-lie/ji-zhu-ri-chang-01-apk-fan-bian-yi/">APK技术日常01</a>那里处理完apk进入对应文件夹修改即可。修改代码比较麻烦，因为反编译出来的结果中只有smali文件，即Java虚拟机支持的汇编语言。如果确实需要修改代码，就得对照smali文件和从classes.dex反编译出来的源码了，按照smali的规范来改动即可。相当于写汇编，难度较大，感兴趣可以自己探索。</p>
]]></content>
      <categories>
        <category>APK修改系列</category>
      </categories>
      <tags>
        <tag>APK</tag>
        <tag>技术日常</tag>
      </tags>
  </entry>
  <entry>
    <title>APK技术日常03—APK的再打包与签名</title>
    <url>/posts/15022/</url>
    <content><![CDATA[<p><em><strong>&emsp;&emsp;此处的apk的再打包是指之前教程中所拆解出来的apk文件的打包，如果是自己做的文件，不确定是否适用。而签名则是相当于对apk文件的认证，不签名则无法安装。</strong></em></p>
<hr>
<h2 id="打包步骤"><a href="#打包步骤" class="headerlink" title="打包步骤"></a>打包步骤</h2><p>&emsp;&emsp;首先在你需要打包的文件的上一级目录下，打开CMD，运行以下命令</p>
<div class="code-container" data-rel="Cmd"><figure class="iseeu highlight cmd"><table><tr><td class="code"><pre><span class="line">apktool b &lt;folderPath&gt; -o folder&#x27;s name.apk</span><br></pre></td></tr></table></figure></div>
<p>&emsp;&emsp;这个命令的意义在于将 <em><strong>&lt; floderpath &gt;</strong></em> 这个文件夹打包为以这个文件夹名为文件名的apk文件。<br>&emsp;&emsp;比如此时我的文件结构为：<br>&emsp;&emsp;&emsp;&emsp;&emsp;E:<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;└─ apktool（需要打包的文件夹的上一级目录）<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;└─pose-monitor-release（需要打包的文件夹）<br>&emsp;&emsp;所以此时我就需要在apktool文件夹下运行cmd，运行命令：</p>
<div class="code-container" data-rel="Cmd"><figure class="iseeu highlight cmd"><table><tr><td class="code"><pre><span class="line">apktool b pose-monitor-release -o pose-monitor-release.apk</span><br></pre></td></tr></table></figure></div>
<p>&emsp;&emsp;这样就会把pose-monitor-release这个文件夹打包成一个名为pose-monitor-release的apk文件，当出现如下图所示的信息时即为打包成功。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/11/WMcSA1CfyBxoQPl.png"
                      alt="image.png"
                ><br>&emsp;&emsp;之后你就可以看到你打包好的apk文件了（如果在需要打包的目录的同一级目录下没有找到，那就到需要打包的文件夹下的 <em><strong>build</strong></em> 文件夹下查看。</p>
<hr>
<h2 id="签名APK"><a href="#签名APK" class="headerlink" title="签名APK"></a>签名APK</h2><h3 id="工具准备"><a href="#工具准备" class="headerlink" title="工具准备"></a>工具准备</h3><p>&emsp;&emsp;<a class="link"   href="https://mt2.cn/" >MT管理器<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>&emsp;&emsp;首先，在MT管理器中找到要处理的文件（可以用右上角三个点搜索）<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/11/2IMwYcCarh6A35z.jpg"
                      alt="目录.jpg"
                ><br>&emsp;&emsp;为了确认，我点了一下，看了下详细信息<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/11/cwsQYWACzPfxHpm.jpg"
                      alt="详细信息.jpg"
                ><br>&emsp;&emsp;然后长按，选择签名<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/11/SjQrmH6Nylqsoue.jpg"
                      alt="菜单.jpg"
                ><br>&emsp;&emsp;签名秘钥可以选默认，也可以选自定义（如果你会的话），方案选择V1+V2（如果有报错，试试其他的方案）<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/11/xtmzhCZG1BaVRd4.jpg"
                      alt="签名选择.jpg"
                ><br>&emsp;&emsp;此时大概率会有以下两种提示<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/11/hXrMAptilO5vInG.jpg"
                      alt="报错（权限）.jpg"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/11/x4AQF5uOVvaw9Cz.jpg"
                      alt="报错（权限2）.jpg"
                ><br>第一个发送通知点允许就好，这个是为了出现第二个提示。第二个提示随便点就好，没什么影响。<br>&emsp;&emsp;等到进度条走完<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/11/iMkVmHRYeN2uFbr.jpg"
                      alt="进度条.jpg"
                ><br>&emsp;&emsp;会出现一个新的文件<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/11/2QGXdAOqCFN5tkv.jpg"
                      alt="生成文件.jpg"
                ><br>&emsp;&emsp;第一个那个不是绿色的文件就是。至此，签名完成，可以自己试着安装。</p>
<hr>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>&emsp;&emsp;签名后如果产生报错，可以换个签名方式。V1，V2，V3其实对应着不同的安卓版本，自己看就好，还有一种签名方式就是使用JAVA的keytool，但是我忘了我的秘钥，具体可以自行百度。我觉得用MT最简单~~~</p>
]]></content>
      <categories>
        <category>APK修改系列</category>
      </categories>
      <tags>
        <tag>APK</tag>
        <tag>技术日常</tag>
      </tags>
  </entry>
  <entry>
    <title>MMD扫盲系列01——认识MMD</title>
    <url>/posts/45af3d29/</url>
    <content><![CDATA[<p>&emsp;&emsp;我觉得这个系列很有必要。。。。。。现在真的，，手机太普及了么？还是啥。。。先做个MMD扫盲系列吧，这个系列里面不会介绍MMD的发展历程等，只会讲MMD是什么，如何用等技术类问题。 <em><strong>本系列教程全部基于Windows系统的931汉化追加MME版本进行演示</strong></em> 。注意：软件没有最好，只有最适合自己的！！</p>
<hr>
<h2 id="2024年7月14日更新！！"><a href="#2024年7月14日更新！！" class="headerlink" title="2024年7月14日更新！！"></a>2024年7月14日更新！！</h2><p>&emsp;&emsp;我做了一个MMD的安装包！！！！！！，下载链接：<br>&emsp;&emsp;<a class="link"   href="https://wwb.lanzouw.com/b00taqonti" >https://wwb.lanzouw.com/b00taqonti<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br>&emsp;&emsp;密码:5k22<br>&emsp;&emsp;新人专享系列！！！！这样你就不用纠结了！！！芜湖！！！不用解压缩啥的！！</p>
<hr>
<h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><p>&emsp;&emsp;MMD全称MikuMikuDance，是由日本人樋口优所创建的一个免费的动画软件。本体为日文版软件，由Emil开始繁体汉化，Kinsama修改并发布。当前传播最广的版本有Ver.932，Ver.931，Ver.10th，Ver.926（我知道的，并且是我用过的），还有以上版本+Bridge的版本。</p>
<hr>
<h2 id="认识文件"><a href="#认识文件" class="headerlink" title="认识文件"></a>认识文件</h2><p>&emsp;&emsp;现阶段MMD传播基本是靠人手相传。所以基本都是处在 <em><strong>压缩包</strong></em> 这一文件类型内。所以我们需要一个解压缩软件，比如<a class="link"   href="https://www.bandisoft.com/bandizip/" >Bandzip<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>、<a class="link"   href="https://7-zip.org/" >7-zip<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>等。非常建议选一个可以切换压缩语言代码的，因为后期如果下载素材，说不定会遇到乱码。我用的版本压缩包内容展示如下<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/07/10/xLb6wB3a7izVWch.png"
                      alt="PixPin_2024-07-10_16-59-05.png"
                ></p>
<hr>
<h2 id="使用软件"><a href="#使用软件" class="headerlink" title="使用软件"></a>使用软件</h2><p>&emsp;&emsp;将文件解压缩之后，得到如下所示的文件夹<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/07/10/ExeWOfKzriugw9Y.png"
                      alt="image.png"
                ><br>&emsp;&emsp;然后右键 <em><strong>MikuMikudance.exe</strong></em> ，选择 <em><strong>发送到——桌面快捷方式</strong></em><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/07/10/3jV1QtXrd8Un7S2.png"
                      alt="image.png"
                ><br>&emsp;&emsp;这样你的桌面就有MMD了，在启动MMD前，请务必将MMD根目录下的 <em><strong>！！如果出现报错无法启动请安装这个文件夹里的全部文件</strong></em> 这个文件夹内的所有程序全部安装一遍。这样做可以防止日后出错。如果安装后启动时依旧出现报错，请自行搜索 <em><strong>微软常用运行库</strong></em></p>
<hr>
<h2 id="认识界面"><a href="#认识界面" class="headerlink" title="认识界面"></a>认识界面</h2><p>&emsp;&emsp;MMD主界面如下<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/07/10/y7JrMDesfc6Zu1q.png"
                      alt="PixPin_2024-07-10_16-15-20.png"
                ><br>&emsp;&emsp;介绍如下，点大图看<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/07/10/2wOJ9Mo1Ag4TvFh.png"
                      alt="PixPin_2024-07-10_16-15-20.png"
                ></p>
<hr>
<h2 id="认识文件类型"><a href="#认识文件类型" class="headerlink" title="认识文件类型"></a>认识文件类型</h2><p>&emsp;&emsp;MMD支持的文件类型不算多，介绍如下：</p>
<h3 id="PMX-PMD："><a href="#PMX-PMD：" class="headerlink" title="PMX&#x2F;PMD："></a>PMX&#x2F;PMD：</h3><p>&emsp;&emsp;MMD唯二支持的可操控有骨骼的模型文件，区别如下：PMX（Polygon Model eXtended）和PMD（Polygon Model Data）主要在 <strong>格式版本、数据结构复杂性和兼容性</strong> 等方面有所区别。<br>&emsp;&emsp;具体分析如下：</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>PMX</th>
<th>PMD</th>
</tr>
</thead>
<tbody><tr>
<td>格式版本</td>
<td>PMX是PMD的继承者，通常被认为是更加先进和改进的版本。</td>
<td>PMD是较早的模型格式，相对于PMX来说，可能不那么流行或支持较新的功能。</td>
</tr>
<tr>
<td>数据结构复杂性</td>
<td>PMX具有更复杂的数据结构，支持更多的建模元素和细节，如额外的vec4数量、顶点索引大小等，允许存储更丰富的模型信息。</td>
<td>PMD的数据结构较为简单，没有像PMX那样支持扩展的数据类型和结构。</td>
</tr>
<tr>
<td>兼容性</td>
<td>PMX由于其结构上的优势，通常拥有更好的兼容性，可以更方便地与各种3D软件进行交互。</td>
<td>PMD兼容性相对较差，可能在一些新版的软件或工具中不被完全支持。</td>
</tr>
<tr>
<td>使用范围</td>
<td>PMX由于没有模型定点限制，逐渐成为主流格式，被更多地使用和推荐。</td>
<td>PMD尽管仍然被支持，但使用频率可能不如PMX高。</td>
</tr>
<tr>
<td>支持工具</td>
<td>PMX可以使用如PmxEditor这样的专业工具进行编辑和研究，这些工具能够更好地展示文件结构。</td>
<td>MD虽然也能用类似的工具编辑，但可能不支持所有高级功能。</td>
</tr>
<tr>
<td>可扩展性</td>
<td>PMX设计时考虑了更多的可扩展性，为未来的扩展和功能的加入留下了空间。</td>
<td>PMD相对来说，扩展性不如PMX。</td>
</tr>
<tr>
<td>用户社区偏好</td>
<td>用户社区中，PMX似乎更受欢迎，可能是因为它更符合现代模型制作的需求。</td>
<td>PMD虽然仍有一席之地，但在新兴的用户中可能不如PMX流行。</td>
</tr>
</tbody></table>
<p>&emsp;&emsp;针对上述分析，可以考虑以下几点建议：<br>&emsp;&emsp;如果您需要与其他3D软件兼容或寻找更多的社区支持，推荐使用PMX格式。<br>&emsp;&emsp;当您处理旧模型或需要与老版本MMD软件兼容时，可能需要使用PMD格式。<br>&emsp;&emsp;综上所述，PMX作为更新的模型文件格式，提供了更多的功能和更好的兼容性，逐渐成为MMD用户的首选格式。而PMD作为早期的格式，虽然仍具有一定的用户基础，但相比之下可能略显过时。无论选择哪种格式，确保您使用适合的工具和插件来优化您的工作流程，并保持对新工具和社区资源的持续关注。</p>
<h3 id="VMD"><a href="#VMD" class="headerlink" title="VMD"></a>VMD</h3><p>&emsp;&emsp;VMD是一种动作数据文件格式，主要用于记录3D模型的动作、形态变化、相机移动和光照变化等动画信息。<br>&emsp;&emsp;VMD文件包含了一种二进制流数据，具有较为复杂的内部结构。它有两个版本，分别以”Vocaloid Motion Data file”和”Vocaloid Motion Data 0002”标识。文件的前30个字节用于描述版本信息，随后是模型名称，之后依次是骨骼关键帧、变形关键帧、相机关键帧以及灯光关键帧的记录。<br>&emsp;&emsp;与此同时，镜头VMD文件只能给镜头用，动作VMD文件只能给人物或者场景用。因为在MMD中，因为存在index类型，所以也不怕重名，是一一对应的关系，但是与此同时的是MMD模型只要名字有一丝不同，比如多了一个空格之类的，就会无法识别。</p>
<h3 id="VPD"><a href="#VPD" class="headerlink" title="VPD"></a>VPD</h3><p>&emsp;&emsp;VPD是一种姿势数据文件格式，在文件数据中仅有一帧的骨骼变换姿态，与VMD不同的是，VMD是一段，而VPD是一帧，即一张画面，一般适用于做静画之类的</p>
<h3 id="WAV"><a href="#WAV" class="headerlink" title="WAV"></a>WAV</h3><p>&emsp;&emsp;MMD仅仅支持这一种音乐类型格式，不支持MP3或者其他格式。WAV文件介绍如下：<br>&emsp;&emsp;WAV文件是一种标准的数字音频文件格式，主要用于保存无损的音频数据，以保证声音质量的最佳还原。<br>&emsp;&emsp;WAV文件采用RIFF（Resource Interchange File Format）文件格式结构，通常用来保存PCM（Pulse Code Modulation）格式的原始音频数据，因此被称为无损音频。它是由微软公司和IBM联合设计的，最早于1991年8月在Windows 3.1操作系统上出现，文件扩展名为WAV。该格式得到了Windows、Macintosh、Linux等多种操作系统的支持。WAV文件具有以下特点：<br>&emsp;&emsp; <strong>高音质</strong> ：<br>&emsp;&emsp;WAV文件保存的是原始的音频数据，几乎没有进行数据压缩，因此能够最大程度地保留音频的真实质量。其音质与CD相差无几，常用于专业的音频处理和高质量音乐播放。<br>&emsp;&emsp; <strong>支持多种采样率</strong> ：<br>&emsp;&emsp;WAV文件支持多种采样率和采样位数，例如44.1kHz、22.05kHz等，以及16位或8位的采样精度。这使得它能适应不同的音频录制需求，从一般的音乐播放到专业音频制作均可胜任。<br>&emsp;&emsp; <strong>支持不同声道</strong> ：<br>&emsp;&emsp;WAV格式支持单声道和立体声录音。立体声文件使用两个声道，分别记录左右声道信息，使得音频具有空间感和立体感，适合复杂的声音场景。<br>&emsp;&emsp; <strong>文件体积较大</strong> ：<br>&emsp;&emsp;由于WAV文件保存的是未压缩的音频数据，因此文件体积相对较大，每分钟的音乐大约需要10MB左右的存储空间。这也限制了其在长时间音频记录和网络传输中的应用。<br>&emsp;&emsp;此外，WAV文件还广泛应用于音效素材的保存和分享。许多网站提供大量免费的WAV音效资源，如爱给网等，这些资源可以用于影视、游戏、动画等多个领域，极大地丰富了多媒体制作的内容。<br>&emsp;&emsp;综上所述，WAV文件以其高质量的无损音频保存方式，在音频处理、音乐播放和多媒体制作中发挥着重要作用。尽管文件体积较大，但其在保证音质方面的优势使其成为众多专业人士和爱好者的首选格式。</p>
<h3 id="X文件与FX文件"><a href="#X文件与FX文件" class="headerlink" title="X文件与FX文件"></a>X文件与FX文件</h3><table>
<thead>
<tr>
<th>类型</th>
<th>X</th>
<th>FX</th>
</tr>
</thead>
<tbody><tr>
<td>定义</td>
<td>X文件通常在MMD中作为附件载入使用，它不涉及复杂的图形渲染操作，更多的是作为补充或扩展MMD功能的一种轻量级文件。</td>
<td>FX文件是一种使用高阶着色器语言（HLSL）标准创建的文本文件，它定义了一个DirectX 9（DX9）明暗器，专门用于处理材质的光照和渲染效果。</td>
</tr>
<tr>
<td>功能用途</td>
<td>X文件在MMD中主要用于增强场景的互动性和视觉效果，富动画的表现力。</td>
<td>FX文件在MMD中用于实现高质量和复杂计算的材质效果，如高级光影效果、曲面细分等。它通过HLSL在GPU上执行快速的数学计算，实现更加逼真和动态的渲染效果。</td>
</tr>
<tr>
<td>使用范围</td>
<td>在PmxEditor创建一个X文件，并将材质定义为screen.bmp，在MMD中开启屏幕捕捉则可实现投影效果</td>
<td>在MMD中加载MME功能后，则可以给X文件定义FX来实现各种更加炫酷的效果</td>
</tr>
</tbody></table>
<p>&emsp;&emsp;综上所述，X文件和FX文件在MMD中各司其职，前者提供了一种简易的方式来实现一些视觉特效，而后者则负责处理更高端和复杂的材质渲染任务。了解它们之间的区别和各自的优势，可以帮助用户更加合理地利用这些资源来制作出质量更高、视觉效果更佳的MMD作品。</p>
<h3 id="PMM"><a href="#PMM" class="headerlink" title="PMM"></a>PMM</h3><p>&emsp;&emsp;PMM文件是MMD的工程文件。特殊的是，pmm是存储的是绝对路径，一旦你的素材更改位置，PMM便会因为无法识别而导致MMD闪退或者无法打开工程文件，需要重新定义。</p>
<hr>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>&emsp;&emsp;MMD新手请多去B站等看看有关教程，遇事不决善用搜索引擎，无法解决后再提问。</p>
]]></content>
      <categories>
        <category>MMD扫盲系列</category>
      </categories>
      <tags>
        <tag>MMD扫盲系列</tag>
      </tags>
  </entry>
  <entry>
    <title>鸿蒙开发学习日志01——初识</title>
    <url>/posts/248035e8/</url>
    <content><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>&emsp;&emsp;也是一个新的篇章啊，欢迎来到AL_Studio的鸿蒙NEXT开发课堂。</p>
<h3 id="鸿蒙NEXT介绍"><a href="#鸿蒙NEXT介绍" class="headerlink" title="鸿蒙NEXT介绍"></a>鸿蒙NEXT介绍</h3><p>&emsp;&emsp;鸿蒙Next代表着华为鸿蒙操作系统的下一代演进，预计将带来更强的分布式技术以实现更流畅的跨设备协同、性能上的优化以提高系统效率和响应速度、以及进一步的安全性和隐私保护增强。此外，它还将致力于扩展其应用生态，吸引更多的开发者参与，并可能引入更多的人工智能特性来提供个性化的用户体验。随着物联网的发展，鸿蒙Next旨在为用户提供一个更加智能、安全且互联的操作环境。</p>
<h3 id="DevEco-Studio"><a href="#DevEco-Studio" class="headerlink" title="DevEco Studio"></a>DevEco Studio</h3><p>&emsp;&emsp;DevEco Studio是HarmonyOS应用及服务的集成开发环境（IDE），提供了一站式的开发平台，包括代码编辑、编译构建、代码调试、性能调优、模拟器、应用测试等能力。</p>
<h2 id="安装DevEco-Studio"><a href="#安装DevEco-Studio" class="headerlink" title="安装DevEco Studio"></a>安装DevEco Studio</h2><p>&emsp;&emsp;首先，让我们注册一个华为账户<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2025/01/19/s8PmtpET3NewFoA.png"
                      alt="image.png"
                ><br>&emsp;&emsp;然后,进入<a class="link"   href="https://developer.huawei.com/consumer/cn/download" >DevEco Studio<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>官网，根据电脑系统版本选择对应下载即可，本篇将以Windows11 23H2 22631.4751作为演示。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2025/01/19/6bdnrSaNP1oqXZy.png"
                      alt="image.png"
                ><br>&emsp;&emsp;下载完成后，会得到一个压缩包<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2025/01/19/YPm6vULQGpqS81H.png"
                      alt="image.png"
                ><br>&emsp;&emsp;解压后，双击<code>deveco-studio-5.0.7.100.exe</code>文件，即可进入安装向导。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2025/01/19/NL2qpAe1hYMRDIJ.png"
                      alt="image.png"
                ><br>&emsp;&emsp;然后根据自己需要安装即可。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2025/01/19/IOlh5eAj2qHyzVS.png"
                      alt="image.png"
                ><br>&emsp;&emsp;这边这些建议全选</p>
<h3 id="第一次的各种配置"><a href="#第一次的各种配置" class="headerlink" title="第一次的各种配置"></a>第一次的各种配置</h3><p>&emsp;&emsp;第一打开，我们会有这样的一个界面<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2025/01/19/mfjWqPyarVTONip.png"
                      alt="image.png"
                ><br>&emsp;&emsp;这个是导入DecEco的设置，你可以从别人那里要一份，也可以自己设置，这边选择第二个<code>Do not import settings</code>，然后点OK，进入下一个界面，直接点<code>Agree</code>，如果无法点击，看看下面那一行是否打勾。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2025/01/19/cFhrPUTCQeqEXko.png"
                      alt="image.png"
                ><br>&emsp;&emsp;完成之后就可以进入初始化界面了<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2025/01/19/8npL5Qr7ehfJC6d.png"
                      alt="image.png"
                ><br>&emsp;&emsp;点击<code>Creat Project</code>，进入创建页面<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2025/01/19/KifHUEoWNsQrXqV.png"
                      alt="image.png"
                ><br>&emsp;&emsp;选择第一个，点击<code>Next</code>，进入下一个页面<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2025/01/19/dNVAzr9vt6S3koO.png"
                      alt="image.png"
                ><br>&emsp;&emsp;这边保持默认，什么都不用动，点击<code>Finish</code>，进入下一个页面<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2025/01/19/LehiGbcK7E5aN6S.png"
                      alt="image.png"
                ><br>&emsp;&emsp;然后点击左上角<code>File</code>，选择<code>Settings</code>，进入设置页面<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2025/01/19/7RgXoOIK625ryMc.png"
                      alt="image.png"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2025/01/19/j1rCobXV5fhGkEa.png"
                      alt="image.png"
                ><br>&emsp;&emsp;选择<code>Plugins</code>，点击<code>Installed</code>，在搜索框输入<code>Chinese</code>，出现的第一个结果，勾选，点击<code>Apply</code>，然后点击<code>OK</code><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2025/01/19/kvwliemQNz4gh6H.png"
                      alt="image.png"
                ><br>&emsp;&emsp;之后会弹窗要求你重启DevEco Studio，选择<code>Restart</code>，等待重启完成即可。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2025/01/19/Tz82XjgQd9hFEyR.png"
                      alt="image.png"
                ><br>&emsp;&emsp;这样你的DevEco Studio就配置好了。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2025/01/19/yCLXn9dbSNqkMaY.png"
                      alt="image.png"
                ></p>
]]></content>
      <categories>
        <category>HarmonyOS_Next</category>
      </categories>
      <tags>
        <tag>HarmonyOS-Next</tag>
      </tags>
  </entry>
  <entry>
    <title>MMD扫盲系列02——MMD基本骨骼介绍</title>
    <url>/posts/7639a586/</url>
    <content><![CDATA[<p>&emsp;&emsp;扫盲系列能开到第二期，在座各位都有责任，这期来讲讲骨骼。（全部是我的理解），同时这一期不咋讲参数之类的，写不动，下一期写。</p>
<hr>
<h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><p>&emsp;&emsp;这里拿一个全套骨骼来讲，一个人物模型要想能用，基本包括标准骨和次标准骨。</p>
<table>
<thead>
<tr>
<th align="center">骨骼名1</th>
<th align="center">骨骼名2</th>
<th align="center">骨骼名3</th>
<th align="center">骨骼名4</th>
<th align="center">骨骼名5</th>
</tr>
</thead>
<tbody><tr>
<td align="center">操作中心</td>
<td align="center">左腕</td>
<td align="center">左薬指２</td>
<td align="center">右手捩2</td>
<td align="center">右人指２</td>
</tr>
<tr>
<td align="center">全ての親</td>
<td align="center">左腕捩</td>
<td align="center">左薬指３</td>
<td align="center">右手捩3</td>
<td align="center">右人指３</td>
</tr>
<tr>
<td align="center">センター</td>
<td align="center">左腕捩1</td>
<td align="center">左薬指先</td>
<td align="center">右手首</td>
<td align="center">右人指先</td>
</tr>
<tr>
<td align="center">グルーブ</td>
<td align="center">左腕捩2</td>
<td align="center">左中指１</td>
<td align="center">右ダミー</td>
<td align="center">腰キャンセル左</td>
</tr>
<tr>
<td align="center">腰</td>
<td align="center">左腕捩3</td>
<td align="center">左中指２</td>
<td align="center">右手先</td>
<td align="center">左足</td>
</tr>
<tr>
<td align="center">左足IK親</td>
<td align="center">左ひじ</td>
<td align="center">左中指３</td>
<td align="center">右親指０</td>
<td align="center">左ひざ</td>
</tr>
<tr>
<td align="center">左足ＩＫ</td>
<td align="center">左手捩</td>
<td align="center">左中指先</td>
<td align="center">右親指１</td>
<td align="center">左足首</td>
</tr>
<tr>
<td align="center">左つま先ＩＫ</td>
<td align="center">左手捩1</td>
<td align="center">左人指１</td>
<td align="center">右親指２</td>
<td align="center">左つま先</td>
</tr>
<tr>
<td align="center">右足IK親</td>
<td align="center">左手捩2</td>
<td align="center">左人指２</td>
<td align="center">右親指先</td>
<td align="center">腰キャンセル右</td>
</tr>
<tr>
<td align="center">右足ＩＫ</td>
<td align="center">左手捩3</td>
<td align="center">左人指３</td>
<td align="center">右小指１</td>
<td align="center">右足</td>
</tr>
<tr>
<td align="center">右つま先ＩＫ</td>
<td align="center">左手首</td>
<td align="center">左人指先</td>
<td align="center">右小指２</td>
<td align="center">右ひざ</td>
</tr>
<tr>
<td align="center">上半身</td>
<td align="center">左ダミー</td>
<td align="center">右肩P</td>
<td align="center">右小指３</td>
<td align="center">右足首</td>
</tr>
<tr>
<td align="center">上半身2</td>
<td align="center">左手先</td>
<td align="center">右肩</td>
<td align="center">右小指先</td>
<td align="center">右つま先</td>
</tr>
<tr>
<td align="center">下半身</td>
<td align="center">左親指０</td>
<td align="center">右肩C</td>
<td align="center">右薬指１</td>
<td align="center">左足D</td>
</tr>
<tr>
<td align="center">首</td>
<td align="center">左親指１</td>
<td align="center">右腕</td>
<td align="center">右薬指２</td>
<td align="center">左ひざD</td>
</tr>
<tr>
<td align="center">頭</td>
<td align="center">左親指２</td>
<td align="center">右腕捩</td>
<td align="center">右薬指３</td>
<td align="center">左足首D</td>
</tr>
<tr>
<td align="center">両目</td>
<td align="center">左親指先</td>
<td align="center">右腕捩1</td>
<td align="center">右薬指先</td>
<td align="center">左足先EX</td>
</tr>
<tr>
<td align="center">左目</td>
<td align="center">左小指１</td>
<td align="center">右腕捩2</td>
<td align="center">右中指１</td>
<td align="center">右足D</td>
</tr>
<tr>
<td align="center">右目</td>
<td align="center">左小指２</td>
<td align="center">右腕捩3</td>
<td align="center">右中指２</td>
<td align="center">右ひざD</td>
</tr>
<tr>
<td align="center">左肩P</td>
<td align="center">左小指３</td>
<td align="center">右ひじ</td>
<td align="center">右中指３</td>
<td align="center">右足首D</td>
</tr>
<tr>
<td align="center">左肩</td>
<td align="center">左小指先</td>
<td align="center">右手捩</td>
<td align="center">右中指先</td>
<td align="center">右足先EX</td>
</tr>
<tr>
<td align="center">左肩C</td>
<td align="center">左薬指１</td>
<td align="center">右手捩1</td>
<td align="center">右人指１</td>
<td align="center"></td>
</tr>
</tbody></table>
<p>&emsp;&emsp;其中，下图这些是次标准骨。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/07/24/9thozZbvLNEgq57.png"
                      alt="image.png"
                ></p>
<p>&emsp;&emsp;其中模型的父子级关系（或称亲子关系）是尤为重要的，亲骨可以掌管子骨，比如上半身骨可以掌管整个上半身，而首作为上半身的子骨，可以对整个脖子和头做控制，诸如此类的。下面这张图之间的关系就是骨骼间的亲子关系。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/07/25/WlwQNzRJYx5aVod.png"
                      alt="drawio _2_.png"
                ></p>
<hr>
<h2 id="详细介绍"><a href="#详细介绍" class="headerlink" title="详细介绍"></a>详细介绍</h2><p>&emsp;&emsp;我会分大类讲，左右都有的骨骼我会直接合起来讲。</p>
<h3 id="操作中心"><a href="#操作中心" class="headerlink" title="操作中心"></a>操作中心</h3><p>&emsp;&emsp;这个骨骼在很多模型中都有，但是没什么用，不参与模型的移动旋转等操作。</p>
<h3 id="全ての親"><a href="#全ての親" class="headerlink" title="全ての親"></a>全ての親</h3><p>&emsp;&emsp;这个骨骼是所有骨骼的父骨骼，所有骨骼都继承自它，他可以使整个模型移动，旋转。但是需要注意的是，全ての親和操作中心基本都处在X，Y,Z都是0，即（0,0,0）的位置，两个骨骼重合，有的萌新点到了操作中心就会误以为是全ての親，四处询问为什么移动不了。所以一定得看自己是点到了哪个骨骼。</p>
<h3 id="センター与グルーブ"><a href="#センター与グルーブ" class="headerlink" title="センター与グルーブ"></a>センター与グルーブ</h3><p>&emsp;&emsp;一般并称为重心骨，控制模型重心移动。在不同的动作中位置要求不一样，不过普遍是在两腿之间，低于左右足D，高于左右右ひざ。两者的亲子关系一般是センター为グルーブ亲骨</p>
<h3 id="腰"><a href="#腰" class="headerlink" title="腰"></a>腰</h3><p>&emsp;&emsp;这个骨骼是一个特殊的存在，一般来讲不分配权重，模型腰部的权重一般会分配在下半身和上半身上，但是上下半身的亲骨一般都在这个骨骼上。</p>
<h3 id="上半身-上半身2"><a href="#上半身-上半身2" class="headerlink" title="上半身&#x2F;上半身2"></a>上半身&#x2F;上半身2</h3><p>&emsp;&emsp;负责掌控上半身的旋转，位置上是上半身骨与下半身相重合，否则会有过度扭曲的情况，除非权重刷的很好。然后上半身2乃至上半身3456，都是对于上半身的进一步细分。</p>
<h3 id="首"><a href="#首" class="headerlink" title="首"></a>首</h3><p>&emsp;&emsp;掌管脖子和头的旋转</p>
<h3 id="頭"><a href="#頭" class="headerlink" title="頭"></a>頭</h3><p>&emsp;&emsp;掌管整个头部</p>
<h3 id="両目"><a href="#両目" class="headerlink" title="両目"></a>両目</h3><p>&emsp;&emsp;同时掌管左右眼的旋转等</p>
<h3 id="左-右目"><a href="#左-右目" class="headerlink" title="左&#x2F;右目"></a>左&#x2F;右目</h3><p>&emsp;&emsp;单独掌控左右眼珠子</p>
<h3 id="左-右肩"><a href="#左-右肩" class="headerlink" title="左&#x2F;右肩"></a>左&#x2F;右肩</h3><p>&emsp;&emsp;就是，，肩膀</p>
<h3 id="右-左肩P"><a href="#右-左肩P" class="headerlink" title="右&#x2F;左肩P"></a>右&#x2F;左肩P</h3><p>&emsp;&emsp;抖肩之类用，可以只动肩膀而手臂保持不变，需要肩c的配合</p>
<h3 id="右-左肩C"><a href="#右-左肩C" class="headerlink" title="右&#x2F;左肩C"></a>右&#x2F;左肩C</h3><p>&emsp;&emsp;抖肩之类用，付与亲为肩p，但是付与率是-1，用来协助在使用肩p耸肩后，手臂骨仍然保持原有的角度。</p>
<h3 id="左-右腕"><a href="#左-右腕" class="headerlink" title="左&#x2F;右腕"></a>左&#x2F;右腕</h3><p>&emsp;&emsp;左右胳膊，大臂</p>
<h3 id="左-右腕捩"><a href="#左-右腕捩" class="headerlink" title="左&#x2F;右腕捩"></a>左&#x2F;右腕捩</h3><p>&emsp;&emsp;这个骨骼控制手大臂绕臂旋转，需要设置local轴（一般插件生成的自己就带local轴了）。若遇到转向错误，可尝试手动调整子骨指向，并在view窗口中为骨骼手动分配local轴。另一种方法是将捩骨上的权重逐渐转移至相应的骨骼，随后删除捩骨，并使用插件重新添加。完成后，务必将权重类型转为SDEF以避免过度扭曲。若骨骼带有序号1&#x2F;2&#x2F;3，则表示其为捩骨的方向分解，比如指向XYZ分解。</p>
<h3 id="左-右ひじ"><a href="#左-右ひじ" class="headerlink" title="左&#x2F;右ひじ"></a>左&#x2F;右ひじ</h3><p>&emsp;&emsp;控制小臂的</p>
<h3 id="左-右手捩"><a href="#左-右手捩" class="headerlink" title="左&#x2F;右手捩"></a>左&#x2F;右手捩</h3><p>&emsp;&emsp;是小臂的，具体效果与左&#x2F;右腕捩大致相同</p>
<h3 id="左-右手首"><a href="#左-右手首" class="headerlink" title="左&#x2F;右手首"></a>左&#x2F;右手首</h3><p>&emsp;&emsp;控制手掌的骨骼</p>
<h3 id="左-右ダミー"><a href="#左-右ダミー" class="headerlink" title="左&#x2F;右ダミー"></a>左&#x2F;右ダミー</h3><p>&emsp;&emsp;左右手持骨，一般会把扇子，手杖之类的东西绑在这个骨骼上</p>
<h3 id="左-右親指"><a href="#左-右親指" class="headerlink" title="左&#x2F;右親指"></a>左&#x2F;右親指</h3><p>&emsp;&emsp;大拇指，至于后面的0123都是指关节，数字越大，离手掌越远</p>
<h3 id="左-右小指"><a href="#左-右小指" class="headerlink" title="左&#x2F;右小指"></a>左&#x2F;右小指</h3><p>&emsp;&emsp;小拇指，至于后面的0123都是指关节，数字越大，离手掌越远</p>
<h3 id="左-右薬指"><a href="#左-右薬指" class="headerlink" title="左&#x2F;右薬指"></a>左&#x2F;右薬指</h3><p>&emsp;&emsp;无名指，至于后面的0123都是指关节，数字越大，离手掌越远</p>
<h3 id="左-右中指"><a href="#左-右中指" class="headerlink" title="左&#x2F;右中指"></a>左&#x2F;右中指</h3><p>&emsp;&emsp;中指，至于后面的0123都是指关节，数字越大，离手掌越远</p>
<h3 id="左-右人指"><a href="#左-右人指" class="headerlink" title="左&#x2F;右人指"></a>左&#x2F;右人指</h3><p>&emsp;&emsp;食指，至于后面的0123都是指关节，数字越大，离手掌越远</p>
<h3 id="下半身"><a href="#下半身" class="headerlink" title="下半身"></a>下半身</h3><p>&emsp;&emsp;控制整个下半身的骨骼，位置上是上半身骨与下半身相重合，否则会有过度扭曲的情况，除非权重刷的很好。</p>
<h3 id="腰キャンセル左-右"><a href="#腰キャンセル左-右" class="headerlink" title="腰キャンセル左&#x2F;右"></a>腰キャンセル左&#x2F;右</h3><p>&emsp;&emsp;用于保持脚部位置不变的时候调整膝盖膝盖朝向用</p>
<h3 id="左-右足"><a href="#左-右足" class="headerlink" title="左&#x2F;右足"></a>左&#x2F;右足</h3><p>&emsp;&emsp;大腿的骨骼</p>
<h3 id="左-右ひざ"><a href="#左-右ひざ" class="headerlink" title="左&#x2F;右ひざ"></a>左&#x2F;右ひざ</h3><p>&emsp;&emsp;膝盖，小腿</p>
<h3 id="左-右足首"><a href="#左-右足首" class="headerlink" title="左&#x2F;右足首"></a>左&#x2F;右足首</h3><p>&emsp;&emsp;脚掌</p>
<h3 id="左-右つま先"><a href="#左-右つま先" class="headerlink" title="左&#x2F;右つま先"></a>左&#x2F;右つま先</h3><p>&emsp;&emsp;脚尖</p>
<h3 id="左-右足D"><a href="#左-右足D" class="headerlink" title="左&#x2F;右足D"></a>左&#x2F;右足D</h3><p>&emsp;&emsp;和左&#x2F;右足大差不差，用于脱离足ik限制进行踹脚使用的骨，变形层级大于足和足IK</p>
<h3 id="左-右ひざD"><a href="#左-右ひざD" class="headerlink" title="左&#x2F;右ひざD"></a>左&#x2F;右ひざD</h3><p>&emsp;&emsp;和左&#x2F;右ひざD大差不差，用于脱离足ik限制进行踹脚使用的骨，变形层级大于足和足IK</p>
<h3 id="左-右足首D"><a href="#左-右足首D" class="headerlink" title="左&#x2F;右足首D"></a>左&#x2F;右足首D</h3><p>&emsp;&emsp;和左&#x2F;右足首大差不差，用于脱离足ik限制进行踹脚使用的骨，变形层级大于足和足IK</p>
<h3 id="左-右足先EX"><a href="#左-右足先EX" class="headerlink" title="左&#x2F;右足先EX"></a>左&#x2F;右足先EX</h3><p>&emsp;&emsp;对于前脚掌，x轴应精确对齐至脚掌所指向的骨骼（即骨骼看起来位于足首骨与脚尖骨连接的直线上）。使用次标准骨骼进行追加时，若存在ex骨，则不会追加d骨。因此，通常这个EX骨是通过插件自动追加，而非手动创建。然而，追加后的前脚掌权重可能出现问题，建议重新调整权重以确保准确性。</p>
<h3 id="右-左足IK"><a href="#右-左足IK" class="headerlink" title="右&#x2F;左足ＩＫ"></a>右&#x2F;左足ＩＫ</h3><p>&emsp;&emsp;影响腿部的骨骼结构包括足和ひざ，其位置定位于足首。在没有使用插件追加骨骼前，其亲骨骼是-1，而追加之后，则变为足IK親骨骼。其变形层级为1，这个层级比腿部的其他骨骼的变形层级要大。相关位置定位在足首骨上，其中target是足首骨，Loop是40，单位角114.5916。在整个IK链中，包含了足骨和膝骨。为了确保骨骼的运动趋势符合人体自然运动，IK骨需要指向本身骨骼的正后方，并需要给足骨加上角度限制，即-180和-0.5。</p>
<h3 id="右-左つま先IK"><a href="#右-左つま先IK" class="headerlink" title="右&#x2F;左つま先ＩＫ"></a>右&#x2F;左つま先ＩＫ</h3><p>&emsp;&emsp;影响脚掌的骨骼，包含足首，位置在脚尖，亲骨是足IK，变形层级为1（比腿部的骨骼变形层级大）。（亲骨是足IK，位置在脚尖骨上，target是脚尖，loop3，单位角229.1831，IK链中包含足首骨，IK骨需要指向本身骨骼的正下方） </p>
<h3 id="关于IK"><a href="#关于IK" class="headerlink" title="关于IK"></a>关于IK</h3><p>&emsp;&emsp;IK骨的loop 单位角 角度限制参数不固定，可以自己根据模型本身进行修改</p>
<h3 id="右-左足IK親"><a href="#右-左足IK親" class="headerlink" title="右&#x2F;左足IK親"></a>右&#x2F;左足IK親</h3><p>&emsp;&emsp;一般在左&#x2F;右足首骨下面，一个单纯的移动骨骼，亲骨是全亲骨，作为足IK的亲骨骼</p>
<h3 id="先"><a href="#先" class="headerlink" title="~先"></a>~先</h3><p>&emsp;&emsp;一般作为指向骨用，比如我的A骨骼为了方便，就可以设置一个A先作为定位指向。</p>
]]></content>
      <categories>
        <category>MMD扫盲系列</category>
      </categories>
      <tags>
        <tag>MMD扫盲系列</tag>
      </tags>
  </entry>
  <entry>
    <title>游戏数据解析日志01-HOYOStudio的使用方法</title>
    <url>/posts/6073dae3/</url>
    <content><![CDATA[<h2 id="原项目地址："><a href="#原项目地址：" class="headerlink" title="原项目地址："></a>原项目地址：</h2><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/TomyJan/HoYoStudio/releases/tag/v0.17.00</span><br></pre></td></tr></table></figure></div>
<p>&emsp;&emsp;事先声明:（本文使用AI翻译）HoYoStudio是一个开源项目，旨在对米哈游（Mihoyo）的游戏文件进行分析和修改。它可以用于分析、提取和修改Mihoyo游戏中的资源，如角色模型、动画、音效和场景等。HoYoStudio支持Mihoyo的多款游戏，如《原神》（Genshin Impact）、《崩坏3》（Honkai Impact 3rd）、《崩坏：星穹铁道》（Honkai: Star Rail）和《未定事件簿》（Tears of Themis）。</p>
<hr>
<h2 id="HoYoStudio功能："><a href="#HoYoStudio功能：" class="headerlink" title="HoYoStudio功能："></a>HoYoStudio功能：</h2><p>&emsp;&emsp;1. 更改所选游戏：使用“选项（Option）-&gt;指定游戏（Specify Game）”。<br>&emsp;&emsp;Change selected Game by using “Option -&gt; Specify Game”.<br>&emsp;&emsp;2. 集成Radioegor146的仓库以通过“选项-&gt;指定AI版本”加载asset_index。<br>&emsp;&emsp;Integration with “Radioegor146” repo to load asset_index through “Options -&gt; Specify AI version”.<br><br>&emsp;&emsp;3. 支持导出可编辑资产（并非所有资产），支持XOR&#x2F;JSON格式的MiHoYoBinData。<br>&emsp;&emsp;Exportable Assets (not all of them) with XOR&#x2F;JSON support for “MiHoYoBinData”<br>&emsp;&emsp;4. 可选调试控制台。<br>&emsp;&emsp;Togglable debug console.<br>&emsp;&emsp;5. 容器&#x2F;文件名恢复。<br>&emsp;&emsp;Container&#x2F;filename recovery for Assets<br>&emsp;&emsp;6. 构建资产地图，即游戏文件内的资产列表。<br>&emsp;&emsp;Build AssetMap, An asset list of assets inside game files.<br>&emsp;&emsp;7. 通过命令行界面（CLI）构建CABMap&#x2F;资产地图（支持Unity类型和正则表达式过滤器）。<br>&emsp;&emsp;Build CABMap&#x2F;AssetMap through CLI (with supported <code>Unity Type</code> and <code>Regex</code> filters).<br>&emsp;&emsp;8. 通过命令行界面导出资产（支持Unity类型和正则表达式过滤器以及分组）。<br>&emsp;&emsp;Export assets through CLI (with supported <code>Unity Type</code> and <code>Regex</code> filters and grouping).</p>
<hr>
<h2 id="如何使用HoYoStudio："><a href="#如何使用HoYoStudio：" class="headerlink" title="如何使用HoYoStudio："></a>如何使用HoYoStudio：</h2><p>&emsp;&emsp;1. 构建CABMap（杂项-&gt;构建CABMap）。<br>&emsp;&emsp;Build CABMap (Misc. -&gt; Build CABMap).<br>&emsp;&emsp;2. 加载文件。<br>&emsp;&emsp;Load files.<br>&emsp;&emsp;命令行版本（Description）：<br>&emsp;&emsp;用法（Usage）：AssetStudioCLI &lt;输入路径&gt; &lt;输出路径&gt; [选项]<br>&emsp;&emsp;AssetStudioCLI <input_path> <output_path> [options]<br>&emsp;&emsp;参数（Arguments）：<br>&emsp;&emsp;&lt;输入路径&gt;：输入文件&#x2F;文件夹。<br>&emsp;&emsp;<input_path> Input file&#x2F;folder.<br>&emsp;&emsp;&lt;输出路径&gt;：输出文件夹。<br>&emsp;&emsp;<output_path> Output folder.<br>&emsp;&emsp;选项（Options）：<br>&emsp;&emsp;–silent：隐藏日志消息。<br>&emsp;&emsp;silent   Hide log messages.<br>&emsp;&emsp;–type ：指定Unity类类型。<br>&emsp;&emsp;type &lt;Texture2D|Sprite|etc..&gt;  <br>&emsp;&emsp;Specify unity class type(s)<br>&emsp;&emsp;–filter ：指定正则过滤器。<br>&emsp;&emsp;filter <filter> Specify regex filter(s).<br>&emsp;&emsp;–game （必需）：指定游戏。<br>&emsp;&emsp;game &lt;BH3|GI|SR|TOT&gt; (REQUIRED)<br>&emsp;&emsp;Specify Game.<br>&emsp;&emsp;–map_op ：指定要构建的地图。[默认：无]<br>&emsp;&emsp;map_op &lt;AssetMap|Both|CABMap|None&gt;<br>&emsp;&emsp;Specify which map to build. [default: None]<br>&emsp;&emsp;–map_type ：资产地图输出类型。[默认：XML]<br>&emsp;&emsp;map_type &lt;JSON|XML&gt;<br>&emsp;&emsp;AssetMap output type. [default: XML]<br>&emsp;&emsp;–map_name ：指定资产地图文件名。<br>&emsp;&emsp;map_name <map_name><br>&emsp;&emsp;Specify AssetMap file name.<br>&emsp;&emsp;–group_assets_type ：指定导出的资产分组方式。[默认：0]<br>&emsp;&emsp;group_assets_type &lt;ByContainer|BySource|ByType|None&gt; <br>&emsp;&emsp;Specify how exported assets should be grouped. [default: 0]<br>&emsp;&emsp;–no_asset_bundle：从资产地图&#x2F;导出中排除AssetBundle。<br>&emsp;&emsp;no_asset_bundle<br>&emsp;&emsp;Exclude AssetBundle from AssetMap&#x2F;Export.<br>&emsp;&emsp;–no_index_object：从资产地图&#x2F;导出中排除IndexObject&#x2F;MiHoYoBinData。<br>&emsp;&emsp;no_index_object<br>&emsp;&emsp;Exclude IndexObject&#x2F;MiHoYoBinData from AssetMap&#x2F;Export.<br>&emsp;&emsp;–xor_key ：解密MiHoYoBinData的XOR密钥。<br>&emsp;&emsp;xor_key <xor_key><br>&emsp;&emsp;XOR key to decrypt MiHoYoBinData.<br>&emsp;&emsp;–ai_file ：指定asset_index json文件路径（以恢复GI容器）。<br>&emsp;&emsp;ai_file <ai_file><br>&emsp;&emsp;Specify asset_index json file path (to recover GI containers).<br>&emsp;&emsp;–version：显示版本信息<br>&emsp;&emsp;version<br>&emsp;&emsp;Show version information<br>&emsp;&emsp;此处有一段未翻译到<br>&emsp;&emsp;?, -h, –help<br>&emsp;&emsp;Show help and usage information</p>
<hr>
<h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><p>&emsp;&emsp;1. 如遇到任何“MeshRenderer&#x2F;SkinnedMeshRenderer”错误，请在加载资产之前启用“禁用渲染器”选项。<br>&emsp;&emsp;in case of any “MeshRenderer&#x2F;SkinnedMeshRenderer” errors, make sure to enable “Disable Renderer” option in “Export Options” before loading assets.<br>&emsp;&emsp;2. 如需在不获取所有动画的情况下导出模型&#x2F;动画控制器，请启用“忽略控制器动画”选项。in case of need to export models&#x2F;animators without fetching all animations, make sure to enable “Ignore Controller Anim” option in “Options -&gt; Export Options” before loading assets.</p>
<hr>
<h2 id="致谢："><a href="#致谢：" class="headerlink" title="致谢："></a>致谢：</h2><p>&emsp;&emsp;Perfare：原始作者。<br>&emsp;&emsp;Khang06：genshinblkstuff，用于blk&#x2F;mhy0提取。<br>&emsp;&emsp;Radioegor146：gi-asset-indexes，用于恢复&#x2F;更新的asset_index。<br>&emsp;&emsp;Ds5678：AssetRipper[discord #mihoyo频道]，提供了关于资产格式和解析的信息。<br>&emsp;&emsp;mafaca：uTinyRipper，用于YAML和AnimationClipConverter。<br>&emsp;&emsp;作者：看到丹恒就立 <a class="link"   href="https://www.bilibili.com/read/cv34301894" >https://www.bilibili.com/read/cv34301894<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
]]></content>
      <categories>
        <category>数据提取系列</category>
      </categories>
      <tags>
        <tag>解包</tag>
      </tags>
  </entry>
  <entry>
    <title>PJSK-MIKU 动作配布</title>
    <url>/posts/10590/</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="3481a1289775daa0bcc71713a3a9889a7a2f6ad3c416c59c73e9c17f4484adc7">993ad1aca5bcc930152cd8f9f9a394ec176feafdc2d14130c4018f71077dc07a9cb2cb4ceeba1bfe2fcb9b359bcf32173f2194679a145a403f3c2248229b9b93b0a3677ddb1373972ef3b43d63106b3fd39981540dae7bb127bb567230d8ab4d4a7343209138e094bc03bca877d4655ff36837031feb0d282b70a928f83d01ddb35d2940c196ab51ea8566e635dd7a0232d374d90104baecc247b7e765a0280fcb79b600d54ac1e00e195b1bfbd9599eee4045054405f3b0d045a09c775aa909c47f44a9090fe6d7d1a3a3d951ffa92d7df9ca4c397f254fd14f62d3708f0a1a35e507f70b24b6fdd706fd764da79d27d38f9952ac0d2979150ec0f9933e3d96b6c5240c7cdba7a1f2d842266378ef8a0ee29ebd07ee9460ab65a4208037188ac85d4eedfae88b3e58ceccbb855d783f6d0a29b29135ed29b36283c6827318ad4a722882ab295ff6cec932807ade1b0db89f5dcde18ff10a5a876fcbff87b77bf43ab5e3b2544a4347f464cadeceb24d9c3002577dc2128665d4b8c7ab3c760d10036f7a9565c68bf60c00df20a33a8399cafbceeadf74e2a256bcfb26bd7dccca7816d2f5e3505bed2b08703ae245ad5be190b1ba4b067693ef5cbdbc71eb6f5c7370a11b9b721e9771d63e3400ab3c33e415105ee4b3312346bc93a0e00723c62a9000a912b3e357199252c7acf3186622909190b2c97de6ec435cb4b4072f66011d3d4d6e684828c64b7507b8dc89e32aed833a8599e1ee43ef41f43685b33d2c94a69f737c96818026960423651524836cd6e465ff472332c68d30f08019ec30995d93332ccaf3b06923306d524dbfbaad1e46197c1ffa84b209ae1d6f634ee65dded5b56234b8f3df76f4d8176bc36136acc7404d3cb66a010e8aa69cc435b01211900328db7a19cd8af118a96e290736ae79bb0a7d6dd7e6b22622efb503522762082f787d9358bf6f1f14745599d34ff2ad228403ed8e504e6257b119652a1bf337d8c748ba0e5854a4ddb5aabc3ed8ebf4c9ff4625f9d42ba166f823f8d1e3ee335cf75a06c95c3043eae62a5146d8f012929f7b5e3c55c72a4ac3e42eddef332d78becbaa04a18a51ee332ad5fb5d128b85cf2a79fc74684a8f1662224f75cb6e11ecb457582e11b528b40a5984ef2c4c7b036c863df1aa744ae6b0a28cf5d6675d9734ff6b2664fecd11847a999c7af3a0feadf04655cca7853de8cfcb972f15022ba8488a33e6cca4f2abdca9a77501f1426ad01a32559761e0f2982ac7e378e1baafc177eebdb2c461360d1c2572c37f70dc37076e8f05e075adbe60139f1249a468ba98cbe8db19dec0afd9cf122c918250009aa6ed6b69677ff7f1676d985763874295c7d612840aa9a39375faeed5a350d58dcf8f1c6fac1cb8a021e80afa8869f60a93f9e3c6728c779e4a3070c36114d6756fae7b50f16f00f439c6684ec2fb7ef4b41c3be11f25a6a7a35d7390d06e97f51746e57c55a95a693d0669ec9a3dbedf00ab9365164ca5fcfe9a5db20f9df83019944056712833c10f36a7c3500940c8fbb8b07e01f0dcbbec29158b755ed96abc88cb8eb5cc44b3ada788b45d7c9afb3e4842451ded5cf44e9e55f8117d0fdbeab9d3687124a96723a1d527d78d0cdfda45e3a5b35a342a3dd5504f0c8a38f6e881169333586694b287f365313100ce335272e73086fbb439f7cbf15e2ec8a02563e05e96e66bf1e64354648a2e8f636c689dcee39945cf09d52d3cf29542d346f18df5e678e3da93eddf3bfb7815046dc7db7df60e16388e51421bca0e0cb7354bd31b277a3d1aa44f0b1c5062b0233a4ec730b498b9c0588f7086cca82e0c7a9c1ba7e966eb1265a69d351a57f3429c9ed5873eae07c44fb942ee3e6298404c3a5c237465d843afd534455b16879b7feb47ff2d70504d8bec86dcd76643d7d270ed122ad508945e594672ce83272a6d30619fae2f6231e0c3414760a0c1f7f3944e9b11a023f6186086944206d84ded4e5ebfae70aeb63c4cc3524b82c30d9f51e5260ca435adb05d09373712d8e7f53e26e6d544d04d14a569dedbfbb2f59273b0cbfe052207c1f94173900d1786012effe18540431998fb84ba29ea8c07255be9ed0d3caffe7213979fc31ce7d9945a73e8e719356de2b0cd78c6f3cf56e8e478a9bfab247c5aa1c52c5ae6fd9f4826156706625878b5916e5f2a0ee2cd17c6146aa202c8d455feea9d7b50a1cd4745ff4ed37940872f4d0be5594c2cc48b5bee7c2db86edf5bdd8eec1a6b935f72335eeb5c52e37ae6657912379539c36369a113f0e1001cedf107ae83e9c8f47eb8e552577de2082ecb9921e6ebff1930847618959b50952069b0ccedc06d4e3f53408c52caf0f58585ca3aade409bcedac744059c1dd1cc44693369ed11f67ab496abbf6eb113f8ff922397568e8716ae09854137b2f083aa4ae3a508ac267f8e06e68d73343e7a5a5fc629a64d99ab04cd5b3a18e7ebf6d3945a268b9c93b8444dbde2dd7d6cb7697a56262c46f0abcec9ecb314135403d6d32da521f49b01815625d71ef216a228acdff9077a46c1ebae05e97e2e1785b1c1ef670f44686a3f1f5351b356739896b49208bd8b1c1c5160e64230721e3c145c49a038f74a0338686171206fc12e8a753ab6388c592ef0bc3ba61d31cd0b7c51153ff5d378ac06e53d74778506488731e3b16b48f593635afdccf0d46a913ead0d82d70167df9e8861f1be632196856831ea3ab2fa63b9f56f78fcad04cce211c62211e670c3bcf75ee0e280648a3744e19f76b69dad38d28c1010a3f3644d619192ac6a8b7fa7da57fbbb594a23cd5e0b8acfe9eb315aebb749eb6d570e5267367291fd14bb77f5e5ad6615d48bb2842b1fe92d67a05609b81523feb71297af4d7bb747eb1224a7265b3e83c0713cc294b98f3abaa2e929a1f4591</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<link href="/css/hbe.style.css" rel="stylesheet" type="text/css"><script data-swup-reload-script type="module" src="/js/plugins/hbe.js"></script>
<script data-swup-reload-script type="module">
import {initHBE} from "/js/plugins/hbe.js";
  console.log("hexo-blog-encrypt: loaded.");
    initHBE();
</script>
]]></content>
      <categories>
        <category>MMD</category>
        <category>Motion DL</category>
      </categories>
      <tags>
        <tag>Motion DL</tag>
        <tag>PJSK</tag>
      </tags>
  </entry>
  <entry>
    <title>PJSK-アイディスマイル 动作配布</title>
    <url>/posts/2699655f/</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="fefc5183a0091ed6cb262737ee8ccccbb286f88dac3c801ce3703deb7563d910">c211e665b909cba35ed6629fb3c5963322dc2ea087bad7b690b97de46b98bbaff2dc734fb72406363481b587196574419d6747b2e49330827611ebd8660de86500ce2c64e4e5aa2353e0f3ac85a2b90fe5af0a682db6dab05c0c4436f6e8d3a997c0dd7e509063bb955d786bfd3fdc10ebcd26d2062e15f8392c5e69d1715e6fbf15a3d3098ad14491e3f5b4f3bb86357eaa1581dda5bfcd169c384c484423ecc2344e6ff0bcf85359794b8df23dd10e0da850eafafb9d6f7996213f1a9d635fce0638338a64efcc68c55488b5193519698694eace1c2af88fec3455ec9383b05f0c7a5d99a5abbe2d159ce3af1e068b305883faf2904984a05edd6effc9c401ae89b13ac4d6154a555eff7b336ce82a51e0079a70946e2d5a99eab9539aae128ac973c9b58305222bdd028aff5e61a2f6f3fd45d9ca7c830fe99e7c0e2bf61d98f216aba5f9efc6b879d85d94d8b32a86b1d528e2c17b7af7b584535b00effdf21410ae45e9dca6b447481db147e5db6ac02289050a1e7ced7462a4ae279ae69a29757b3f2e0ea6cbb03e76b44a0371b110d731854b5ef8f7b47a55f8d20c2a0c6b6f331286b81344990eaef498781f05f956107a8fdb385472d19aa38409440dcac2c273b4702c9f1e22b96cb49e5f2a57a051543600276728d82810a77ec31b5f3b157b9afebae77f861e052763ccb3e0639882eb1f0feb6ad3f0d3601784a07fb8c06da0e6c7852f9786dea1b549e5bfab754bbb271794f82ba3c75c09b9afd9bdfe821bcdd4d019c61e1b49264719f915ceac98cb592fd0d0ba772390eb62816768117b60804d7e72493393849129f58ac30bef542bb3c9490d47e05a81a7bfbb9610690c79c69a04a55b023e943505b6e787644ad332cc12ca2f4b330d9aa971b1495039cd3412a5c8580240148881d3a024fc6940433469445ac61673581722df2a2de672ec8634a3f432bfc36dbe30647d535c59fb6a8360e40dd8fc840a2000f9f7718d69cb71950460755a13f67439bcc7203d384fdd2d92ede62fdba2b226256ca92f01f3bb19f3afa144c5996a91e9feafe77d310cc6ee91280be8a35edaf6469dd8fb59dda24acf959f9e6dede7ed6210ef6128f1cf566d11e305fa773c7703d5969b3fac72b46632dcbd3d61783cb3efd37469e9d0ee4e533c499a162b7a7125f5ee0486f828efbdee4f487cc746d51623b17acbc52561520ebdddc2f2a6913e058fc5678067d1c8cf825932d04b189ea588b8ccfd7bac452ba74a5a0085c1a1e22592d5ce7a4c68ea33f2591bb74896f02ce084e7d61595bc9d56a2baa8451694a8f71c28521c80800f9a8bb905ec2f08cd9dfef02df6312372c07fe9f4eee65830bad222d70ddfa1d9eb5055448d73e2d3861d29aa6d1b3ba393e26a1080df45b8b642094d9dbfbeaeaaaee04a4cb32e951d34e1f3e5c6931705b1cf203bada5e83194b1e97476421bd2e8aa671aacd262a0e869f5ce06c8df80c460e1c66e71b51b12cefc6e194776986361b980b83bdf9d9348f77895314c013cb6ba935e8e238cd14e25923b7bc0f66dac5a467919b4eb753eeccb84f620e24f44a846d90342b9b36817c3db29d4acd2843b8434d4577221754e86264c63c9c1130d268c64fc79dd9fe6ea26822ce376d0cb7acba873db197ec9731b2d0c15b910dc5c1a9a3d061e5497b7b2484259d4bbb9233f384571a6fd4030cb02890e967391692062900ee5ca7bf183a8be6ceb1ab4345b2459198e31d471795e0590ae6c1f0ea7df20fb3880af241ae00fc23c6bda91420ed802f2bd46c98f89beb6d2e0ffa037652d55e7bb9b719234fa5e4060fd35e43a73ebd4e11c2ae445199cfe62c1b14da86be65337a7259f3b2ca7bf8922f5dc61300b33d50eec93e7a1277f38a3e5035b20b60bd64a02f95f0784cb28c1b0464921ab2f1621301073e95a9f52a6cd38fc4281e9e1e1123121bc16d87fc4d3c85bb756341472cabcb46b3e38b0e373a81ba0a769e77dee97b4e3b2f11c314fe34f43514133962084f54bc1a7d8f3ba05536bd762e7077f0b81398a83e81347340b075d59998e53cee905fe6f77daa117cf23da1adc0585c47d02b58165434dda16bb761ed345c924ee53540148ce8f9ae59682240aec983528f764739f52a7e6fdc6e46dbf862fb767c277496a7ab95a189d0c18b7a40ce44b9ce0051f1f9dca809abff8c407bab198bb4503266d545968ecf07f52c3d787d5a958231507e66f1afeb4dcf202741ad22e3eb75154ee1ae8cf01bb0d3684f9be119b6057c90c383b0264ff88ef340020931a1c0a2454de1e95af20d8342cbebc33c90c28127f0287a9c7797024ed6110c77799bc2fca13e7651731eb63d7aacff8fd159ac2d656fa20cdd552d00df0092b320409cf39ef362b646f29d773c62517a606eecb523947413f26c26974956f5349fc71d48c2a12d40b67eb8692699e321912c51a81d52b2ba15fffb00f26d626e44f75d35afc72a4bc0d410eec76f5b37aac29ca8a9b574ab86db78e95229729068e221759a175ff3ea5104fc78d02bbef7f377ff07a37d171bde87b1d0a814c970d8a73438a5ed88bda7907de78e84f0085674f2e22a75cd322c248f656cc873e2d8461e365ace6756e7088672f8dd9732e07a2c1ae7d7a5ebc13bdd7c9d15f3328dc0bdf299b984f82ec6df7409458b027411d0c63a870a8eeb09f5bcd8dffc7acd07bdbc628ebc0c494a22ae27fe7e50f8d7543e424c8b1b1c616596714</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<link href="/css/hbe.style.css" rel="stylesheet" type="text/css"><script data-swup-reload-script type="module" src="/js/plugins/hbe.js"></script>
<script data-swup-reload-script type="module">
import {initHBE} from "/js/plugins/hbe.js";
  console.log("hexo-blog-encrypt: loaded.");
    initHBE();
</script>
]]></content>
      <categories>
        <category>MMD</category>
        <category>Motion DL</category>
      </categories>
      <tags>
        <tag>Motion DL</tag>
        <tag>PJSK</tag>
      </tags>
  </entry>
  <entry>
    <title>配布申请要求</title>
    <url>/posts/63037/</url>
    <content><![CDATA[<h2 id="通用要求-General-Requirements："><a href="#通用要求-General-Requirements：" class="headerlink" title="通用要求&#x2F;General Requirements："></a><em><strong>通用要求&#x2F;General Requirements：</strong></em></h2><p><em><strong>&emsp;&emsp;1.投稿过一个以及一个以上的mmd，blender,C4D,UE等3D动画作品（如果没有投稿过，请先与我私信）<br><br>&emsp;&emsp;2.黑名单别来<br><br>&emsp;&emsp;3.借物表完整，不全的别来<br><br>&emsp;&emsp;4.渲染要求不高<br><br>&emsp;&emsp;5.被拒绝后请自己找原因，被拒三次，拜拜！！！<br><br>&emsp;&emsp;6.二配自己心里清楚<br></strong></em></p>
<hr>
<h2 id="配布群要求-Distribution-Group-Requirements"><a href="#配布群要求-Distribution-Group-Requirements" class="headerlink" title="配布群要求&#x2F;Distribution Group Requirements"></a><em><strong>配布群要求&#x2F;Distribution Group Requirements</strong></em></h2><p><em><strong>&emsp;&emsp;1.群内配布物，退群后自动视为弃权，并且不能使用<br><br>&emsp;&emsp;2.被拒绝后请自己找原因，被拒三次，拜拜！！！<br><br>&emsp;&emsp;3.我没素质<br><br>&emsp;&emsp;4.入群请说明来意+UID<br><br>&emsp;&emsp;5.群聊记录严禁泄露<br><br>&emsp;&emsp;6.入群先看公告<br></strong></em></p>
<hr>
<h2 id="申请要求-Application-Requirements"><a href="#申请要求-Application-Requirements" class="headerlink" title="申请要求&#x2F;Application Requirements"></a><em><strong>申请要求&#x2F;Application Requirements</strong></em></h2><p>&emsp;&emsp;<em><strong>如果你是只想要我配布的动作或者模型，并不想加群。请先私信<a class="link"   href="https://space.bilibili.com/374412219" >我<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>，无论审核通过与否，我都会给你回复。如果过审，你可以在本博客下&emsp;Motion&ensp;DL&emsp;或者&emsp;Model&ensp;DL&emsp;的tag内找到该动作的加密配布页面，在页面内输入我提供给你的密码便可查看到网盘下载链接、（每个页面的密码都是不一样的，还请不要传播）</strong></em></p>
<hr>
<h3 id="终章"><a href="#终章" class="headerlink" title="终章"></a>终章</h3><p>&emsp;&emsp;请注意，所有的要求都是建立在 <em><strong>通用要求</strong></em> 之上的。动作申请以及配布群申请的要求都为&emsp; <em><strong>“&emsp;通用要求&emsp;+&emsp;配布群要求（申请要求）&emsp;”</strong></em> &emsp;，请严格遵守我的要求，如果涉及到没有说明的部分，默认为禁止，如有疑问，请向我私信提出，谢谢配合。</p>
]]></content>
      <categories>
        <category>MMD</category>
        <category>Requirements</category>
      </categories>
      <tags>
        <tag>Rules</tag>
      </tags>
  </entry>
  <entry>
    <title>MMD规约/MMD Rules</title>
    <url>/posts/49097/</url>
    <content><![CDATA[<h2 id="MMD模型规约-MMD-Model-Rules"><a href="#MMD模型规约-MMD-Model-Rules" class="headerlink" title="MMD模型规约&#x2F;MMD Model Rules"></a>MMD模型规约&#x2F;MMD Model Rules</h2><p><em><strong>&emsp;&emsp;此为ALp Studio的在线版ReadMe。如果和离线版有差异，一切以在线版本为准。</strong></em></p>
<hr>
<p>&emsp;&emsp;原模型作者RM位于根目录下README文件夹中<br><br>&emsp;&emsp;对于在使用本模型或其使用 过程中遇到的任何直接或间接的损害和后果，作者本人夜雨安歌以及安＆泠工作室概不负责。<br></p>
<h2 id="使用规则"><a href="#使用规则" class="headerlink" title="使用规则"></a>使用规则<br></h2><h3 id="允许："><a href="#允许：" class="headerlink" title="允许："></a>允许：<br></h3><p>&emsp;●修改颜色、spa、toon<br><br>&emsp;●修改、重制物理<br><br>&emsp;●修改、重制骨骼，权重<br><br>&emsp;●修改、重制、添加表情<br><br>&emsp;●重制UV<br><br>&emsp;●允许将格式转换为Blender等格式，但是不得在标题、tag、简介等处声称为MMD制作<br><br>&emsp;&emsp;（注：格式转换仅可用于图像或是视频制作）<br><br>&emsp;●允许在不违反禁止条例的情况下修改：脸型，五官，服装，发型，身体各部位尺寸<br><br>&emsp;●在不违反相关作者RM情况下，可以适当添加配件<br><br>&emsp;●向外传播压缩包密码<br><br><br></p>
<h3 id="不允许："><a href="#不允许：" class="headerlink" title="不允许："></a>不允许：<br></h3><p>&emsp;✦删除原部件后加入其它部件（比如删除原上衣后换成别的上衣，但是可以修改衣服版型）<br><br>&emsp;✦拆零件、贴图、spa、toon<br><br>&emsp;✦二配或再配布未修改的模型<br><br>&emsp;✦商业化<br><br>&emsp;✦不得用来贬低原作、模型以及动作来源<br><br>&emsp;✦用于R18、性暗示、腐向、绅士向作品<br><br>&emsp;✦在VRchat或任何游戏里用<br><br>&emsp;✦违反公共秩序与善良风俗、明智、健全的判断力的使用<br><br>&emsp;✦宗教、政治等用途<br><br>&emsp;✦包括他人与他国的中伤、鄙视等的使用<br><br>&emsp;✦给原作者、其他的相关者滋扰（或者说困扰）的使用<br><br>&emsp;✦欺骗这个模型文件的制作者的行为（例：伪称自己是这个模型的作者）<br><br>&emsp;✦禁止失衡修改特定身体部位的尺寸<br><br>&emsp;✦3D打印</p>
<hr>
<h2 id="MMD动作规约-MMD-Motion-Rules"><a href="#MMD动作规约-MMD-Motion-Rules" class="headerlink" title="MMD动作规约&#x2F;MMD Motion Rules"></a>MMD动作规约&#x2F;MMD Motion Rules</h2><p>&emsp;&emsp;<em><strong>欢迎各位使用动作数据<br>&emsp;&emsp;动作源于游戏&emsp;<a class="link"   href="https://pjsekai.sega.jp/" >《世界计划 彩色舞台 feat. 初音未来》<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>，故日语用户请谨慎使用。</strong></em></p>
<hr>
<h2 id="禁止类"><a href="#禁止类" class="headerlink" title="禁止类"></a><strong>禁止类</strong></h2><p>&emsp;1.禁止使用时，视频标题为【动作配布】<br>&emsp;2.禁止【黑名单】人员使用<br>&emsp;3.禁止关联AI使用<br>&emsp;4.禁止R18<br>&emsp;5.禁止商用</p>
<hr>
<h2 id="允许类"><a href="#允许类" class="headerlink" title="允许类"></a><strong>允许类</strong></h2><p>&emsp;1.允许轻度修改<br>&emsp;2.私下小范围配布时请向我说明<br></p>
<h3 id="emsp-emsp-在使用本动作时，请严格按照每个文件夹下的说明使用"><a href="#emsp-emsp-在使用本动作时，请严格按照每个文件夹下的说明使用" class="headerlink" title="&emsp;&emsp;在使用本动作时，请严格按照每个文件夹下的说明使用"></a>&emsp;&emsp;<em><strong>在使用本动作时，请严格按照每个文件夹下的说明使用</strong></em></h3><hr>
<h2 id="emsp-emsp-未说明的部分默认为禁止，如有疑问，请向我私信提出，使用愉快"><a href="#emsp-emsp-未说明的部分默认为禁止，如有疑问，请向我私信提出，使用愉快" class="headerlink" title="&emsp;&emsp;未说明的部分默认为禁止，如有疑问，请向我私信提出，使用愉快~~"></a>&emsp;&emsp;未说明的部分默认为禁止，如有疑问，请向我私信提出，使用愉快~~</h2>]]></content>
      <categories>
        <category>MMD</category>
        <category>Rules</category>
      </categories>
      <tags>
        <tag>Rules</tag>
      </tags>
  </entry>
  <entry>
    <title>Python学习日志01-安装与基础环境搭建</title>
    <url>/posts/e679f931/</url>
    <content><![CDATA[<h2 id="介绍Python"><a href="#介绍Python" class="headerlink" title="介绍Python"></a>介绍Python</h2><p>&emsp;&emsp;Python 是一种计算机程序设计语言，也是目前来说比较火的一种程序设计语言，我认为主要有以下几种原因：</p>
<ol>
<li>简单，是的，Python相较于C,JAVA等其它语言来说，是真的很简单，而且运行也不像其他语言需要经过一系列编译等操作后才能运行，做到了随用随调，有一个很好的交互体验。</li>
<li>可拓展性，Python目前含有大量的第三方库，这些第三方库可以很容易地将C、C++、JAVA等类型的代码作以转换等操作，并且第三方库还有很多的为类似于单片机等的嵌入式设备设计的库，使得Python在嵌入式设备上使用起来更加方便。</li>
<li>功能强大，Python既可以用来写一些简单的脚本，也可以为强大的人工智能做开发原型。</li>
</ol>
<p>&emsp;&emsp;介绍到此为止，接下来开始学习吧，这也是我学习Python的一个100天计划，我尽量每天都更新一篇，希望对大家有用。</p>
<hr>
<h2 id="安装Python"><a href="#安装Python" class="headerlink" title="安装Python"></a>安装Python</h2><p>&emsp;&emsp;python语言可以在任何平台上运行，所以我们要根据自己的平台来选择下载。我是Windows11，所以我们进入<a class="link"   href="https://www.python.org/" >python官网<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>，选择windows版本的安装包。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/11/23/FmJBhoCfODtHULj.png"
                      alt="image.png"
                ><br>&emsp;&emsp;然后选择自己喜欢的版本，因为我这边已经下载安装过3.12.7，之后的日志我也会以3.12.7作为主力版本。（我去抢了个电脑做演示）安装过程中可能有一定的UAC提示，全部选择是就好。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/11/23/1gcamd9Tk683sRE.png"
                      alt="image.png"
                ><br>&emsp;&emsp;打开安装包，先把下面两个全部勾选，第一个表示安装给本电脑的所有用户，第二个是把python加入环境变量，这样在命令行中就可以直接使用python了。然后再选择上面的第二个，表示自定义安装。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/11/23/vCo2hVDFISncXMe.png"
                      alt="_20241123145919.png"
                ><br>&emsp;&emsp;下图这些全选，都是必要的。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/11/23/1ZxObkPo8iSlQVu.png"
                      alt="_20241123150106.png"
                ><br>&emsp;&emsp;然后按我如图的选择，最下面的的是安装路径，因为我电脑只有C，所以就默认了。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/11/23/nmaYxsu3jwAkPro.png"
                      alt="_20241123150107.png"
                ><br>&emsp;&emsp;坐等进度条走完<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/11/23/skltchrKazqgB2J.png"
                      alt="_202411231501071.png"
                ><br>&emsp;&emsp;出现这样的，把红框里面的点一下，这个是取消路径最大长度限制，这样呢，你无论塞到哪里也能用<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/11/23/hinIQPRrKW9cEOq.png"
                      alt="_202411231501072.png"
                ><br>&emsp;&emsp;这样就算安装好了<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/11/23/48FG6fxVUMEvp5Y.png"
                      alt="_202411231501073.png"
                ><br>&emsp;&emsp;打开cmd命令行，输入 <code>python</code> ，如果出现版本号，说明安装成功。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/11/23/OqSXlRZm5tdrBQF.png"
                      alt="image.png"
                ></p>
<hr>
<h2 id="介绍VS-CODE"><a href="#介绍VS-CODE" class="headerlink" title="介绍VS CODE"></a>介绍VS CODE</h2><p>&emsp;&emsp;VSCode (Visual Studio Code) 是一款由微软开发的源代码编辑器，支持多种编程语言，包括但不限于 JavaScript、TypeScript、Python、C#、Java 等。它在开发者社区中非常受欢迎，主要因为其轻量级的设计、强大的功能以及丰富的插件生态系统。以下是 VSCode 的一些主要特点：</p>
<ul>
<li><strong>跨平台</strong>：VSCode 可以在 Windows、macOS 和 Linux 上运行。</li>
<li><strong>内置Git支持</strong>：直接从编辑器中管理版本控制。</li>
<li><strong>智能代码补全</strong>：通过 IntelliSense 提供上下文相关的代码建议。</li>
<li><strong>调试功能</strong>：支持多种语言的调试，可以直接在编辑器中设置断点、步进执行等。</li>
<li><strong>多语言支持</strong>：除了基本的语言支持外，还可以通过安装扩展来增强对特定语言的支持。</li>
<li><strong>用户界面自定义</strong>：允许用户根据自己的喜好定制界面布局和主题。</li>
<li><strong>集成终端</strong>：内置终端窗口，方便开发者直接在编辑器中执行命令。</li>
<li><strong>扩展市场</strong>：拥有庞大的扩展市场，可以轻松添加新功能或改进现有功能。</li>
<li><strong>代码片段</strong>：内置常用代码片段，提高编码效率。</li>
<li><strong>多光标编辑</strong>：支持同时编辑多个位置的内容。</li>
</ul>
<p>&emsp;&emsp;VSCode 适用于各种规模的项目，无论是小型个人项目还是大型企业级应用，都能提供高效且舒适的开发体验。对于使用 JavaScript、YAML 和 JSON 等语言的开发者来说，VSCode 提供了优秀的语法高亮、智能感知等功能，极大地提升了开发效率。我本人也是超喜欢用 VSCode ，他真的很全能，自从notpad++出事之后，我就全身心给VSCODE了。</p>
<hr>
<h2 id="安装VSCODE"><a href="#安装VSCODE" class="headerlink" title="安装VSCODE"></a>安装VSCODE</h2><p>&emsp;&emsp;打开<a class="link"   href="https://code.visualstudio.com/" >VSCODE官网<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>，选择 <code>DownLoad For Windows</code> 按钮，下载安装包。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/11/23/mp43S7W1uHyPYle.png"
                      alt="image.png"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/11/23/WQcK9GnLCHuN3Xr.png"
                      alt="image.png"
                ><br>&emsp;&emsp;下载完成后打开安装包，选择 <code>我同意此协议</code><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/11/23/fbHCeNrBdclEaJM.png"
                      alt="image.png"
                ><br>&emsp;&emsp;创建桌面快捷方式自己看要不要选，其他类全选，然后点下一步。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/11/23/TAgSqYuLMteQ5UV.png"
                      alt="image.png"
                ><br>&emsp;&emsp;点击安装<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/11/23/wjuHV6IBrEmFztC.png"
                      alt="image.png"
                ><br>&emsp;&emsp;等进度条ing….<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/11/23/aCbxdiUJm7FXDBw.png"
                      alt="image.png"
                ><br>&emsp;&emsp;安装完成，重启一下电脑<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/11/23/qCI1REfeVMZ2Brg.png"
                      alt="image.png"
                ><br>&emsp;&emsp;至此，安装全部完成，基础到此结束，进阶类配置在后续中慢慢学习。</p>
]]></content>
      <categories>
        <category>Python</category>
        <category>学习日志</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>PJSK-東京テディベア 动作配布</title>
    <url>/posts/39898289/</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="7a37f7fcfba19b8c078036de4a08798ad6898a53a3315eb4ed64cafeabd2e9a5">e7883f0c1f3e00c753c6cd3e7f0fcf5d0b44db06cd6e15054e06f4fd44ef6e6b3776e66efbf43f844f1e4c83753407e38dedecad02bb70df73576a0256cc470b5f05c765ba153f70dc59cd62e64289b182dcd6bfaf721d597a74b1115953fd1f00c3ef18e49a28b87f377519960272ce34fe63a559df475e46b5f0c5dc64ecb02279f17bf3496b9705639aa689bbc270904660a96872af92fb728bae67a6232377d3134e9b49e9f38ed53bc52b66ec8bca9c9da13525e293b6f5d4cae7216c09a8554a6014f8d53f3fb48385294c275fb365d4e8879ec37a4568ee7c039613a218290cd07521b148334e39ccd1428cbbaa0cccfece160ec010852e67fc602b456df7d6dad9ad97191def4439d042a4e472749c4176a4316be0b256a9a3ef082393b396f32f829cbf1ec192b185eb5a05e0503828ee62e4cded2cbfaf203c910790ae4ae5a9900f450a6ac06ef4d4a31eae5db205cda24fd3aa51c04c0cdc6c9f2a918c23f39b34c9f5a2aa84ff463d6543637de2be72a9ce6c411102832b875fd8d27c5a16e7fcc17af5f0e56fe51830e4af51660ab1c698cb1830afee5be02c157cfa2fde0397138c4bb437c0aec67bbc1759aa0141102a3a76c9e6c2aacc4d41754152a0f617a64682a7e60293fab370b8fb313df707bf49716b7279c9601045b87519117c3f34266f903e81842ca97c5437b94706cb722889f6e7d47904c146916f04de9d4ece184feb354002b4d51805ffc3da047856bf84298015c2e84f1a7cd26511316f18358de4d8a770b6eec602b3827102b355af4833f4774431bd1f77fca15203e1bbcbb04c719dfd13d2ed1cfe7ba317ff1d2e2ee93f1c0a64f19daef170b4b0cf84d67271333f8e010bbb41107305c466c43294d064f6ee48a52f4533ea37b50850c5ee356a0365316daec1bcfb2c0db1f5fa68b70e43f12cf34b333c2ff7f8defc9bc5fe0bad40aee47680e5ef7acb99d4bc4239135bd14389c969ac50558a9c36acc768c00514f70ecf9c0200934b74e9280e8bfa4512a05688880676f947f65ba7eca13b2606cf8b66139e1659e64f21f088fede9c6976829fdaaf4cca2b3d8825dcf7f0488441e9f497ffd3e8c124c510c57a6fd669f5d7eebd04bd7ef6fc2a9b572e5a8f6bf5377b736ab2aa89b756538f3d92623b45a2697b278d935be3dcd6cab55e0363bac108b7bf43f7ddcef2d3a803eff788d9109de19c3bc99410e777c9302f0be5b9b11f3e43a99b9ca82f207372a50fe13362dc96701845cdf290fd76c85c46ade8f75ac60a6a0790541893d894f76a8196290105b8d5577197aae24db3445f2e81ddb92d560623e38c3eb1a9465ada055237c03c4d16614948d6495227faa8211aae80f7df4bad0c723debef57fee5be76d2053b5f0e6c2bd0368fe2e0555f97b92e1560e6e6f8b2cae672c2f91e1fd2294f9d4abe9ddc1118b78134fe0719cc111a4846f56c7502164a3a9690455d3f5127183100990c967ec1a368d0010b2ec3b4fb5b079de39087ea0f1280f68d325edc524a68973a9bd8bc73a72a9a9f128d3ac07935896d23e7499a3c0971261fc20ef7f5fe05a4ccf57ac8f175fcb8ee66cf7825c1ae737bc5af987fc289ba156c6f01b9281a6e5052bbf095c81b333275244b2891f0bf437afa8d5da6dbe58eefc29d9ca782b730711697a16543effb509a6454cb9f562daa5a46961bc7f1133237aa7118b923ef940290ae421411b9faf53552a13898d9d0b50ce922d8e707d5a973f730a43949af8bca85898a54dea63af450736a7fad62af78f8436a1a65d947c2a31fffb682a2a5fff1ae73ba629e04bc5f45584f0a6cf4b0a95f098ce65b7cb95067e9fa23212b80647a33e8e21ac84884870f2fd16bbf3dc4c347db667c466223c2a388b62fda82540d67652d452f06622df020522553f880c4dd99a264b43e4934555a479ccdd55cc6e18a36931ce2bb6801728a352e2f445900776b9e14f677aeb47eb82e1d3696ddc68cc48620</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<link href="/css/hbe.style.css" rel="stylesheet" type="text/css"><script data-swup-reload-script type="module" src="/js/plugins/hbe.js"></script>
<script data-swup-reload-script type="module">
import {initHBE} from "/js/plugins/hbe.js";
  console.log("hexo-blog-encrypt: loaded.");
    initHBE();
</script>
]]></content>
      <categories>
        <category>MMD</category>
        <category>Motion DL</category>
      </categories>
      <tags>
        <tag>Motion DL</tag>
        <tag>PJSK</tag>
      </tags>
  </entry>
  <entry>
    <title>Python学习日志02-基础语法学习01</title>
    <url>/posts/7c98966b/</url>
    <content><![CDATA[<h2 id="一、注释"><a href="#一、注释" class="headerlink" title="一、注释"></a>一、注释</h2><p>&emsp;&emsp;Python的注释以#开头，可以写在任何位置，包括行首、行尾、中间等。注释可以帮我们理解代码的含义，尤其是当我们们需要阅读别人写的代码时，注释可以快速了解代码的功能。注释并不会影响程序的执行，编译器会自动跳过所有注释。在Python中，注释分为 <code>单行注释</code> 和 <code>多行注释</code> 。</p>
<h3 id="1-1-单行注释"><a href="#1-1-单行注释" class="headerlink" title="1.1 单行注释"></a>1.1 单行注释</h3><p>&emsp;&emsp;单行注释以#开始，此时本行文本全部都为注释。例如：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"><span class="comment"># 这是一个Print函数，用来输出。</span></span><br></pre></td></tr></table></figure></div>
<p>&emsp;&emsp;其中的#这一行的文字全部都是注释，在实际运作中，只会将 <code>print(&#39;hello&#39;)</code>运行，而#这一行会直接跳过。</p>
<h3 id="1-2-多行注释"><a href="#1-2-多行注释" class="headerlink" title="1.2 多行注释"></a>1.2 多行注释</h3><p>&emsp;&emsp;多行注释以 <code>三个半角单引号</code> 或 <code>三个半角双引号</code> 开始，以 <code>三个半角单引号</code> 或 <code>三个半角双引号</code> 结束，中间的文字都是注释。在Python中所有的符号类字符，除字符串中的之外，用在代码中的符号字符全部要求半角。<br>单引号例如：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">这是第一行注释</span></span><br><span class="line"><span class="string">这是第二行注释</span></span><br><span class="line"><span class="string">这是第三行注释</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></div>
<p>&emsp;&emsp;双引号例如：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">这是第一行注释</span></span><br><span class="line"><span class="string">这是第二行注释</span></span><br><span class="line"><span class="string">这是第三行注释</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></div>

<hr>
<h2 id="二、关键字和标识符"><a href="#二、关键字和标识符" class="headerlink" title="二、关键字和标识符"></a>二、关键字和标识符</h2><p>&emsp;&emsp;在Python中，标识符和关键字都是具有某种实际意义的标记和称谓。在第一小节中我们已经使用过很多的标识符和关键字，关键字比如 <code>print</code>、<code>if</code>、<code>elif</code>、<code>else</code>等，而 <code>单引号</code> 和 <code>双引号</code> 就是标识符。<br>&emsp;&emsp;Python中的标识符语法规则如下：</p>
<ul>
<li>第一个字符必须是字母或下划线（_），不能是数字。</li>
<li>后续字符可以是字母、数字或下划线。</li>
<li>标识符区分大小写。</li>
<li>标识符不能是Python的关键字。</li>
<li>在Python 3.x中，非ASCII字符也是合法的</li>
</ul>
<p>&emsp;&emsp;跟JAVA，C等类似，关键字是Python中内置的，不能作为变量名、函数名、类名等使用，否则Python解释器会报错。而Python提供了以一个keywoord&ensp;module，可以输出当前版本下的所有关键字，代码如下</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> keyword</span><br><span class="line">keyword.kwlist</span><br></pre></td></tr></table></figure></div>
<p>&emsp;&emsp;输出结果如下：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;False&#x27;</span>, <span class="string">&#x27;None&#x27;</span>, <span class="string">&#x27;True&#x27;</span>, <span class="string">&#x27;and&#x27;</span>, <span class="string">&#x27;as&#x27;</span>, <span class="string">&#x27;assert&#x27;</span>, <span class="string">&#x27;async&#x27;</span>, <span class="string">&#x27;await&#x27;</span>, <span class="string">&#x27;break&#x27;</span>, <span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;continue&#x27;</span>, <span class="string">&#x27;def&#x27;</span>, <span class="string">&#x27;del&#x27;</span>, <span class="string">&#x27;elif&#x27;</span>, <span class="string">&#x27;else&#x27;</span>, <span class="string">&#x27;except&#x27;</span>, <span class="string">&#x27;finally&#x27;</span>, <span class="string">&#x27;for&#x27;</span>, <span class="string">&#x27;from&#x27;</span>, <span class="string">&#x27;global&#x27;</span>, <span class="string">&#x27;if&#x27;</span>, <span class="string">&#x27;import&#x27;</span>, <span class="string">&#x27;in&#x27;</span>, <span class="string">&#x27;is&#x27;</span>, <span class="string">&#x27;lambda&#x27;</span>, <span class="string">&#x27;nonlocal&#x27;</span>, <span class="string">&#x27;not&#x27;</span>, <span class="string">&#x27;or&#x27;</span>, <span class="string">&#x27;pass&#x27;</span>, <span class="string">&#x27;raise&#x27;</span>, <span class="string">&#x27;return&#x27;</span>, <span class="string">&#x27;try&#x27;</span>, <span class="string">&#x27;while&#x27;</span>, <span class="string">&#x27;with&#x27;</span>, <span class="string">&#x27;yield&#x27;</span>]</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/11/23/Sy4CYbRaKoukL5M.png"
                      alt="image.png"
                ></p>
<hr>
<h2 id="三、变量"><a href="#三、变量" class="headerlink" title="三、变量"></a>三、变量</h2><p>&emsp;&emsp;在Python中，变量是用来存储数据值的标识符。</p>
<ul>
<li><strong>定义</strong>：变量是编程中用于存储数据值的基本概念。它可以保存各种类型的数据，如数字、字符串、布尔值等。</li>
<li><strong>作用</strong>：通过变量，程序可以动态地处理数据，使得程序更加灵活和强大。</li>
<li><strong>命名规则</strong>：<ul>
<li>变量名必须以字母或下划线开头。</li>
<li>变量名不能包含空格或特殊字符。</li>
<li>变量名区分大小写。</li>
</ul>
</li>
<li><strong>声明与赋值</strong>：<ul>
<li>在Python中与其他编程语言不同的是，在Python中不需要显式声明变量类型，直接赋值即可创建变量。</li>
<li>可以通过<code>=</code>操作符给变量赋值。</li>
<li>示例：<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">age = <span class="number">25</span>  <span class="comment"># 声明并初始化一个变量</span></span><br><span class="line">name = <span class="string">&quot;TikaRa&quot;</span>  <span class="comment"># 声明并初始化一个字符串变量</span></span><br><span class="line">is_student = <span class="literal">True</span>  <span class="comment"># 声明并初始化一个布尔变量</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
</li>
<li><strong>动态类型</strong>：Python是一种动态类型语言，变量的类型可以在运行时改变。<ul>
<li>示例：<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">10</span>  <span class="comment"># x 是整数</span></span><br><span class="line">x = <span class="string">&quot;Hello&quot;</span>  <span class="comment"># x 现在是字符串</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
</li>
<li><strong>作用域</strong>：变量的作用域决定了它在代码中的可见性和生命周期。Python中有全局作用域、函数作用域和块作用域。<ul>
<li>全局作用域：在整个脚本或模块中可见。</li>
<li>函数作用域：仅在函数内部可见。</li>
<li>块作用域：在某些特定的代码块（如循环、条件语句）中可见。</li>
</ul>
</li>
<li><strong>内置函数</strong>：<ul>
<li><code>type()</code>：用于查看变量的类型。<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(x))  <span class="comment"># 输出 &lt;class &#x27;int&#x27;&gt;</span></span><br></pre></td></tr></table></figure></div></li>
<li><code>id()</code>：用于获取变量的内存地址。<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(x))  <span class="comment"># 输出变量x的内存地址</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
</li>
</ul>
<hr>
<h2 id="四、输入输出"><a href="#四、输入输出" class="headerlink" title="四、输入输出"></a>四、输入输出</h2><p>&emsp;&emsp;对于所有的软件程序来说，输入输出是与用户交互的主要途径，通过输入，能够让程序获得最原始的需要处理的数据；通过输出程序，能够让数据处理结果输出给用户。</p>
<h3 id="4-1-输入"><a href="#4-1-输入" class="headerlink" title="4.1 输入"></a>4.1 输入</h3><p>&emsp;&emsp;在Python中，输入是通过调用内置函数input()函数实现的。其主要形式如下“</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">input</span>([prompt])</span><br></pre></td></tr></table></figure></div>
<p>&emsp;&emsp;其中prompt代表可选参数，可选就是既可以使用，也可以不使用。参数prompt用来提供用户输入的提示信息字符串。当用户输入程序所需数据时，就以字符串的形式返回。也就是说，此时无论输入的是数字、字符串、布尔值等，input()函数都会返回一个字符串。如果需要输入数值，就必须使用类型转换函数。</p>
<h3 id="4-2-输出"><a href="#4-2-输出" class="headerlink" title="4.2 输出"></a>4.2 输出</h3><p>&emsp;&emsp;在Python中，输出就是现实执行结果，而这个功能是内置函数print()实现的。使用Print就可以在屏幕上显示特定的文本。例如：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello，world&#x27;</span>)</span><br></pre></td></tr></table></figure></div>
<p>&emsp;&emsp;在Python中，print也可以同时使用多个字符串，以“,”隔开，就可以连成一串输出。例如：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>)</span><br></pre></td></tr></table></figure></div>
<p>&emsp;&emsp;这样print就可以依次输出每个字符串，遇到“,”时就会输出一个空格，所以在这个情况下，上面那个函数就会输出</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>)</span><br><span class="line">hello world</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/11/23/jZRPm8iuFr4h6qU.png"
                      alt="image.png"
                ><br>&emsp;&emsp;另外，print也支持输出整数或者结果为浮点数的计算。例如：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">1</span>+<span class="number">2</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">1.5</span>+<span class="number">2.5</span>)</span><br><span class="line"><span class="number">4.0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">500</span>)</span><br><span class="line"><span class="number">500</span></span><br></pre></td></tr></table></figure></div>
<p>&emsp;&emsp;需要注意的是，对于运算来说，Python会自动计算出结果，然后以字符串的形式返回。如果只想要5.2+3.4，而不想返回5.2+3.4的结果，就需要将其定义为字符串。例如：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;5.2+3.4=&#x27;</span>)</span><br></pre></td></tr></table></figure></div>
<p>这样输出结果就是5.2+3.4，而并非是结果8.6。这一点和其他语言是有点区别的。写到一起给大家分辨一下。</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;5.2+3.4=&#x27;</span>,<span class="number">5.2</span>+<span class="number">3.4</span>)</span><br><span class="line"><span class="number">5.2</span>+<span class="number">3.4</span>= <span class="number">8.6</span></span><br><span class="line"><span class="comment"># 其中两个单引号将5.2+3.4定义为字符串，而后面的5.2+3.4则将直接输出浮点数8.6</span></span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>Python</category>
        <category>学习日志</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python学习日志04-基础语法学习03</title>
    <url>/posts/e067adc7/</url>
    <content><![CDATA[<h2 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h2><p>&emsp;&emsp;python支持如下四种数字类型：</p>
<ul>
<li>整数（int）<br>&emsp;&emsp;整数就是整数，包括正整数，负整数和零，不带小数点。在Python中，整数的取值范围是很大的。Python中的整数还可以以几种不同的进制进行书写。0+“进制标志”+数字代表不同进制的数。现实中有如下四种常用的进制标志。<ul>
<li>0o [0O] 数字：表示八进制整数，例如0o24、0o24。</li>
<li>0x [0X] 数字：表示十六进制整数，例如：0x2A、0X2A。</li>
<li>0b [0B] 数字：表示二进制整数，例如：0b101010、0B101010。</li>
<li>不带进制标志：表示十进制整数</li>
</ul>
</li>
<li>浮点型<br>&emsp;&emsp;浮点数（float）数据由整数部分与小数部分组成，浮点型数据也可以用科学技术法表示（2.5e2&#x3D;2.5×10<sup>2</sup>&#x3D;250）。当按照科学计数法表示时，一个浮点数的小数点的位置是可以变的，比如，1.23×10<sup>9</sup>和12.3×10<sup>8</sup>是等价的。浮点数可以采用数学写法，如：1.23、3.14、-55.369等。但是对于很大或者很小的浮点数，就必须使用科学计数法来表示，把10用e代替，如：1.23e-5、3.14e5等。</li>
<li>布尔型<br>&emsp;&emsp;布尔型是一种表示逻辑值的简单类型，它的值只能是“真”或“假”这两个中的其中一个。布尔型是所有逻辑关系运算的返回类型，经常用excel的同学应该很熟悉，他就是IF函数判断条件的返回值。在Python中，布尔型的取值只有<code>“True”</code>和<code>“False”</code>两个，注意大小写。</li>
<li>复数型<br>&emsp;&emsp;在Python中，复数型即complex型，由实数部分和虚数部分构成，可以用a+bj或者complex(a,b)来表示，复数的实部a和虚部b都是浮点型。</li>
</ul>
<p>&emsp;&emsp;我们可以用<code>type()</code>函数来判断一个变量的类型，例如我现在有text1~4四个变量，分别存储了字符串、整数、浮点数和布尔值，我们可以用type()函数来判断它们的类型，如下：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">text1 = <span class="string">&quot;hello world&quot;</span></span><br><span class="line">text2 = <span class="number">30</span></span><br><span class="line">text3 = <span class="number">3.14</span></span><br><span class="line">text4 = <span class="literal">True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(text1),<span class="built_in">type</span>(text2),<span class="built_in">type</span>(text3),<span class="built_in">type</span>(text4))</span><br></pre></td></tr></table></figure></div>
<p>&emsp;&emsp;上面那段代码就会输出如下结果</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;str&#x27;</span>&gt; &lt;<span class="keyword">class</span> <span class="string">&#x27;int&#x27;</span>&gt; &lt;<span class="keyword">class</span> <span class="string">&#x27;float&#x27;</span>&gt; &lt;<span class="keyword">class</span> <span class="string">&#x27;bool&#x27;</span>&gt;</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/11/26/RmLQ6lAJKaGsBCn.png"
                      alt="image.png"
                ></p>
<hr>
<h2 id="类型转换函数"><a href="#类型转换函数" class="headerlink" title="类型转换函数"></a>类型转换函数</h2><p>&emsp;&emsp;python中，我们时常要将某个类型的值转换为另一个类型，通过下表中的函数，我们就可以将一个类型转换成另一个类型。</p>
<table>
<thead>
<tr>
<th align="center">函数</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">int(x[,base])</td>
<td align="center">将x转换为整数类型（并不是四舍五入，而是直接取整）</td>
</tr>
<tr>
<td align="center">float(xx)</td>
<td align="center">将x转换为浮点数类型</td>
</tr>
<tr>
<td align="center">str()</td>
<td align="center">将一个数值类型转换为字符串类型</td>
</tr>
<tr>
<td align="center">cpmplex(real[,imag])</td>
<td align="center">创建一个复数</td>
</tr>
<tr>
<td align="center">repr(x)</td>
<td align="center">将对象转换为表达式字符串</td>
</tr>
<tr>
<td align="center">eval(str)</td>
<td align="center">计算在字符串中有效的Python表达式，并且返回一个对象</td>
</tr>
<tr>
<td align="center">tuple(s)</td>
<td align="center">将序列s转换为元组</td>
</tr>
<tr>
<td align="center">list(s)</td>
<td align="center">将序列s转换为一个列表</td>
</tr>
<tr>
<td align="center">set(s)</td>
<td align="center">转换为可变集合</td>
</tr>
<tr>
<td align="center">dict(s)</td>
<td align="center">创建一个字典。必须是序列(key,value)元组</td>
</tr>
<tr>
<td align="center">forzenset(s)</td>
<td align="center">转换为一个不可变集合</td>
</tr>
<tr>
<td align="center">chr(x)</td>
<td align="center">将一个整数转换为一个字符</td>
</tr>
<tr>
<td align="center">unichr(x)</td>
<td align="center">将一个整数转换为一个Unicode字符，在Python3中已弃用</td>
</tr>
<tr>
<td align="center">ord(x)</td>
<td align="center">将一个字符转换为一个整数值</td>
</tr>
<tr>
<td align="center">hex(x)</td>
<td align="center">将一个整数转换为十六进制字符串</td>
</tr>
<tr>
<td align="center">oct(x)</td>
<td align="center">将一个整数转换为八进制字符串</td>
</tr>
</tbody></table>
<p>&emsp;&emsp;分别举例如下</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># int(x[,base]) - 将x转换为整数类型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="string">&#x27;123&#x27;</span>))  <span class="comment"># 输出: 123</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="string">&#x27;101&#x27;</span>, base=<span class="number">2</span>))  <span class="comment"># 输出: 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># float(x) - 将x转换为浮点数类型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">float</span>(<span class="string">&#x27;3.14&#x27;</span>))  <span class="comment"># 输出: 3.14</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># str() - 将一个数值类型转换为字符串类型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(<span class="number">123</span>))  <span class="comment"># 输出: &#x27;123&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># complex(real[,imag]) - 创建一个复数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">complex</span>(<span class="number">3</span>, <span class="number">4</span>))  <span class="comment"># 输出: (3+4j)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># repr(x) - 将对象转换为表达式字符串</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">repr</span>(<span class="number">123</span>))  <span class="comment"># 输出: &#x27;123&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># eval(str) - 计算在字符串中有效的Python表达式，并且返回一个对象</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">eval</span>(<span class="string">&#x27;2 + 3 * 4&#x27;</span>))  <span class="comment"># 输出: 14</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># tuple(s) - 将序列s转换为元组</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">tuple</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))  <span class="comment"># 输出: (1, 2, 3)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># list(s) - 将序列s转换为一个列表</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="string">&#x27;abc&#x27;</span>))  <span class="comment"># 输出: [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># set(s) - 转换为可变集合</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]))  <span class="comment"># 输出: &#123;1, 2, 3&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># dict(s) - 创建一个字典。必须是序列(key,value)元组</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dict</span>([(<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>), (<span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>)]))  <span class="comment"># 输出: &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># frozenset(s) - 转换为一个不可变集合</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">frozenset</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]))  <span class="comment"># 输出: frozenset(&#123;1, 2, 3&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># chr(x) - 将一个整数转换为一个字符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">65</span>))  <span class="comment"># 输出: &#x27;A&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ord(x) - 将一个字符转换为一个整数值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>))  <span class="comment"># 输出: 65</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># hex(x) - 将一个整数转换为十六进制字符串</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(<span class="number">255</span>))  <span class="comment"># 输出: &#x27;0xff&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># oct(x) - 将一个整数转换为八进制字符串</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">oct</span>(<span class="number">8</span>))  <span class="comment"># 输出: &#x27;0o10&#x27;</span></span><br></pre></td></tr></table></figure></div>

<hr>
<h2 id="运算符和表达式"><a href="#运算符和表达式" class="headerlink" title="运算符和表达式"></a>运算符和表达式</h2><p>&emsp;&emsp;在Python中，有了变量，字符串等，还必须使用某种方式将变量和字符串的关系表示出来，只有这样才能用程序解决现实中的问题，此时运算符和表达式便应运而生。运算符和表达式的作用是为变量建立一种组合联系，实现对变量的处理。</p>
<h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><p>&emsp;&emsp;算术运算符用于对数值变量进行运算，如加减乘除等，运算符的优先级和结合律与数学一致。具体符号见下表：</p>
<table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">+</td>
<td align="center">两对象相加</td>
</tr>
<tr>
<td align="center">-</td>
<td align="center">两对象相减，得到负数或表示用一个减一个</td>
</tr>
<tr>
<td align="center">*</td>
<td align="center">两数相乘或者返回一个被重复若干次的字符串</td>
</tr>
<tr>
<td align="center">&#x2F;</td>
<td align="center">两数相除</td>
</tr>
<tr>
<td align="center">%</td>
<td align="center">取模运算符，也就是取除法的余数</td>
</tr>
<tr>
<td align="center">**</td>
<td align="center">幂运算符，实现a的b次方</td>
</tr>
<tr>
<td align="center">&#x2F;&#x2F;</td>
<td align="center">取整除，返回商的整数部分，不包含余数</td>
</tr>
</tbody></table>
<p>&emsp;&emsp;若a&#x3D;3065，b&#x3D;20，则上面的表中举例如下：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">3065</span></span><br><span class="line">b = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># + 加法</span></span><br><span class="line"><span class="built_in">print</span>(a + b)  <span class="comment"># 输出: 3085</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># - 减法</span></span><br><span class="line"><span class="built_in">print</span>(a - b)  <span class="comment"># 输出: 3045</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># * 乘法</span></span><br><span class="line"><span class="built_in">print</span>(a * b)  <span class="comment"># 输出: 61300</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># / 除法</span></span><br><span class="line"><span class="built_in">print</span>(a / b)  <span class="comment"># 输出: 153.25</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># % 取模（取余数）</span></span><br><span class="line"><span class="built_in">print</span>(a % b)  <span class="comment"># 输出: 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ** 幂运算</span></span><br><span class="line"><span class="built_in">print</span>(a ** b)  <span class="comment"># 输出: 3065 的 20 次方, 结果非常大</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># // 整除</span></span><br><span class="line"><span class="built_in">print</span>(a // b)  <span class="comment"># 输出: 153</span></span><br></pre></td></tr></table></figure></div>

<h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><p>&emsp;&emsp;比较运算符用于比较两个数值变量的关系，返回一个布尔值，即True或False。常用于比较大小关系等。其具体符号见下表：</p>
<table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">&#x3D;&#x3D;</td>
<td align="center">判断两个对象是否相等</td>
</tr>
<tr>
<td align="center">!&#x3D;</td>
<td align="center">判断两个对象是否不相等</td>
</tr>
<tr>
<td align="center">&gt;</td>
<td align="center">判断一个对象是否大于另一个对象</td>
</tr>
<tr>
<td align="center">&gt;&#x3D;</td>
<td align="center">判断一个对象是否大于等于另一个对象</td>
</tr>
<tr>
<td align="center">&lt;</td>
<td align="center">判断一个对象是否小于另一个对象</td>
</tr>
<tr>
<td align="center">&lt;&#x3D;</td>
<td align="center">判断一个对象是否小于等于另一个对象</td>
</tr>
<tr>
<td align="center">&emsp;&emsp;例如，现在有两个数值变量a和b，a&#x3D;5，b&#x3D;10，则比较运算符举例如下：</td>
<td align="center"></td>
</tr>
</tbody></table>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">5</span></span><br><span class="line">b = <span class="number">10</span></span><br><span class="line"><span class="comment"># == 判断两个对象是否相等</span></span><br><span class="line"><span class="built_in">print</span>(a == b)  <span class="comment"># 输出: False</span></span><br><span class="line"><span class="built_in">print</span>(a == <span class="number">5</span>)  <span class="comment"># 输出: True</span></span><br><span class="line"><span class="comment"># != 判断两个对象是否不相等</span></span><br><span class="line"><span class="built_in">print</span>(a != b)  <span class="comment"># 输出: True</span></span><br><span class="line"><span class="built_in">print</span>(a != <span class="number">5</span>)  <span class="comment"># 输出: False</span></span><br><span class="line"><span class="comment"># &gt; 判断一个对象是否大于另一个对象</span></span><br><span class="line"><span class="built_in">print</span>(a &gt; b)  <span class="comment"># 输出: False</span></span><br><span class="line"><span class="built_in">print</span>(b &gt; a)  <span class="comment"># 输出: True</span></span><br><span class="line"><span class="comment"># &gt;= 判断一个对象是否大于等于另一个对象</span></span><br><span class="line"><span class="built_in">print</span>(a &gt;= b)  <span class="comment"># 输出: False</span></span><br><span class="line"><span class="built_in">print</span>(b &gt;= a)  <span class="comment"># 输出: True</span></span><br><span class="line"><span class="comment"># &lt; 判断一个对象是否小于另一个对象</span></span><br><span class="line"><span class="built_in">print</span>(a &lt; b)  <span class="comment"># 输出: True</span></span><br><span class="line"><span class="built_in">print</span>(b &lt; a)  <span class="comment"># 输出: False</span></span><br><span class="line"><span class="comment"># &lt;= 判断一个对象是否小于等于另一个对象</span></span><br><span class="line"><span class="built_in">print</span>(a &lt;= b)  <span class="comment"># 输出: True</span></span><br><span class="line"><span class="built_in">print</span>(b &lt;= a)  <span class="comment"># 输出: False</span></span><br></pre></td></tr></table></figure></div>

<p>&emsp;&emsp;需要注意的是，有时会返回0或者1，而不是True和False，其中0表示False，1表示True。</p>
<h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><p>&emsp;&emsp;赋值运算符的含义是给某变量或表达式设置一个值，例如a&#x3D;3065，表示将值3065赋给变量a。这样一见到a就知道他是3065， <del>（像是数学中的换元？）</del> 。Python为我们提供了7中复合赋值运算符，就是在原始赋值运算符之上加了算数运算符，详见下表：</p>
<table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">&#x3D;</td>
<td align="center">赋值运算符</td>
</tr>
<tr>
<td align="center">+&#x3D;</td>
<td align="center">加法赋值运算符</td>
</tr>
<tr>
<td align="center">-&#x3D;</td>
<td align="center">减法赋值运算符</td>
</tr>
<tr>
<td align="center">*&#x3D;</td>
<td align="center">乘法赋值运算符</td>
</tr>
<tr>
<td align="center">&#x2F;&#x3D;</td>
<td align="center">除法赋值运算符</td>
</tr>
<tr>
<td align="center">%&#x3D;</td>
<td align="center">取模赋值运算符</td>
</tr>
<tr>
<td align="center">**&#x3D;</td>
<td align="center">幂赋值运算符</td>
</tr>
<tr>
<td align="center">&#x2F;&#x2F;&#x3D;</td>
<td align="center">取整除赋值运算符</td>
</tr>
<tr>
<td align="center">&emsp;&emsp;例如，现在有两个数值变量a和b，a&#x3D;100，b&#x3D;10，则赋值运算符举例如下：</td>
<td align="center"></td>
</tr>
</tbody></table>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始值</span></span><br><span class="line">a = <span class="number">3065</span></span><br><span class="line">b = <span class="number">50</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加法赋值</span></span><br><span class="line">a += b  <span class="comment"># a 现在是 3115 (3065 + 50)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;加法赋值后 a 的值: <span class="subst">&#123;a&#125;</span>&quot;</span>)</span><br><span class="line">加法赋值后 a 的值: <span class="number">3115</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 减法赋值</span></span><br><span class="line">a -= b  <span class="comment"># a 现在回到 3065 (3115 - 50)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;减法赋值后 a 的值: <span class="subst">&#123;a&#125;</span>&quot;</span>)</span><br><span class="line">减法赋值后 a 的值: <span class="number">3065</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 乘法赋值</span></span><br><span class="line">a *= b  <span class="comment"># a 变成 153250 (3065 * 50)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;乘法赋值后 a 的值: <span class="subst">&#123;a&#125;</span>&quot;</span>)</span><br><span class="line">乘法赋值后 a 的值: <span class="number">153250</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 浮点除法赋值</span></span><br><span class="line">a /= b  <span class="comment"># a 回到 3065.0 (153250 / 50)，注意这里结果是浮点数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;除法赋值后 a 的值: <span class="subst">&#123;a&#125;</span>&quot;</span>)</span><br><span class="line">除法赋值后 a 的值: <span class="number">3065.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 取模赋值</span></span><br><span class="line">a %= b  <span class="comment"># a 变成 15 (3065 % 50)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;取模赋值后 a 的值: <span class="subst">&#123;a&#125;</span>&quot;</span>)</span><br><span class="line">取模赋值后 a 的值: <span class="number">15.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 幂赋值</span></span><br><span class="line">a **= b  <span class="comment"># a 变成 15 的 50 次方</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;幂赋值后 a 的值: <span class="subst">&#123;a:<span class="number">.2</span>e&#125;</span>&quot;</span>)  <span class="comment"># 使用科学记数法显示以避免非常大的数字</span></span><br><span class="line">幂赋值后 a 的值: <span class="number">6.38e+58</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 整数除法赋值</span></span><br><span class="line">a //= b  <span class="comment"># a 变成 15 的 50 次方除以 50 后向下取整的结果</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;整数除法赋值后 a 的值: <span class="subst">&#123;a&#125;</span>&quot;</span>)</span><br><span class="line">整数除法赋值后 a 的值: <span class="number">1.2752430004280992e+57</span></span><br></pre></td></tr></table></figure></div>
<p>&emsp;&emsp;此处每一个举例的a都是复用上一个举例的结果，而不是最开始的3065。</p>
<h3 id="位运算符和位表达式"><a href="#位运算符和位表达式" class="headerlink" title="位运算符和位表达式"></a>位运算符和位表达式</h3><p>&emsp;&emsp;在Python中，使用位运算符可以操作二进制数据，位运算可以直接操作整数类型的位，也就是说，按位运算是把数字看作二进制数来计算。具体如下：</p>
<table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">&amp;</td>
<td align="center">按位与运算符，如果两个相应位都为1，则该位结果为1</td>
</tr>
<tr>
<td align="center">|</td>
<td align="center">按位或运算符，只要两个二进制位有一个为1，结果位就是1</td>
</tr>
<tr>
<td align="center">^</td>
<td align="center">按位异或运算符，如果两个二进制位相异或时，结果为1</td>
</tr>
<tr>
<td align="center">~</td>
<td align="center">按位取反运算符，对数据的每个二进制位取反，即0变1，1变0</td>
</tr>
<tr>
<td align="center">&lt;&lt;</td>
<td align="center">左移动运算符，运算数的各二进制位全部左移若干位，由&lt;&lt;右边的数指定移动位数，高位丢弃，低位补0</td>
</tr>
<tr>
<td align="center">&gt;&gt;</td>
<td align="center">右移动运算符，把&gt;&gt;左边的运算数的各二进制位全部右移若干位，由&gt;&gt;右边的数指定移动的位数</td>
</tr>
</tbody></table>
<p>&emsp;&emsp;假设变量a&#x3D;3065，则a的二进制数是：101111111001，变量b&#x3D;50，则b的二进制数是：110010，为了进行位运算，我们首先需要确保两个数有相同的位数。b 比 a 少几位，所以我们在 b 的前面补零，使其与 a 有相同的位数，即 b 变为 000000110010。</p>
<ol>
<li><p><strong>按位与(&amp;)</strong>:</p>
<ul>
<li>运算: <code>a &amp; b</code> 即 <code>101111111001 &amp; 000000110010</code></li>
<li>结果: <code>000000110000</code> （十进制 48）</li>
</ul>
</li>
<li><p><strong>按位或(|)</strong>:</p>
<ul>
<li>运算: <code>a | b</code> 即 <code>101111111001 | 000000110010</code></li>
<li>结果: <code>101111111011</code> （十进制 3071）</li>
</ul>
</li>
<li><p><strong>按位异或(^)</strong>:</p>
<ul>
<li>运算: <code>a ^ b</code> 即 <code>101111111001 ^ 000000110010</code></li>
<li>结果: <code>101111001011</code> （十进制 3023）</li>
</ul>
</li>
<li><p><strong>按位取反(~)</strong>:</p>
<ul>
<li>对于 a: <code>~a</code> 即 <code>~101111111001</code><ul>
<li>在大多数计算机系统中，整数是以补码形式存储的，因此对于一个正整数执行按位取反后，通常会得到一个负数。这里直接取反得到的是 <code>010000000110</code>，但实际结果会依赖于具体的机器和数据类型大小。</li>
</ul>
</li>
<li>对于 b: <code>~b</code> 即 <code>~000000110010</code><ul>
<li>同样地，直接取反得到 <code>111111001101</code>，但考虑补码表示，这实际上代表了一个负数。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>左移(&lt;&lt;)</strong>:</p>
<ul>
<li>假设我们将 a 左移 2 位: <code>a &lt;&lt; 2</code> 即 <code>101111111001 &lt;&lt; 2</code></li>
<li>结果: <code>111111100100</code> （十进制 12260）</li>
</ul>
</li>
<li><p><strong>右移(&gt;&gt;)</strong>:</p>
<ul>
<li>假设我们将 a 右移 2 位: <code>a &gt;&gt; 2</code> 即 <code>101111111001 &gt;&gt; 2</code></li>
<li>结果: <code>001011111110</code> （十进制 766）</li>
</ul>
</li>
</ol>
<h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>&emsp;&emsp;在Python中，逻辑运算就是将变量用逻辑关系连接起来，并对其进行求值的一个过程。在Python中，逻辑运算符包括：and、or、not。其具体如下：</p>
<table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">and</td>
<td align="center">逻辑与运算符，如果两个表达式都为真，则返回True，否则返回False</td>
</tr>
<tr>
<td align="center">or</td>
<td align="center">逻辑或运算符，如果两个表达式有一个为真，则返回True，否则返回False</td>
</tr>
<tr>
<td align="center">not</td>
<td align="center">逻辑非运算符，返回表达式的反值，即如果表达式为真，则返回False，否则返回True</td>
</tr>
</tbody></table>
<p>&emsp;&emsp;</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="literal">True</span></span><br><span class="line">b = <span class="literal">False</span></span><br><span class="line"><span class="comment"># and 运算符</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">and</span> b)  <span class="comment"># 输出: False</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">and</span> a)  <span class="comment"># 输出: True</span></span><br><span class="line"><span class="comment"># or 运算符</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">or</span> b)  <span class="comment"># 输出: True</span></span><br><span class="line"><span class="built_in">print</span>(b <span class="keyword">or</span> b)  <span class="comment"># 输出: False</span></span><br><span class="line"><span class="comment"># not 运算符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">not</span> a)  <span class="comment"># 输出: False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">not</span> <span class="literal">False</span>)  <span class="comment"># 输出: True</span></span><br></pre></td></tr></table></figure></div>

<hr>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>&emsp;&emsp;Python中运算符具有优先级，从高到低依次是：算术运算符&gt;比较运算符&gt;位运算符和位表达式&gt;逻辑运算符&gt;赋值运算符。若有同级运算符，则从左向右依次计算。在实际使用中，要注意优先级的问题，避免出现错误。 </p>
]]></content>
      <categories>
        <category>Python</category>
        <category>学习日志</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python学习日志05-基础语法学习04</title>
    <url>/posts/692b5ca4/</url>
    <content><![CDATA[<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>&emsp;&emsp;在Python中，列表也被叫做序列，是Python语言中最基本的一种数据结构，与其他编程语言（例如C、C++、Java）中的数据类似。</p>
<h3 id="创建列表"><a href="#创建列表" class="headerlink" title="创建列表"></a>创建列表</h3><p>列表中的每一个元素都分配一个数字，这个数字表示这个元素的位置或者索引，第一个索引是0，第二个索引是1，以此类推。列表由一系列按特定顺序排列的元素组成，开发者可以创建包含字母表中所有字母、数字0~9或其他的列表，元素之间可以没有任何关系。因为列表通常包含很多的元素，所以一般要给列表指定一个名称。Python中，使用中括号<code>[]</code>来表示列表，并用逗号分隔其中的元素。</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">list2 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>]</span><br><span class="line">list3 = [<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;b&#x27;</span>, <span class="number">3</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(list1[<span class="number">2</span>],list2[<span class="number">3</span>],list3[<span class="number">4</span>])</span><br><span class="line"><span class="comment"># 输出：3 d 3</span></span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/11/27/HnklgRwbEdyBzu5.png"
                      alt="image.png"
                ></p>
<h3 id="更新列表（替换某个元素）"><a href="#更新列表（替换某个元素）" class="headerlink" title="更新列表（替换某个元素）"></a>更新列表（替换某个元素）</h3><p>&emsp;&emsp;在程序中的列表通常是动态的，所以我们可以向列表二次指定，即更新列表，在此过程中，我们需要指定列表名和元素的索引，然后再指定新值。举例如下：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定序列list1</span></span><br><span class="line">list1 = [<span class="string">&quot;TikaRa&quot;</span>,<span class="string">&quot;Re-Tika&quot;</span>,<span class="string">&quot;Tika&quot;</span>,<span class="string">&quot;Tera&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出list1</span></span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将list1的第4个元素更新为Alp_Studuio</span></span><br><span class="line">list1[<span class="number">3</span>] = <span class="string">&quot;Alp_Studuio&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出更新后的list1</span></span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line"><span class="comment">#本环节将输出：[&#x27;TikaRa&#x27;, &#x27;Re-Tika&#x27;, &#x27;Tika&#x27;, &#x27;Alp_Studuio&#x27;]</span></span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/11/27/RhaT2p4eS8d9uJc.png"
                      alt="image.png"
                ></p>
<h3 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h3><p>&emsp;&emsp;我们也可以向列表中某位置添加元素，然后再删除某个指定元素。<br>&emsp;&emsp;在Python中，使用<code>insert()</code>可以在列表任何位置添加新元素，插入时与要制定新元素的索引和值。insert()的语法如下：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span>.insert(index,obj)</span><br></pre></td></tr></table></figure></div>
<p>&emsp;&emsp;上述语法中的具体参数如下</p>
<ul>
<li>obj：要插入其中的元素</li>
<li>index：元素obj与要插入的索引位置</li>
</ul>
<p>&emsp;&emsp;继续用上面的list1来举例：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定序列list1</span></span><br><span class="line">list1 = [<span class="string">&quot;TikaRa&quot;</span>,<span class="string">&quot;Re-Tika&quot;</span>,<span class="string">&quot;Tika&quot;</span>,<span class="string">&quot;Tera&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出list1</span></span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在索引2处插入元素Alp_Studuio</span></span><br><span class="line">list1.insert(<span class="number">2</span>,<span class="string">&quot;Alp_Studuio&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出变更后的list1</span></span><br><span class="line"><span class="built_in">print</span>(list1)</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/11/27/AwMCoygxcOtkUBu.png"
                      alt="image.png"
                ><br>&emsp;&emsp;此时索引2就变成了Alp_Studuio，之后的元素索引依次顺延。</p>
<h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><p>&emsp;&emsp;在Python中，删除列表中的元素，使用<code>del</code>语句，语法如下：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">del</span> <span class="built_in">list</span>[index]</span><br></pre></td></tr></table></figure></div>
<p>&emsp;&emsp;上述语法中的具体参数如下</p>
<ul>
<li>index：要删除的元素索引位置</li>
</ul>
<p>&emsp;&emsp;还是用list1举例：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定序列list1</span></span><br><span class="line">list1 = [<span class="string">&quot;TikaRa&quot;</span>,<span class="string">&quot;Re-Tika&quot;</span>,<span class="string">&quot;Tika&quot;</span>,<span class="string">&quot;Tera&quot;</span>]</span><br><span class="line"><span class="comment"># 输出list1</span></span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line"><span class="comment"># 删除索引为3的元素</span></span><br><span class="line"><span class="keyword">del</span> list1[<span class="number">3</span>]</span><br><span class="line"><span class="comment"># 输出变更后的list1</span></span><br><span class="line"><span class="built_in">print</span>(list1)</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/11/27/T8w72aNs53kzAcV.png"
                      alt="image.png"
                ></p>
<hr>
<h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><p>&emsp;&emsp;在Python中，可以将元组看作是一种特殊的列表。与列表唯一不同的是，元组内的数据元素不能发生改变。不但不能改变其中的数据项，而且也不能添加或者删除项。当开发者需要创建一组不可改变的数据时，通常会把数据放在一个元组中。</p>
<h3 id="创建、删除和组合元组"><a href="#创建、删除和组合元组" class="headerlink" title="创建、删除和组合元组"></a>创建、删除和组合元组</h3><p>&emsp;&emsp;在Python中，创建元组的基本形式是使用小括号<code>()</code>将数据元素括起来，各个元素之间用逗号<code>,</code>隔开。元组与字符串和列表类似，下标索引也是从0开始，并且可以进行截取和组合等操作。元组的常见操作有以下两种：</p>
<ul>
<li>连接：在Python中，元组一旦创立就不可被修改，但是在现实程序应用中，开发者可以对元组进行组合。</li>
<li>删除：同样的，我们也可以使用<code>del</code>语句删除整个元组</li>
</ul>
<p>&emsp;&emsp;具体举例如下：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义一个元组1</span></span><br><span class="line">tuple1 = (<span class="string">&quot;TikaRa&quot;</span>,<span class="string">&quot;Re-Tika&quot;</span>,<span class="string">&quot;Tika&quot;</span>,<span class="string">&quot;Tera&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个元组2</span></span><br><span class="line">tuple2 = (<span class="string">&quot;Alp_Studuio&quot;</span>,<span class="string">&quot;Re-TikaRa&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个元组3=元组1+元组2</span></span><br><span class="line">tuple3 = tuple1 + tuple2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出元组3</span></span><br><span class="line"><span class="built_in">print</span>(tuple3)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除元组1</span></span><br><span class="line"><span class="keyword">del</span> tuple1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出元组1</span></span><br><span class="line"><span class="built_in">print</span>(tuple1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出删除元组1后的报错</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;真抱歉，元组1跑丢了&quot;</span>)</span><br></pre></td></tr></table></figure></div>
<p>&emsp;&emsp;在Python中的运行结果如下：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/11/27/Ncky4CpeGmR15In.png"
                      alt="image.png"
                ></p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义元组1和2，并组合</span></span><br><span class="line">tuple1 = (<span class="string">&quot;TikaRa&quot;</span>,<span class="string">&quot;Re-Tika&quot;</span>,<span class="string">&quot;Tika&quot;</span>,<span class="string">&quot;Tera&quot;</span>)</span><br><span class="line">tuple2 = (<span class="string">&quot;Alp_Studuio&quot;</span>,<span class="string">&quot;Re-TikaRa&quot;</span>)</span><br><span class="line">tuple3 = tuple1 + tuple2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出组合后的元组</span></span><br><span class="line"><span class="built_in">print</span>(tuple3)</span><br><span class="line">(<span class="string">&#x27;TikaRa&#x27;</span>, <span class="string">&#x27;Re-Tika&#x27;</span>, <span class="string">&#x27;Tika&#x27;</span>, <span class="string">&#x27;Tera&#x27;</span>, <span class="string">&#x27;Alp_Studuio&#x27;</span>, <span class="string">&#x27;Re-TikaRa&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除元组1</span></span><br><span class="line"><span class="keyword">del</span> tuple1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 尝试输出元组1</span></span><br><span class="line"><span class="built_in">print</span>(tuple1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 报错了……</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">NameError: name <span class="string">&#x27;tuple1&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> defined. Did you mean: <span class="string">&#x27;tuple2&#x27;</span>?</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次输出元组3</span></span><br><span class="line"><span class="built_in">print</span>(tuple3)</span><br><span class="line">(<span class="string">&#x27;TikaRa&#x27;</span>, <span class="string">&#x27;Re-Tika&#x27;</span>, <span class="string">&#x27;Tika&#x27;</span>, <span class="string">&#x27;Tera&#x27;</span>, <span class="string">&#x27;Alp_Studuio&#x27;</span>, <span class="string">&#x27;Re-TikaRa&#x27;</span>)</span><br></pre></td></tr></table></figure></div>
<p>&emsp;&emsp;从上面的结果来看，我们在组合元组1和元组2之后创建的元组3，是不受删除元组1这一操作的影响，正如上文所说，元组创建之后是不可修改的。你可以想象成，你新建了一个word1，然后又新建了word2，然后新建了一个word3将1和2中的文本复制进去，然后删除了word1，但是word3中的文本不受1的影响。<del>碎碎念：这样说真的对吗？</del></p>
<h3 id="统计元组"><a href="#统计元组" class="headerlink" title="统计元组"></a>统计元组</h3><p>&emsp;&emsp;在Python中，可以使用内置方法来获取元组中的最大值和最小值以及元组内元素个数</p>
<ul>
<li><code>max(tuple)</code>：获取元组中的最大值 </li>
<li><code>min(tuple)</code>：获取元组中的最小值</li>
<li><code>len(tuple)</code>：获取元组内元素个数</li>
<li><code>tuple.count(obj)</code>：统计元组内指定元素的个数</li>
</ul>
<p>&emsp;&emsp;具体举例如下：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义元组1</span></span><br><span class="line">tuple1 = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义元组2</span></span><br><span class="line">tuple2 = (<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出元组1的最大值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>(tuple1))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出元组1的最小值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">min</span>(tuple1))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出元组2中元素个数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(tuple2))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出元组中5的个数</span></span><br><span class="line"><span class="built_in">print</span>(tuple2.count(<span class="number">5</span>))</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/11/27/zNauSZ4E7b2w3HT.png"
                      alt="image.png"
                ></p>
<hr>
<h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p>&emsp;&emsp;在Python中，字典可以存储任意类型对象。字典中的每个键和值中的key和value对之间必须用冒号<code>:</code>分隔，每个键值之间用逗号<code>,</code>分隔，整个字典包括在大括号<code>&#123;&#125;</code>中。字典的语法格式如下：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;key1:value1,key2:value2,key3:value3&#125;</span><br></pre></td></tr></table></figure></div>
<p>&emsp;&emsp;上述语法格式的具体说明如下：</p>
<ul>
<li>字典是一系列“键:值”构成的，每个键都与一个值相关联，我们可以使用键来访问与之相关联的值</li>
<li>字典中可以存储任意多个“键:值”</li>
<li>每个key:value键值对中的键（key）必须是唯一的、不可变的，但是值（value）可以不唯一。</li>
<li>键值可以是任何数据类型，可以是数字，字符串，列表甚至也可以是字典。</li>
</ul>
<p>&emsp;&emsp;在Python中，想要获取字典中某个键的值，可以通过访问键的方式来显示对应的值。字典是一种动态结构，可以随时在其中添加键值对。在添加时，首先需要指定字典名，然后用中括号围起来，最后写明键的值。对于字典中不再需要的信息，我们可以用<code>del</code>语句将对应的信息彻底删除，在使用时，必须指定字典名和要删除的键。<br>&emsp;&emsp;具体举例如下：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建字典dict</span></span><br><span class="line"><span class="built_in">dict</span> = &#123;<span class="string">&quot;商品名&quot;</span>:<span class="string">&quot;电脑支架&quot;</span>,<span class="string">&quot;价格&quot;</span>:<span class="number">1000</span>,<span class="string">&quot;数量&quot;</span>:<span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新“价格”的值</span></span><br><span class="line"><span class="built_in">dict</span>[<span class="string">&quot;价格&quot;</span>] = <span class="number">200</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加新的键值</span></span><br><span class="line"><span class="built_in">dict</span>[<span class="string">&quot;颜色&quot;</span>] = <span class="string">&quot;黑色&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出键“价格”的值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;dict[&#x27;价格&#x27;]=&quot;</span>,<span class="built_in">dict</span>[<span class="string">&quot;价格&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出“颜色”的值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;dict[&#x27;颜色&#x27;]=&quot;</span>,<span class="built_in">dict</span>[<span class="string">&quot;颜色&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示字典dict中的元素</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dict</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除“数量”键值</span></span><br><span class="line"><span class="keyword">del</span> <span class="built_in">dict</span>[<span class="string">&quot;数量&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示字典dict中的元素</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dict</span>)</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/11/27/kMxcKnBN2VHI5PU.png"
                      alt="image.png"
                ></p>
<h3 id="遍历字典"><a href="#遍历字典" class="headerlink" title="遍历字典"></a>遍历字典</h3><p>&emsp;&emsp;在Python中，一个字典可能只包含几个键值对，也可能包含几百万个键值对。所以Python支持对字典进行遍历，我们可以使用内置方法keys()遍历字典，以列表的形式返回一个字典中的所有键。<br>&emsp;&emsp;keys（）的语法格式如下</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dict</span>.keys()</span><br></pre></td></tr></table></figure></div>
<p>&emsp;&emsp;keys()没有参数，只有返回值，能够返回一个字典中的所有键。举例如下：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span> = &#123;</span><br><span class="line">    <span class="string">&quot;English&quot;</span>:<span class="string">&quot;Hello&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Chinese&quot;</span>:<span class="string">&quot;你好&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Japanese&quot;</span>:<span class="string">&quot;こんにちは&quot;</span></span><br><span class="line">    <span class="string">&quot;Korean&quot;</span>:<span class="string">&quot;안녕하세요&quot;</span></span><br><span class="line">    <span class="string">&quot;French&quot;</span>:<span class="string">&quot;Bonjour&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我的个人博客所支持的语言种类：&quot;</span>)</span><br><span class="line">x = <span class="built_in">type</span>.keys()</span><br><span class="line"><span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure></div>
<p>&emsp;&emsp;上述代码创建了一个字典type，然后用keys()遍历了字典中的信息，执行后会输出：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">我的个人博客所支持的语言种类：</span><br><span class="line">dict_keys([<span class="string">&#x27;English&#x27;</span>, <span class="string">&#x27;Chinese&#x27;</span>, <span class="string">&#x27;Japanese&#x27;</span>, <span class="string">&#x27;Korean&#x27;</span>, <span class="string">&#x27;French&#x27;</span>])</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>Python</category>
        <category>学习日志</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python学习日志06-基础语法学习05</title>
    <url>/posts/2754c172/</url>
    <content><![CDATA[<h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><p>&emsp;&emsp;在Python中，条件语句也被称为选择语句，功能是在多个代码语句中选择其中的一行或者几行代码。在Python中，条件语句是一种选择结构，因为是通过if关键字实现的，所以也被称作if语句。</p>
<h3 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h3><p>&emsp;&emsp;在Python中，可以根据关键字if后面的条件判断后的布尔值来选择执行的代码语句。也就是说，if语句相当于中文的“如果A则B”。if语句由保留字if、条件表达式和位于后面的语句组成，条件表达式通常是一个布尔表达式，结果为True或False。如果条件是True，则执行语句并处理其后下一条语句，否则跳过该部分并继续处理if语句的下一条语句。具体逻辑如下：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/11/28/tqR4CKfBvgpbOZD.png"
                      alt="1.png"
                ><br>&emsp;&emsp;在Python中，最简单的if语句的语法格式如下：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 判断条件</span><br><span class="line">    执行语句</span><br></pre></td></tr></table></figure></div>
<p>&emsp;&emsp;上述语法格式的含义是当“判断条件”成立时（非零）执行后面的语句，可以是多行，以缩进来区分同一范围。当条件为假时，跳过其后缩进的语句，其中的条件可以是任意类型表达式。</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 提示用户输入Studio ID</span></span><br><span class="line">x = <span class="built_in">input</span>(<span class="string">&quot;请输入ALp_Studio ID：&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转换为整数</span></span><br><span class="line">x = <span class="built_in">int</span>(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断是否序列号小于3065，如果小于3065，则取负数，然后将其与3065相加，否则不变</span></span><br><span class="line"><span class="keyword">if</span> x &lt; <span class="number">3065</span>:</span><br><span class="line">    x = -x+<span class="number">3065</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;密码是：&quot;</span>, x)</span><br></pre></td></tr></table></figure></div>
<p>&emsp;&emsp;上述代码块实现了一个用于输出用户密码的一个程序。当用户输入序列号之后，将序列号与3065进行比较，如果小于3065，则取负数，然后将其与3065相加，否则不变。假如用户输入5000，则输入5000；假如用户输入3000，则输入2065.</p>
<h3 id="if…else语句"><a href="#if…else语句" class="headerlink" title="if…else语句"></a>if…else语句</h3><p>&emsp;&emsp;在上面的语句中，我们并不能对不符合条件的内容进行处理，所以Python引入了另一种条件语句，即if…else语句。if…else语句的语法基本格式如下：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 判断条件:</span><br><span class="line">    执行语句<span class="number">1</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    执行语句<span class="number">2</span></span><br></pre></td></tr></table></figure></div>
<p>&emsp;&emsp;根据if…else语句的字面意思，在上述语法中，如果满足判断条件，则执行执行语句1，否则执行执行语句2。具体执行流程如下：</p>
<pre class="mermaid">flowchart TD
    A["条件"] -- 成立 --> B("指令1")
    A -- 不成立 --> n1["指令2"]
    B --> n2["Untitled Node"]
    n1 --> n2

    n1@{ shape: rect}
    n2@{ shape: sm-circ}</pre>

<p>&emsp;&emsp;继续复用上面的例子，我们希望当序列号小于3065时，输出“密码是：-x+3065”，否则输出“密码是：x+9063”。则代码块的修改如下</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 提示用户输入Studio ID</span></span><br><span class="line">x = <span class="built_in">input</span>(<span class="string">&quot;请输入ALp_Studio ID：&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转换为整数</span></span><br><span class="line">x = <span class="built_in">int</span>(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断是否序列号小于3065，如果小于3065，则取负数，然后将其与3065相加</span></span><br><span class="line"><span class="keyword">if</span> x &lt; <span class="number">3065</span>:</span><br><span class="line">    x = -x+<span class="number">3065</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果用户输入的大于等于3065，则输出x+9063</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    x = x+<span class="number">9063</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;密码是：&quot;</span>, x)</span><br></pre></td></tr></table></figure></div>
<p>&emsp;&emsp;同样的。print也可以单独分开写。</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 提示用户输入Studio ID</span></span><br><span class="line">x = <span class="built_in">input</span>(<span class="string">&quot;请输入ALp_Studio ID：&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转换为整数</span></span><br><span class="line">x = <span class="built_in">int</span>(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断是否序列号小于3065，如果小于3065，则取负数，然后将其与3065相加</span></span><br><span class="line"><span class="keyword">if</span> x &lt; <span class="number">3065</span>:</span><br><span class="line">    x = -x+<span class="number">3065</span></span><br><span class="line">    <span class="comment"># 输出结果</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;您好，实验体&quot;</span>,x,<span class="string">&quot;，您的密码是：&quot;</span>, x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果用户输入的大于等于3065，则输出x+9063</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    x = x+<span class="number">9063</span></span><br><span class="line">        <span class="comment"># 输出结果</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;您好，二期实验体&quot;</span>,x,<span class="string">&quot;，您的密码是：&quot;</span>, x)</span><br></pre></td></tr></table></figure></div>
<h3 id="嵌套if语句"><a href="#嵌套if语句" class="headerlink" title="嵌套if语句"></a>嵌套if语句</h3><p>&emsp;&emsp;在Python中，在if语句中继续使用if语句的用法成为嵌套if语句。在写法上，嵌套与不嵌套的在形式上只是缩进不同，然后否则写法不同，下面是嵌套if语句的基本格式：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 判断条件<span class="number">1</span>:</span><br><span class="line">    <span class="keyword">if</span> 判断条件<span class="number">2</span>:</span><br><span class="line">        执行语句<span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> 判断条件<span class="number">3</span>:</span><br><span class="line">        执行语句<span class="number">2</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    执行语句<span class="number">3</span></span><br></pre></td></tr></table></figure></div>
<p>&emsp;&emsp;在Python中，嵌套的用法十分强大，可以实现多个嵌套，但是把，我十分不建议嵌套多层，一方面Python毕竟不像C或者C++，执行高效；另一方面，嵌套代码会导致阅读性变差，写的多了不知道自己在写啥。嵌套语句的逻辑关系如下：</p>
<pre class="mermaid">flowchart TD
    n1["Untitled Node"] --> n2["判断条件1"]
    n2 -- Ture --> n4["判断条件1"]
    n2 -- False --> n5["判断条件2"]
    n4 -- Ture --> n6["结果1"]
    n4 -- False --> n7["结果2"]
    n5 -- Ture --> n8["结果3"]
    n5 -- False --> n9["结果4"]
    n6 --> n10["Untitled Node"]
    n7 --> n10
    n8 --> n10
    n9 --> n10

    n1@{ shape: sm-circ}
    n2@{ shape: diam}
    n4@{ shape: diam}
    n5@{ shape: diam}
    n7@{ shape: rect}
    n8@{ shape: rect}
    n9@{ shape: rect}
    n10@{ shape: sm-circ}</pre>

<p>&emsp;&emsp;这边就不举例了，因为只是嵌套了而已。</p>
]]></content>
      <categories>
        <category>Python</category>
        <category>学习日志</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python学习日志07-基础语法学习06</title>
    <url>/posts/a975f408/</url>
    <content><![CDATA[<h2 id="for循环语句"><a href="#for循环语句" class="headerlink" title="for循环语句"></a>for循环语句</h2><p>&emsp;&emsp;在Python中，for循环语句是一种十分重要的程序结构。其特点是，在给定条件成立时，反复执行某段代码，直到条件不成立为止。给定的条件称为循环条件，反复执行的程序段称为循环体。<br>&emsp;&emsp;for循环的基本结构如下：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> iterating_var <span class="keyword">in</span> sequence:</span><br><span class="line">    statements</span><br></pre></td></tr></table></figure></div>
<p>&emsp;&emsp;上述语法中各参数解释如下：</p>
<ul>
<li>iterating_var：表示循环变量</li>
<li>sequence：表示遍历对象，通常是元组、字典和列表等</li>
<li>statements：表示for语句中的循环体，他的执行次数就是遍历对象中值的数量</li>
</ul>
<p>&emsp;&emsp;for循环的逻辑关系如下</p>
<pre class="mermaid">stateDiagram
  direction TB
  [*] --> s1
  s1 --> s2
  s2 --> s3
  s3 --> s4
  s4 --> s1:返回到输入开始下一轮
  s3 --> s5
  s5 --> s6
  s6 --> [*]
  s1:输入
  s2:算法
  s3:判断是否符合范围
  s4:符合
  s5:不符合
  s6:结束循环，输出最终结果</pre>

<p>&emsp;&emsp;比如我们以简单的一个倒计时来说，此时的要求有以下几点：</p>
<ul>
<li>允许用户输入一个数字，表示倒计时的时长；比如输入300，则表示倒计时300秒。</li>
<li>倒计时的时长以秒为单位，每秒输出一次倒计时的剩余时间。</li>
<li>当倒计时结束后，输出“倒计时结束”，并且发出铃声。</li>
</ul>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time  <span class="comment"># 导入时间模块，用于控制程序暂停</span></span><br><span class="line"><span class="keyword">import</span> winsound  <span class="comment"># 导入 winsound 模块，用于播放声音</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">countdown</span>(<span class="params">t</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    def countdown(t):是 Python 中定义一个函数的方式。具体来说：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        - def 是定义函数的关键字。</span></span><br><span class="line"><span class="string">        - countdown 是函数的名称，表示这个函数的作用或功能。</span></span><br><span class="line"><span class="string">        - (t) 括号内的 `t` 是函数的参数，表示调用此函数时需要传入一个值，通常这个值会被用作函数内部操作的数据。</span></span><br><span class="line"><span class="string">    这行代码定义了一个名为 `countdown` 的函数，该函数接受一个参数 `t`。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    countdown：倒计时函数。</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">    t (int): 倒计时的总秒数。</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    此函数会从给定的总秒数开始倒数，每秒更新一次控制台输出，直到倒计时结束。</span></span><br><span class="line"><span class="string">    结束时，它会在控制台打印消息并播放提示音。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> remaining <span class="keyword">in</span> <span class="built_in">range</span>(t, <span class="number">0</span>, -<span class="number">1</span>):  <span class="comment"># 使用 for 循环从 t 到 1 进行倒计时</span></span><br><span class="line">        <span class="comment"># 计算剩余时间的分钟数和秒数</span></span><br><span class="line">        mins, secs = <span class="built_in">divmod</span>(remaining, <span class="number">60</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 将剩余时间格式化为 MM:SS 的形式</span></span><br><span class="line">        timer = <span class="string">&#x27;&#123;:02d&#125;:&#123;:02d&#125;&#x27;</span>.<span class="built_in">format</span>(mins, secs)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 在控制台上打印当前时间，使用 &#x27;\r&#x27; 来在同一行上更新输出</span></span><br><span class="line">        <span class="comment"># &#x27;\r&#x27; 是回车符，它会将光标移回到行首，这样每次打印都会覆盖前一次的输出</span></span><br><span class="line">        <span class="built_in">print</span>(timer, end=<span class="string">&quot;\r&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 暂停程序执行 1 秒钟，模拟每秒的倒计时</span></span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 当循环结束后，倒计时已经完成</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;倒计时结束&#x27;</span>)  <span class="comment"># 在控制台上打印倒计时结束的消息</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 播放提示音，频率为 1000 Hz，持续时间为 1000 毫秒（1 秒）</span></span><br><span class="line">    winsound.Beep(<span class="number">1000</span>, <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 检查当前模块是否是主程序入口</span></span><br><span class="line">    <span class="comment"># 这是为了确保当这个脚本被直接运行时，下面的代码才会被执行</span></span><br><span class="line">    <span class="comment"># 如果这个脚本被其他脚本导入，下面的代码不会被执行</span></span><br><span class="line">    t = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入倒计时时长（秒）：&quot;</span>))  <span class="comment"># 提示用户输入倒计时时长，并将输入的字符串转换为整数</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 调用 countdown 函数，开始倒计时</span></span><br><span class="line">    countdown(t)</span><br></pre></td></tr></table></figure></div>
<p>&emsp;&emsp;简单的运行效果如下，当结束时，就会发出“哔~~”的声音。下面的这个是gif，没有声音，想要试试的同学可以复制上面的代码，然后运行一下。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/12/02/b3NxcRyhZaqMTlv.gif"
                      alt="recording.gif"
                ><br>&emsp;&emsp;其中最重要的便是countdown函数，然后利用for循环定义一个变量remaining，从你输入的数字开始，每秒减一，一直到0，然后发出声音，然后关闭程序。详细的每部分说明如下：</p>
<ol>
<li><p><strong>导入模块</strong>：</p>
<ul>
<li><code>import time</code>: 导入 <code>time</code> 模块，用于控制程序暂停。</li>
<li><code>import winsound</code>: 导入 <code>winsound</code> 模块，用于播放声音。</li>
</ul>
</li>
<li><p><strong>定义 <code>countdown</code> 函数</strong>：</p>
<ul>
<li><code>def countdown(t)</code>: 定义一个名为 <code>countdown</code> 的函数，接受一个参数 <code>t</code>，表示倒计时的总秒数。</li>
<li><code>for remaining in range(t, 0, -1)</code>: 使用 <code>for</code> 循环从 <code>t</code> 到 <code>1</code> 进行倒计时。<code>range(t, 0, -1)</code> 生成一个从 <code>t</code> 到 <code>1</code> 的递减序列。</li>
<li><code>mins, secs = divmod(remaining, 60)</code>: 使用 <code>divmod</code> 函数计算剩余时间的分钟数和秒数。<code>divmod(a, b)</code> 返回一个元组 <code>(a // b, a % b)</code>，即商和余数。</li>
<li><code>timer = &#39;&#123;:02d&#125;:&#123;:02d&#125;&#39;.format(mins, secs)</code>: 使用字符串格式化方法将剩余时间格式化为 <code>MM:SS</code> 的形式。<code>&#39;&#123;:02d&#125;&#39;</code> 表示至少两位数字，不足两位时前面补零。</li>
<li><code>print(timer, end=&quot;\r&quot;)</code>: 在控制台上打印当前时间，使用 <code>\r</code> 回车符将光标移回到行首，这样每次打印都会覆盖前一次的输出。</li>
<li><code>time.sleep(1)</code>: 暂停程序执行 1 秒钟，模拟每秒的倒计时。</li>
</ul>
</li>
<li><p><strong>倒计时结束</strong>：</p>
<ul>
<li><code>print(&#39;倒计时结束&#39;)</code>: 当循环结束后，倒计时已经完成，在控制台上打印倒计时结束的消息。</li>
<li><code>winsound.Beep(1000, 1000)</code>: 播放提示音，频率为 1000 Hz，持续时间为 1000 毫秒（1 秒）。</li>
</ul>
</li>
<li><p><strong>主程序入口</strong>：</p>
<ul>
<li><code>if __name__ == &quot;__main__&quot;</code>: 检查当前模块是否是主程序入口。如果是，则执行下面的代码。</li>
<li><code>t = int(input(&quot;请输入倒计时时长（秒）：&quot;))</code>: 提示用户输入倒计时时长，并将输入的字符串转换为整数。</li>
<li><code>countdown(t)</code>: 调用 <code>countdown</code> 函数，开始倒计时。</li>
</ul>
</li>
</ol>
<p>&emsp;&emsp;此时的这个程序逻辑如下：</p>
<h3 id="流程图详细说明"><a href="#流程图详细说明" class="headerlink" title="流程图详细说明"></a>流程图详细说明</h3><pre class="mermaid">stateDiagram
  direction TB
  [*] --> s7
  s7 --> s8
  s8 --> s9
  s8 --> s10
  s9 --> s1
  s1 --> s11
  s11 --> s12
  s12 --> s13
  s13 --> s14
  s14 --> s15
  s15 --> s16
  s16 --> s17
  s16 --> s18
  s18 --> s20
  s17 --> s19
  s20 --> s22
  s19 --> s21
  s21 --> s23
  s23 --> s24
  s24 --> s25
  s26 --> s27
  s24 --> s26
  s7:导入音频和倒计时模块
  s8:检查当前程序是否为主程序入口
  s9:是，开始运行
  s10:否，退出
  s1:提示用户输入倒计时时长
  s11:读取用户输入并转换成整数类型
  s12:调用countdown函数
  s13:进入函数
  s14:初始化t为用户输入的值
  s15:初始化 t 为用户输入的值
  s16:for 循环开始 (从 t 到 1)
  s17:计算分钟数和秒数
  s18:t 已经为 0
  s20:打印“倒计时结束”
  s19:格式化时间为MM：SS
  s22:播放提示音
  s21:打印时间到控制台
  s23:暂停程序执行 1 秒钟
  s24:减少 t 的值 (t = t - 1)
  s25:返回 for 循环顶部
  s26:跳出循环
  s27:结束</pre>
<ol>
<li><p><strong>开始</strong>：</p>
<ul>
<li>程序启动。</li>
</ul>
</li>
<li><p><strong>导入模块</strong>：</p>
<ul>
<li>导入 <code>time</code> 和 <code>winsound</code> 模块，用于控制程序暂停和播放声音。</li>
</ul>
</li>
<li><p><strong>检查主程序入口</strong>：</p>
<ul>
<li>使用 <code>if __name__ == &quot;__main__&quot;:</code> 检查当前模块是否是主程序入口。</li>
<li>如果是，继续执行；否则，程序结束。</li>
</ul>
</li>
<li><p><strong>提示用户输入倒计时时长</strong>：</p>
<ul>
<li>提示用户输入倒计时时长，并将输入的字符串转换为整数类型。</li>
</ul>
</li>
<li><p><strong>调用 <code>countdown</code> 函数</strong>：</p>
<ul>
<li>调用 <code>countdown</code> 函数，传入用户指定的秒数。</li>
</ul>
</li>
<li><p><strong>进入 <code>countdown</code> 函数</strong>：</p>
<ul>
<li>初始化 <code>t</code> 为用户输入的值。</li>
</ul>
</li>
<li><p><strong>for 循环</strong>：</p>
<ul>
<li>使用 <code>for remaining in range(t, 0, -1)</code> 从 <code>t</code> 到 <code>1</code> 进行倒计时。</li>
<li><strong>计算分钟数和秒数</strong>：<ul>
<li>使用 <code>divmod(remaining, 60)</code> 计算剩余时间的分钟数和秒数。</li>
</ul>
</li>
<li><strong>格式化时间</strong>：<ul>
<li>使用 <code>&#39;&#123;:02d&#125;:&#123;:02d&#125;&#39;.format(mins, secs)</code> 将剩余时间格式化为 <code>MM:SS</code> 的形式。</li>
</ul>
</li>
<li><strong>打印时间到控制台</strong>：<ul>
<li>使用 <code>print(timer, end=&quot;\r&quot;)</code> 在控制台上打印当前时间，使用 <code>\r</code> 回车符在同一行上更新输出。</li>
</ul>
</li>
<li><strong>暂停程序执行 1 秒钟</strong>：<ul>
<li>使用 <code>time.sleep(1)</code> 暂停程序执行 1 秒钟。</li>
</ul>
</li>
<li><strong>减少 <code>t</code> 的值</strong>：<ul>
<li><code>for</code> 循环自动减少 <code>remaining</code> 的值。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>倒计时结束</strong>：</p>
<ul>
<li>当 <code>for</code> 循环结束时，倒计时已经完成。</li>
<li><strong>打印“倒计时结束”</strong>：<ul>
<li>在控制台上打印“倒计时结束”。</li>
</ul>
</li>
<li><strong>播放提示音</strong>：<ul>
<li>使用 <code>winsound.Beep(1000, 1000)</code> 播放提示音，频率为 1000 Hz，持续时间为 1000 毫秒（1 秒）。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>结束</strong>：</p>
<ul>
<li>程序结束。</li>
</ul>
</li>
</ol>
<h2 id="for…else语句"><a href="#for…else语句" class="headerlink" title="for…else语句"></a>for…else语句</h2><p>&emsp;&emsp;与if类似的，for也有一个else语句。在for…else语句中，else中的语句会在循环执行完（即for不是通过break跳出而中断的）的情况下执行。for…else语句的格式如下：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> iterating_var <span class="keyword">in</span> sequence:</span><br><span class="line">    statements1</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    statements2</span><br></pre></td></tr></table></figure></div>
<p>&emsp;&emsp;上述语法中各参数解释如下：</p>
<ul>
<li>iterating_var：表示循环变量</li>
<li>sequence：表示遍历对象，通常是元组、字典和列表等</li>
<li>statements1：表示for语句中的循环体，他的执行次数就是遍历对象中值的数量</li>
<li>statements2：else语句中的statements2，只有在循环正常退出时（遍历完所有遍历对象中的值）执行</li>
</ul>
<p>&emsp;&emsp;举例如下：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义一个数字列表，其中包含一系列整数</span></span><br><span class="line">数字列表 = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 for...else 结构遍历数字列表中的每一个元素</span></span><br><span class="line"><span class="keyword">for</span> 数字 <span class="keyword">in</span> 数字列表:</span><br><span class="line">    <span class="comment"># 在每次迭代中，检查当前数字是否为偶数</span></span><br><span class="line">    <span class="comment"># 偶数的定义是能被2整除且余数为0的数字</span></span><br><span class="line">    <span class="keyword">if</span> 数字 % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="comment"># 如果当前数字是偶数，则打印出找到偶数的消息，并附带偶数的具体值</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;找到了一个偶数: <span class="subst">&#123;数字&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="comment"># 使用 break 语句中断当前的 for 循环，不再继续检查后续的数字</span></span><br><span class="line">        <span class="keyword">break</span>  </span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># 这个 else 块会在 for 循环正常结束（即没有遇到 break）时执行</span></span><br><span class="line">    <span class="comment"># 如果列表中没有任何一个数字是偶数，那么会执行这里的代码块</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;在列表中没有找到偶数。&quot;</span>)</span><br></pre></td></tr></table></figure></div>
<p>&emsp;&emsp;上诉代码的执行效果如下：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">找到了一个偶数: <span class="number">10</span></span><br></pre></td></tr></table></figure></div>
<p>&emsp;&emsp;我们可以在一个for语句中使用另一个for语句，即嵌套fpr循环，这种嵌套式的语法格式如下：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> iterating_var <span class="keyword">in</span> sequence1:</span><br><span class="line">   <span class="keyword">for</span> iterating_var <span class="keyword">in</span> sequence2:</span><br><span class="line">      statements</span><br></pre></td></tr></table></figure></div>
<p>&emsp;&emsp;举例如下：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义一个二维列表，表示一个 3x3 的矩阵</span></span><br><span class="line">矩阵 = [</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],  <span class="comment"># 第一行</span></span><br><span class="line">    [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>],  <span class="comment"># 第二行</span></span><br><span class="line">    [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]   <span class="comment"># 第三行</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用嵌套的 for 循环遍历二维列表中的每一个元素</span></span><br><span class="line"><span class="comment"># 外层循环遍历矩阵的每一行</span></span><br><span class="line"><span class="keyword">for</span> 行 <span class="keyword">in</span> 矩阵:</span><br><span class="line">    <span class="comment"># 内层循环遍历当前行中的每一个元素</span></span><br><span class="line">    <span class="keyword">for</span> 元素 <span class="keyword">in</span> 行:</span><br><span class="line">        <span class="comment"># 打印当前元素，并在元素后面添加一个空格，而不是默认的换行符</span></span><br><span class="line">        <span class="comment"># 这样可以在同一行打印出所有元素</span></span><br><span class="line">        <span class="built_in">print</span>(元素, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="comment"># 当内层循环结束后，打印一个换行符，以便开始打印下一行的元素</span></span><br><span class="line">    <span class="built_in">print</span>()</span><br></pre></td></tr></table></figure></div>
<p>&emsp;&emsp;上述代码的执行效果如下：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> </span><br><span class="line"><span class="number">4</span> <span class="number">5</span> <span class="number">6</span> </span><br><span class="line"><span class="number">7</span> <span class="number">8</span> <span class="number">9</span> </span><br></pre></td></tr></table></figure></div>

<hr>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>&emsp;&emsp;其实，for 循环和 if 语句在某些方面有相似之处，但它们的功能和使用场景不同。for 循环可以自动遍历序列中的每个元素，而 if 语句则用于条件判断。如果要用 if 语句实现循环功能，通常需要嵌套多层代码，这会使得代码变得复杂且难以维护。相比之下，for 循环更为简洁和直观，尽管初次接触时可能会觉得有些难以理解，但通过实践和练习，你会逐渐掌握其用法。<br>&emsp;&emsp;例如，在 for…else 结构中，break 语句的作用可能一开始不太容易理解。但实际上，break 用于在满足某个条件时提前终止循环。以一个简单的例子来说明：假设我们要通过累加 1 来达到目标值 5。一旦累加的结果达到 5，我们就可以使用 break 语句停止循环。如果在累加过程中始终没有达到 5（比如只能加到 3），那么循环会在遍历完所有元素后正常结束，此时 else 块中的代码将会执行。<br>&emsp;&emsp;具体来说，for…else 的工作原理如下</p>
<ul>
<li>for 循环会遍历指定的序列。</li>
<li>如果在循环体内使用了 break 语句并因此提前退出循环，则 else 块不会被执行。</li>
<li>如果循环自然结束（即没有遇到 break 语句），则 else 块中的代码会被执行。</li>
</ul>
<p><br>&emsp;&emsp;这样，for…else 结构提供了一种方便的方式来处理循环结束后的情况，无论是在找到特定条件时提前终止还是在遍历完所有元素后执行一些额外的操作。</p>
]]></content>
      <categories>
        <category>Python</category>
        <category>学习日志</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python实战系列01-RGB转换为Hex</title>
    <url>/posts/46083098/</url>
    <content><![CDATA[<p>&emsp;&emsp;学了学python，写了个小玩意，但是写的一塌糊涂，下载见文章末尾，用到了tk库，已经编译成了exe的可执行文件，拿去玩玩吧。</p>
<hr>
<h2 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示"></a>代码展示</h2><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rgb_to_hex</span>(<span class="params">r, g, b</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;#&#123;:02x&#125;&#123;:02x&#125;&#123;:02x&#125;&quot;</span>.<span class="built_in">format</span>(r, g, b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_valid_input</span>(<span class="params">value</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bool</span>(re.<span class="keyword">match</span>(<span class="string">&quot;^([0-9]|[1-9][0-9]|1[0-9]&#123;2&#125;|2[0-4][0-9]|25[0-5])$&quot;</span>, value))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convert</span>():</span><br><span class="line">    r = entry_r.get()</span><br><span class="line">    g = entry_g.get()</span><br><span class="line">    b = entry_b.get()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> (is_valid_input(r) <span class="keyword">and</span> is_valid_input(g) <span class="keyword">and</span> is_valid_input(b)):</span><br><span class="line">        result_label.config(text=<span class="string">&quot;输入错误，请输入0-255之间的整数&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = <span class="built_in">int</span>(r)</span><br><span class="line">        g = <span class="built_in">int</span>(g)</span><br><span class="line">        b = <span class="built_in">int</span>(b)</span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        result_label.config(text=<span class="string">&quot;转换错误，请输入有效的整数&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    hex_color = rgb_to_hex(r, g, b)</span><br><span class="line">    result_label.config(text=<span class="string">&quot;对应的16进制颜色值为：&quot;</span> + hex_color)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">copy_hex_code</span>():</span><br><span class="line">    root.clipboard_clear()</span><br><span class="line">    root.clipboard_append(result_label.cget(<span class="string">&quot;text&quot;</span>))</span><br><span class="line"></span><br><span class="line">root = tk.Tk()</span><br><span class="line">root.title(<span class="string">&quot;RGB 2 hex&quot;</span>)</span><br><span class="line"></span><br><span class="line">label_r = tk.Label(root, text=<span class="string">&quot;红色值（0-255）：&quot;</span>)</span><br><span class="line">label_r.grid(row=<span class="number">0</span>, column=<span class="number">0</span>)</span><br><span class="line">entry_r = tk.Entry(root)</span><br><span class="line">entry_r.grid(row=<span class="number">0</span>, column=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">label_g = tk.Label(root, text=<span class="string">&quot;绿色值（0-255）：&quot;</span>)</span><br><span class="line">label_g.grid(row=<span class="number">1</span>, column=<span class="number">0</span>)</span><br><span class="line">entry_g = tk.Entry(root)</span><br><span class="line">entry_g.grid(row=<span class="number">1</span>, column=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">label_b = tk.Label(root, text=<span class="string">&quot;蓝色值（0-255）：&quot;</span>)</span><br><span class="line">label_b.grid(row=<span class="number">2</span>, column=<span class="number">0</span>)</span><br><span class="line">entry_b = tk.Entry(root)</span><br><span class="line">entry_b.grid(row=<span class="number">2</span>, column=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">convert_button = tk.Button(root, text=<span class="string">&quot;转换&quot;</span>, command=convert)</span><br><span class="line">convert_button.grid(row=<span class="number">3</span>, column=<span class="number">0</span>, columnspan=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">copy_button = tk.Button(root, text=<span class="string">&quot;复制&quot;</span>, command=copy_hex_code)</span><br><span class="line">copy_button.grid(row=<span class="number">4</span>, column=<span class="number">0</span>, columnspan=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">result_label = tk.Label(root, text=<span class="string">&quot;&quot;</span>)</span><br><span class="line">result_label.grid(row=<span class="number">5</span>, column=<span class="number">0</span>, columnspan=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure></div>
<hr>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>Github：<a class="link"   href="https://github.com/NIGHT2000/RGB2HEX" >https://github.com/NIGHT2000/RGB2HEX<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br>QQ群：813686446</p>
]]></content>
      <categories>
        <category>Python</category>
        <category>实战系列</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python实战系列02-Hex转换为RGB</title>
    <url>/posts/57dc070d/</url>
    <content><![CDATA[<p>&emsp;&emsp;是和实战系列01功能相反的存在，练手玩，不确定会不会更新。</p>
<hr>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hex_to_rgb</span>(<span class="params">hex_color</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">tuple</span>(<span class="built_in">int</span>(hex_color[i:i+<span class="number">2</span>], <span class="number">16</span>) <span class="keyword">for</span> i <span class="keyword">in</span> (<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_valid_input</span>(<span class="params">value</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bool</span>(re.<span class="keyword">match</span>(<span class="string">&quot;^([0-9a-fA-F]&#123;6&#125;)$&quot;</span>, value))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convert</span>():</span><br><span class="line">    hex_color = entry_hex.get()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> is_valid_input(hex_color):</span><br><span class="line">        result_label.config(text=<span class="string">&quot;输入错误，请输入有效的16进制颜色值&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r, g, b = hex_to_rgb(hex_color)</span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        result_label.config(text=<span class="string">&quot;转换错误，请输入有效的16进制颜色值&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    result_label.config(text=<span class="string">&quot;对应的RGB值为：R=&#123;&#125;, G=&#123;&#125;, B=&#123;&#125;&quot;</span>.<span class="built_in">format</span>(r, g, b))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">copy_rgb_code</span>():</span><br><span class="line">    root.clipboard_clear()</span><br><span class="line">    root.clipboard_append(result_label.cget(<span class="string">&quot;text&quot;</span>))</span><br><span class="line"></span><br><span class="line">root = tk.Tk()</span><br><span class="line">root.title(<span class="string">&quot;16进制转RGB&quot;</span>)</span><br><span class="line"></span><br><span class="line">label_hex = tk.Label(root, text=<span class="string">&quot;16进制颜色值（如：FF00FF，无#）：&quot;</span>)</span><br><span class="line">label_hex.grid(row=<span class="number">0</span>, column=<span class="number">0</span>)</span><br><span class="line">entry_hex = tk.Entry(root)</span><br><span class="line">entry_hex.grid(row=<span class="number">0</span>, column=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">convert_button = tk.Button(root, text=<span class="string">&quot;转换&quot;</span>, command=convert)</span><br><span class="line">convert_button.grid(row=<span class="number">1</span>, column=<span class="number">0</span>, columnspan=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">copy_button = tk.Button(root, text=<span class="string">&quot;复制&quot;</span>, command=copy_rgb_code)</span><br><span class="line">copy_button.grid(row=<span class="number">2</span>, column=<span class="number">0</span>, columnspan=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">result_label = tk.Label(root, text=<span class="string">&quot;&quot;</span>)</span><br><span class="line">result_label.grid(row=<span class="number">3</span>, column=<span class="number">0</span>, columnspan=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure></div>
<hr>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>Github：<a class="link"   href="https://github.com/NIGHT2000/Hex2RGB" >https://github.com/NIGHT2000/Hex2RGB<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br>QQ群：813686446</p>
]]></content>
      <categories>
        <category>Python</category>
        <category>实战系列</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python实战系列03-URL的编码与解码</title>
    <url>/posts/cbf0ad6c/</url>
    <content><![CDATA[<p>&emsp;&emsp;被QQ最近那个点击转发的小东西弄感兴趣了，看是MD语法，重点是URL的编码和解码，所以就写了个简单的例子。</p>
<hr>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote, unquote</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encode_text</span>():</span><br><span class="line">    input_text = entry.get()</span><br><span class="line">    encoded_text = quote(input_text)</span><br><span class="line">    result_label.config(text=encoded_text)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decode_text</span>():</span><br><span class="line">    input_text = entry.get()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        decoded_text = unquote(input_text)</span><br><span class="line">        result_label.config(text=decoded_text)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        result_label.config(text=<span class="string">&quot;请输入正确的URL编码内容&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">copy_text</span>():</span><br><span class="line">    root.clipboard_clear()</span><br><span class="line">    root.clipboard_append(result_label.cget(<span class="string">&quot;text&quot;</span>))</span><br><span class="line"></span><br><span class="line">root = tk.Tk()</span><br><span class="line">root.title(<span class="string">&quot;URL编码器&quot;</span>)</span><br><span class="line">root.configure(bg=<span class="string">&quot;#EEE0E5&quot;</span>)</span><br><span class="line"></span><br><span class="line">entry = tk.Entry(root, width=<span class="number">50</span>, bg=<span class="string">&quot;#FFE4C4&quot;</span>)</span><br><span class="line">entry.pack(pady=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">buttons_frame = tk.Frame(root)</span><br><span class="line">buttons_frame.pack(side=<span class="string">&quot;right&quot;</span>, padx=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">encode_button = tk.Button(buttons_frame, text=<span class="string">&quot;编码&quot;</span>, command=encode_text)</span><br><span class="line">encode_button.pack(pady=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">decode_button = tk.Button(buttons_frame, text=<span class="string">&quot;解码&quot;</span>, command=decode_text)</span><br><span class="line">decode_button.pack(pady=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">copy_button = tk.Button(buttons_frame, text=<span class="string">&quot;复制&quot;</span>, command=copy_text)</span><br><span class="line">copy_button.pack(pady=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">result_label = tk.Label(root, text=<span class="string">&quot;&quot;</span>, bg=<span class="string">&quot;#B0E0E6&quot;</span>)</span><br><span class="line">result_label.pack(pady=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure></div>
<hr>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>Github：<a class="link"   href="https://github.com/NIGHT2000/URL-Encoder-decoder" >https://github.com/NIGHT2000/URL-Encoder-decoder<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br>QQ群：813686446</p>
]]></content>
      <categories>
        <category>Python</category>
        <category>实战系列</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python实践系列04-SRT转换为普通LRC</title>
    <url>/posts/f2007e5d/</url>
    <content><![CDATA[<p>&emsp;&emsp;听歌时遇到了这种，B站有CC字幕，WYY没歌词的情况，想把B站的扒下来传到WYY用。</p>
<hr>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 导入所需模块</span></span><br><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk  <span class="comment">## GUI库</span></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> filedialog, messagebox  <span class="comment">## 文件对话框和消息框</span></span><br><span class="line"><span class="keyword">import</span> pysrt  <span class="comment">## 用于处理SRT字幕的库</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 定义SRTtoLRCConverter类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SRTtoLRCConverter</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, master</span>):</span><br><span class="line">        <span class="comment">## 初始化主窗口</span></span><br><span class="line">        <span class="variable language_">self</span>.master = master</span><br><span class="line">        <span class="variable language_">self</span>.master.title(<span class="string">&quot;SRT 到 LRC 转换器&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.master.configure(bg=<span class="string">&quot;#E6E6FA&quot;</span>)  <span class="comment">## 设置主窗口背景色</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">## 初始化变量</span></span><br><span class="line">        <span class="variable language_">self</span>.srt_file_path = <span class="string">&quot;&quot;</span>  <span class="comment">## SRT文件路径</span></span><br><span class="line">        <span class="variable language_">self</span>.lrc_file_path = <span class="string">&quot;&quot;</span>  <span class="comment">## LRC文件路径</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">## 创建文本框和标签</span></span><br><span class="line">        <span class="variable language_">self</span>.srt_textbox = tk.Text(<span class="variable language_">self</span>.master, wrap=<span class="string">&quot;word&quot;</span>, width=<span class="number">50</span>, height=<span class="number">10</span>, bg=<span class="string">&quot;#BEBEBE&quot;</span>)  <span class="comment">## 设置SRT文本框背景色</span></span><br><span class="line">        <span class="variable language_">self</span>.srt_textbox.grid(row=<span class="number">0</span>, column=<span class="number">0</span>, columnspan=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.lrc_textbox = tk.Text(<span class="variable language_">self</span>.master, wrap=<span class="string">&quot;word&quot;</span>, width=<span class="number">50</span>, height=<span class="number">10</span>, bg=<span class="string">&quot;#BEBEBE&quot;</span>)  <span class="comment">## 设置LRC文本框背景色</span></span><br><span class="line">        <span class="variable language_">self</span>.lrc_textbox.grid(row=<span class="number">1</span>, column=<span class="number">0</span>, columnspan=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">## 创建按钮</span></span><br><span class="line">        <span class="variable language_">self</span>.open_srt_button = tk.Button(<span class="variable language_">self</span>.master, text=<span class="string">&quot;打开SRT文件&quot;</span>, command=<span class="variable language_">self</span>.open_srt)  <span class="comment">## 打开SRT文件按钮</span></span><br><span class="line">        <span class="variable language_">self</span>.open_srt_button.grid(row=<span class="number">2</span>, column=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.convert_button = tk.Button(<span class="variable language_">self</span>.master, text=<span class="string">&quot;转换&quot;</span>, command=<span class="variable language_">self</span>.convert)  <span class="comment">## 转换按钮</span></span><br><span class="line">        <span class="variable language_">self</span>.convert_button.grid(row=<span class="number">2</span>, column=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.save_lrc_button = tk.Button(<span class="variable language_">self</span>.master, text=<span class="string">&quot;保存LRC文件&quot;</span>, command=<span class="variable language_">self</span>.save_lrc)  <span class="comment">## 保存LRC文件按钮</span></span><br><span class="line">        <span class="variable language_">self</span>.save_lrc_button.grid(row=<span class="number">3</span>, column=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.save_lrc_entry = tk.Entry(<span class="variable language_">self</span>.master, width=<span class="number">50</span>, bg=<span class="string">&quot;#CDC1C5&quot;</span>)  <span class="comment">## 设置保存路径输入框背景色</span></span><br><span class="line">        <span class="variable language_">self</span>.save_lrc_entry.grid(row=<span class="number">3</span>, column=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">## 打开SRT文件方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">open_srt</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment">## 使用文件对话框打开SRT文件</span></span><br><span class="line">        <span class="variable language_">self</span>.srt_file_path = filedialog.askopenfilename(filetypes=[(<span class="string">&quot;SRT Files&quot;</span>, <span class="string">&quot;*.srt&quot;</span>)])</span><br><span class="line"></span><br><span class="line">        <span class="comment">## 如果选择了文件，读取内容并显示在SRT文本框中</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.srt_file_path:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="variable language_">self</span>.srt_file_path, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                srt_content = f.read()</span><br><span class="line">                <span class="variable language_">self</span>.srt_textbox.insert(<span class="string">&quot;1.0&quot;</span>, srt_content)</span><br><span class="line"></span><br><span class="line">    <span class="comment">## 转换方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">convert</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment">## 检查SRT文件是否已打开</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.srt_file_path:</span><br><span class="line">            messagebox.showerror(<span class="string">&quot;Error&quot;</span>, <span class="string">&quot;请先打开一个SRT文件。&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">## 读取SRT文件内容</span></span><br><span class="line">        subs = pysrt.<span class="built_in">open</span>(<span class="variable language_">self</span>.srt_file_path)</span><br><span class="line">        lrc_content = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">## 遍历SRT字幕，转换为LRC格式</span></span><br><span class="line">        <span class="keyword">for</span> sub <span class="keyword">in</span> subs:</span><br><span class="line">            <span class="comment">## 将时间对象转换为字符串，并按照冒号分割</span></span><br><span class="line">            time_str = sub.start.to_time().strftime(<span class="string">&#x27;%H:%M:%S,%f&#x27;</span>)[:-<span class="number">3</span>]</span><br><span class="line">            hh_mm_ss_ms = time_str.split(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">            hh, mm, ss, ms = <span class="built_in">int</span>(hh_mm_ss_ms[<span class="number">0</span>]), <span class="built_in">int</span>(hh_mm_ss_ms[<span class="number">1</span>]), <span class="built_in">int</span>(hh_mm_ss_ms[<span class="number">2</span>].split(<span class="string">&#x27;,&#x27;</span>)[<span class="number">0</span>]), <span class="built_in">int</span>(hh_mm_ss_ms[<span class="number">2</span>].split(<span class="string">&#x27;,&#x27;</span>)[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">            <span class="comment">## 根据进制累加小时到分钟</span></span><br><span class="line">            mm += hh * <span class="number">60</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">## 保留三位毫秒</span></span><br><span class="line">            ms = <span class="string">f&quot;<span class="subst">&#123;ms:03d&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">## 构建LRC时间格式</span></span><br><span class="line">            lrc_time = <span class="string">f&quot;<span class="subst">&#123;mm:02d&#125;</span>:<span class="subst">&#123;ss:02d&#125;</span>.<span class="subst">&#123;ms&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">## 添加到LRC内容</span></span><br><span class="line">            lrc_content += <span class="string">f&quot;[<span class="subst">&#123;lrc_time&#125;</span>]<span class="subst">&#123;sub.text&#125;</span>\n&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">## 清空LRC文本框并插入转换后的内容</span></span><br><span class="line">        <span class="variable language_">self</span>.lrc_textbox.delete(<span class="string">&quot;1.0&quot;</span>, tk.END)</span><br><span class="line">        <span class="variable language_">self</span>.lrc_textbox.insert(<span class="string">&quot;1.0&quot;</span>, lrc_content)</span><br><span class="line"></span><br><span class="line">    <span class="comment">## 保存LRC文件方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">save_lrc</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment">## 使用文件对话框保存LRC文件</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.lrc_file_path:</span><br><span class="line">            <span class="variable language_">self</span>.lrc_file_path = filedialog.asksaveasfilename(</span><br><span class="line">                defaultextension=<span class="string">&quot;.lrc&quot;</span>,</span><br><span class="line">                filetypes=[(<span class="string">&quot;LRC Files&quot;</span>, <span class="string">&quot;*.lrc&quot;</span>)],</span><br><span class="line">                initialfile=<span class="string">&quot;output.lrc&quot;</span>,</span><br><span class="line">                initialdir=<span class="string">&quot;.&quot;</span>,</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">        <span class="comment">## 如果选择了保存路径，更新输入框并保存内容</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.lrc_file_path:</span><br><span class="line">            <span class="variable language_">self</span>.save_lrc_entry.delete(<span class="number">0</span>, tk.END)</span><br><span class="line">            <span class="variable language_">self</span>.save_lrc_entry.insert(<span class="number">0</span>, <span class="variable language_">self</span>.lrc_file_path)</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="variable language_">self</span>.lrc_file_path, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(<span class="variable language_">self</span>.lrc_textbox.get(<span class="string">&quot;1.0&quot;</span>, tk.END))</span><br><span class="line"></span><br><span class="line"><span class="comment">## 创建Tkinter主窗口</span></span><br><span class="line">root = tk.Tk()</span><br><span class="line"></span><br><span class="line"><span class="comment">## 实例化SRTtoLRCConverter类</span></span><br><span class="line">app = SRTtoLRCConverter(root)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 开始主循环</span></span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure></div>
<hr>
<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>这个仅支持将SRT的 <em><strong>00:00:00,000 –&gt; 00:00:01,000</strong></em> 转换为普通LRC的 <em><strong>[00:00.000]</strong></em> 这种格式，并且将SRT的小时数按60进制累加到分钟上。对于其他版本的LRC或者SRT，可能有问题。</p>
<hr>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>Github：<a class="link"   href="https://github.com/NIGHT2000/SRT2LRC" >https://github.com/NIGHT2000/SRT2LRC<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br>QQ群：813686446</p>
]]></content>
      <categories>
        <category>Python</category>
        <category>实战系列</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python学习日志03-基础语法学习02</title>
    <url>/posts/475bd321/</url>
    <content><![CDATA[<h2 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h2><p>&emsp;&emsp;如果学习过其他编程类语言，就会知道缩进是让代码结构变清晰的重要部分，即使写在同一行内页是正确无误的。但是python不一样，不同的缩进会影响程序的正确性，python要求编写的代码最好全部使用缩进来分层（块）。一般来说，行尾的 <code>“:”</code> 表示下一行代码缩进的开始，即便没有使用括号、分号、大括号等进行语句（块）的分割，通过缩进分层，结构也非常清楚。<br>&emsp;&emsp;python语言规定，缩进只使用空白实现，必须使用四个空格来表示每级缩进。使用Tab字符和其它数目的空格虽然都可以编译通过，但是不符合规范，支持Tab字符和其他数目的空格仅仅是为了兼容旧版本python和某些有问题的编辑器。应确保使用一致的缩进空格，否则编写的程序将会显示错误。</p>
<hr>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>&emsp;&emsp;字符串是python中最常用的数据类型，在python中，字符串可以包含任何字符，包括数字、字母、符号等。字符串通常是由单引号 <code>“&#39;”</code> 、双引号 <code>“&quot;”</code> 、三个单引号或者三个双引号包围一串字符组成。此处所有符号类字符全部都是半角字符。单双引号本质上是相同的，但是当我的字符串中有单引号时，就会变得难以辨认，就要使用<code>转义字符串</code>，如果使用双引号，那可以直接在字符串中书写单引号。例如:</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;Tt&#x27;s my first day in python&quot;</span></span><br><span class="line"><span class="string">&#x27;Can you give me one last &quot;kiss&quot;?&#x27;</span></span><br></pre></td></tr></table></figure></div>
<p>&emsp;&emsp;如果是单引号中使用单引号，就要写成 <code>\&#39;</code> ，例如：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;I\&#x27;m TikaRa.&#x27;</span></span><br></pre></td></tr></table></figure></div>
<p>&emsp;&emsp;以上三个在Python中的运算结果如下，其中第四个没有使用转义字符：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/11/25/wFufM24QrqCJKXi.png"
                      alt="image.png"
                ><br>&emsp;&emsp;在Python中，字符串可以通过序号来取出其中某个字符，类似于Excel中的Mid函数，不同的是，Python的序号是从0开始的，例如：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输入&#x27;asdfghjk&#x27;[3]</span></span><br><span class="line"><span class="string">&#x27;asdfghjk&#x27;</span>[<span class="number">3</span>]</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="string">&#x27;f&#x27;</span></span><br></pre></td></tr></table></figure></div>
<p>&emsp;&emsp;同样的，这些也可以组合使用，整点好玩的。例如：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义变量：text1</span></span><br><span class="line">text1 = <span class="string">&#x27;Tika隶属于&#x27;</span></span><br><span class="line"><span class="comment"># 定义变量：text2</span></span><br><span class="line">text2 = <span class="string">&#x27;ALp_Studio第04期情感企划&#x27;</span></span><br><span class="line"><span class="comment"># 执行输出，并且组合</span></span><br><span class="line"><span class="built_in">print</span>(text1[<span class="number">0</span>:<span class="number">4</span>],text1[<span class="number">5</span>:<span class="number">7</span>],text2[<span class="number">0</span>:<span class="number">10</span>])</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/11/25/Wp4P9tKMRV8IYaX.png"
                      alt="image.png"
                ></p>
<hr>
<h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><p>&emsp;&emsp;我们在前面注释那一块已经提到过了转义字符，在Python中，转义字符用于表示一些特殊字符，通常以反斜杠 <code>\</code> 开头。以下是Python中常用的转义字符及其意义：</p>
<ul>
<li><code>\\</code>：表示一个反斜杠字符。</li>
<li><code>\</code>（在行尾时）：表示一个续航符</li>
<li><code>\&#39;</code>：表示单引号字符。</li>
<li><code>\&quot;</code>：表示双引号字符。</li>
<li><code>\a</code>：发出警告或铃声。</li>
<li><code>\b</code>：退格（Backspace）。</li>
<li><code>\f</code>：换页符（Formfeed）。</li>
<li><code>\n</code>：换行符（Newline）。</li>
<li><code>\r</code>：回车符（Carriage Return）。</li>
<li><code>\t</code>：水平制表符（Tab）。</li>
<li><code>\v</code>：垂直制表符。</li>
<li><code>\000</code>：空</li>
<li><code>\oyy</code>：八进制值，其中 <code>ooo</code> 是一个1到3位的八进制数。</li>
<li><code>\xhh</code>：十六进制值，其中 <code>hh</code> 是一个1到2位的十六进制数。</li>
<li><code>\other</code>：其他的字符以普通形式输出。</li>
</ul>
<p>&emsp;&emsp;有时候我们并不想让其生效，这时候就要用R或者r来定义原始字符串.</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义原始字符串</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">r&#x27;\n\r\a&#x27;</span>)</span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">\n\r\a</span><br></pre></td></tr></table></figure></div>

<hr>
<h2 id="字符串格式化符号"><a href="#字符串格式化符号" class="headerlink" title="字符串格式化符号"></a>字符串格式化符号</h2><p>&emsp;&emsp;Python语言支持格式化字符串的输出功能，虽然这样可能会用到非常复杂的表达式，但是在大多数情况下，，只需要将一个值插入一个字符串格式符 <code>“%”</code> 中即可，常用的字符串格式化符号如下表所示：</p>
<table>
<thead>
<tr>
<th align="center">格式符</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">%c</td>
<td align="center">格式化字符及ASCII码</td>
</tr>
<tr>
<td align="center">%s</td>
<td align="center">格式化字符串</td>
</tr>
<tr>
<td align="center">%d</td>
<td align="center">格式化整数</td>
</tr>
<tr>
<td align="center">%u</td>
<td align="center">格式化无符号整型</td>
</tr>
<tr>
<td align="center">%o</td>
<td align="center">格式化无符号八进制数</td>
</tr>
<tr>
<td align="center">%x</td>
<td align="center">格式化无符号十六进制数</td>
</tr>
<tr>
<td align="center">%X</td>
<td align="center">格式化无符号十六进制数（大写）</td>
</tr>
<tr>
<td align="center">%f</td>
<td align="center">格式化浮点数字，可指定小数点后精度</td>
</tr>
<tr>
<td align="center">%e</td>
<td align="center">格式化科学计数法</td>
</tr>
<tr>
<td align="center">%E</td>
<td align="center">格式化科学计数法</td>
</tr>
<tr>
<td align="center">%g</td>
<td align="center">%f和%e的混合体</td>
</tr>
<tr>
<td align="center">%G</td>
<td align="center">%f和%E的混合体</td>
</tr>
<tr>
<td align="center">%p</td>
<td align="center">十六进制数格式化变量的地址</td>
</tr>
</tbody></table>
<p>&emsp;&emsp;例如：</p>
<div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># %s是格式化字符串</span></span><br><span class="line"><span class="comment"># %d是格式化整数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%s is %d years old.&#x27;</span> % (<span class="string">&#x27;Tika&#x27;</span>, <span class="number">18</span>))</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>Python</category>
        <category>学习日志</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>VRM系列01-VRM转换FBX的若干事项</title>
    <url>/posts/7a433340/</url>
    <content><![CDATA[<p>&emsp;&emsp;最近在群里潜水的时候，看到了有人问VRM如何转换成FBX。我心想，拿BL直接转不就好了，结果有人告诉我不能直接转，会丢贴图，我还不信，去试了一下，结果是真的，然后研究了一下，发现了一个转换的好方法。本方法分两种：正常版和歪门邪道版，可以都看一下然后选择自己喜欢的就行。（截止到写稿，非常不建议使用aplaybox的在线转换，除非你自己能修，也愿意花时间去修）</p>
<hr>
<h2 id="问题查看"><a href="#问题查看" class="headerlink" title="问题查看"></a>问题查看</h2><p>&emsp;&emsp;首先来看一看这个VRM直接转FBX（使用VRM插件直接导入，然后用better FBX勾选复制纹理导出）<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/04/01/qnisZvdej68QTg7.png"
                      alt="导入.png"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/04/01/TKfFzblNd9tOu7H.png"
                      alt="复制纹理better.png"
                ><br>&emsp;&emsp;显而易见的贴图没了，众所周知，FBX允许存储贴图文件，那问题出在哪里呢，不急，我们换到VRM的节点与FBX的对比看看<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/04/01/Z3crOXu7GHidK5R.png"
                      alt="VRM节点.png"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/04/01/VN1vUkXJSK7qBC2.png"
                      alt="FBX节点.png"
                ><br>&emsp;&emsp;非常恐怖的节点，但是可以看出了问题，VRM全部是由MTOON的节点进行渲染，而FBX只有原理化BSDF。那么也就是说，我只要把MTOON的全部换成FBX的就好。</p>
<hr>
<h2 id="正常篇"><a href="#正常篇" class="headerlink" title="正常篇"></a>正常篇</h2><p>&emsp;&emsp;正如上文中所说FBX和VRM节点不同导致的，那么我们只要换节点就好了。导入VRM，然后删节点，把对应节点换过去就好。就像下图这样（为了方便我换几个意思一下就行）<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/04/01/whupi9vJKe576Cb.png"
                      alt="image.png"
                ><br>&emsp;&emsp;然后转换试试<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/04/01/LplYv2cG3gVIPRA.png"
                      alt="image.png"
                ><br>&emsp;&emsp;看起来不错，正常篇就先到这</p>
<hr>
<h2 id="后记（VRM系列）"><a href="#后记（VRM系列）" class="headerlink" title="后记（VRM系列）"></a>后记（VRM系列）</h2><p>&emsp;&emsp;我们在直接连完材质节点后，发现如果说是白模用shader的底色做了修改，那么在此处重连节点会有一定几率变成白模，那么可以将节点连接成这样<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/04/02/B4bvycnxtkGdLhF.png"
                      alt="image.png"
                ><br>&emsp;&emsp;在中间加一个<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/04/02/F2DN7SAPkQigJTn.png"
                      alt="image.png"
                ><br>&emsp;&emsp;然后把你在shader中的HSV什么的复制过来就成<br>&emsp;&emsp;（补充：在测试之后仍有一定几率是白模，所以，可以先去PS之类的直接处理好贴图再塞回来，这样会方便很多）</p>
<hr>
<h2 id="歪门邪道篇（未经测试，BUG有几率）"><a href="#歪门邪道篇（未经测试，BUG有几率）" class="headerlink" title="歪门邪道篇（未经测试，BUG有几率）"></a>歪门邪道篇（未经测试，BUG有几率）</h2><p>&emsp;&emsp;首先呢，我们现将自己的VRM后缀改成 <em><strong>.glb</strong></em> 然后导入。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/04/01/oRKgC6AmNZUy3af.png"
                      alt="image.png"
                ><br>&emsp;&emsp;这下所有的MTOON节点就换掉了，然后，我们在这里选择解包资源，<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/04/01/VWPqOb5tUaMs4hv.png"
                      alt="image.png"
                ><br>&emsp;&emsp;在弹出选项里选择第二个，这样我们就能在Blender根目录下找到一个 <em><strong>textures</strong></em> 的文件夹，这个是贴图文件夹。如果找不到，推荐使用everything搜一下<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/04/01/Iehqnx1QOyBXNgM.png"
                      alt="image.png"
                ><br>&emsp;&emsp;接下来我们回到BL，找到脚本，，然后下载这个脚本</p>
<pre><code>https://github.com/LadyAska/Blender

这个脚本的用途是用于在Blender中自动化材质设置的Python脚本。它遍历所有的材质，如果材质使用了节点系统，它会进行一些操作来修改这些材质。

首先，它定义了一些变量，包括mixshader（混合着色器节点）、transparent（透明BSDF节点）、light（光线路径节点）、emission（发射节点）、image（纹理图像节点）和output（输出材质节点）。

然后，它检查是否存在mixshader和output节点，如果不存在，则跳过当前循环。

接下来，它创建一个新的&quot;Principled BSDF&quot;节点，并移除image、light和emission节点的输出链接。

然后，它将image节点的输出连接到新创建的principled节点的输入，并将principled节点的输出连接到output节点的输入。

最后，它移除了unnecessary的节点，包括mixshader、transparent、light和emission节点。

在最后一部分，它尝试将所有的图片文件的路径设置为&#39;C:/Blender/textures/*.png&#39;，如果出现异常，则忽略。&lt;br&gt;&amp;emsp;&amp;emsp;
</code></pre>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/04/01/CGjQeq1AJtHhN64.png"
                      alt="image.png"
                ><br>&emsp;&emsp;点脚本，然后点打开，然后把刚才下载的PY文件塞进来<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/04/01/j2hRrPeZH4qFmJl.png"
                      alt="image.png"
                ><br>&emsp;&emsp;点一下那个播放按钮就可以批量转换材质了<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/04/01/ftiyQajSCkJN2sl.png"
                      alt="image.png"
                ><br>&emsp;&emsp;导出配置和我的一样就行，基本就木有啥问题啦~</p>
<hr>
<h2 id="后记（glb系列）"><a href="#后记（glb系列）" class="headerlink" title="后记（glb系列）"></a>后记（glb系列）</h2><h3 id="BUG修复01"><a href="#BUG修复01" class="headerlink" title="BUG修复01"></a>BUG修复01</h3><p>&emsp;&emsp;进过多次测试后，我发现，如果说是VROID的shader底色那一块做了修改，而模型贴图没改，那么打包出来的贴图也是没有shader的（也就是原始贴图之类的）。然后在glb那一块批量处理完之后我发现了一个节点<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/04/01/TkaRSZ8qfuzBrIv.png"
                      alt="image.png"
                ><br>&emsp;&emsp;又在用miu老师的Vroid2Pmx做转换时，看到了这么一句话<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/04/01/5bZyDokOifNdT8t.png"
                      alt="截图.png"
                ></p>
<pre><code>**WARNING**
由于基本颜色不是白色，因此执行加法合成。材料名称:NO0_001_01_Bottoms_01_CLOTH
</code></pre>
<p>&emsp;&emsp;突然就明白了这个东西，将原始图一改成图二后<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/04/01/x9AWKlvJRICufZT.png"
                      alt="image.png"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/04/01/EejkGX1SFOAhrcJ.png"
                      alt="image.png"
                ><br>&emsp;&emsp;原始的白模也就修复成功了</p>
<h3 id="BUG修复02"><a href="#BUG修复02" class="headerlink" title="BUG修复02"></a>BUG修复02</h3><p>&emsp;&emsp;针对于此处的白模，还有一种处理方式就是修改贴图，因为在miu老师的Vroid2Pmx中就是做了加法合成，那么我们可以在提取好贴图之后去PS之类的重新正片叠底一下颜色，此处这个为最后处理办法，将处理好的贴图再去BL贴一下，但是会比较麻烦。</p>
]]></content>
      <categories>
        <category>MMD</category>
        <category>MMD 教程</category>
        <category>VRM教程系列</category>
      </categories>
      <tags>
        <tag>VRM</tag>
        <tag>FBX</tag>
      </tags>
  </entry>
  <entry>
    <title>VRM系列02-PMX的VRM转化方案</title>
    <url>/posts/93a98ac8/</url>
    <content><![CDATA[<p>&emsp;&emsp;是我习惯性的PMX转为VRM方案，用到了Unity，虽然有人说Blender插件也能做，但是我不习惯用Blender，于是用了Unity。本教程基于Windows10系统，不同系统或是软件版本间差异请自行百度，同时，此教程是我个人的方案展示，请自行斟酌是否适用。 <em><strong>还有就是，请一定要遵守原作者的RM！！！！！</strong></em></p>
<hr>
<p>&emsp;&emsp;【附加】：截止到写稿，非常不建议使用aplaybox的在线转换，除非你自己能修，也愿意花时间去修，展示如下，图一是Blender中的渲染，可以见到miku的表情有问题，图二是VSeeFace，可以见到透明关系有问题：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/06/10/Jt4RmPG1inzVso5.png"
                      alt="无修改转换展示01.png"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/06/10/GqdHf53KJPsVMx1.png"
                      alt="无修改转换展示02.png"
                ><br>&emsp;&emsp;综上，如果你非常有耐心，去一点一点修复，也不是不能用，但你有那功夫，还不如把教程看完<br>&emsp;&emsp;【附加2】：针对下文中没有secondary的情况，据我了解后得知是我操作顺序有误，secondary是VRM的，所以，建议的操作流程是，修改完贴图着色之后就导出一遍VRM，然后再导入，然后再在这个VRM基础之上修正物理和表情，导出的方法下文表情修正前有，可以翻翻自己看。在修改物理前如果没有导出VRM，那就不会有secondary，所以，导出VRM，再导入，这样，就会有secondary了。不建议自己添加secondary组。 <em><strong>综上，操作步骤建议是第一步——第二步——第四步——第三步——第五步——第四步。不建议自己添加secondary组！！第一遍第三步之后导入VRM，那时候就有了Secondary，就不用创建了！！！！</strong></em></p>
<hr>
<h2 id="Stuff"><a href="#Stuff" class="headerlink" title="Stuff"></a>Stuff</h2><p>&emsp;&emsp;Model：REM’s SEKAI Style Hatsune Miku VS - ver.1.2<br>&emsp;&ensp;&emsp;&emsp;By：REMmaple<br>&emsp;&emsp;Model：YYB Hatsune Miku_10th<br>&emsp;&ensp;&emsp;&emsp;By：REMmaple<br>&emsp;&ensp;&emsp;&emsp;Tex Editor：三雾</p>
<hr>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>&emsp;&emsp;1、<a class="link"   href="https://unity.cn/" >Unity<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>：版本均可，只要与所使用的UniVRM插件所兼容即可<br>&emsp;&ensp;&emsp;&emsp;&emsp;&emsp;&emsp;（建议同时注册好UnityID方便后续使用）<br>&emsp;&emsp;2、<a class="link"   href="https://github.com/vrm-c/UniVRM" >UniVRM<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>：最新版就好<br>&emsp;&emsp;3、<a class="link"   href="http://stereoarts.jp/" >MMD4Mecanim<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>：同样是最新版就好<br>&emsp;&emsp;4、<a class="link"   href="https://kkhk22.seesaa.net/category/14045227-1.html" >PmxEditor<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>：非必须，用来修改和检查PMX有没有错误<br><br>&emsp;&emsp;此处所有的下载链接均是官方网址，若下载困难，此处可以提供截止到写稿为止windows平台最新版本软件或是我用的版本的百度网盘的下载方式，其中UnityHub和Unity这两个东西，就相当于游戏启动器和游戏本体的关系大致，选择一个下载即可。当然，我更推荐于UnityHub，可以免去引擎安装时的BUG，并且修改和创建新项目都很方便。</p>
<h3 id="资源包下载："><a href="#资源包下载：" class="headerlink" title="资源包下载："></a>资源包下载：</h3><p>&emsp;&emsp;<a class="link"   href="https://pan.baidu.com/s/187sXRmK9fsmKL3Ad-U6C6A?pwd=rwa7" >点击下载<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<hr>
<h2 id="关于准备项目的一些附加事项"><a href="#关于准备项目的一些附加事项" class="headerlink" title="关于准备项目的一些附加事项"></a>关于准备项目的一些附加事项</h2><p>&emsp;&emsp;1、关于Unity的版本：<br>&emsp;&ensp;&emsp;&emsp;版本必修与插件适配，像是UniVRM插件版本介绍页中写道 <em><strong>“The UniVRM supports Unity 2021.3 LTS or later.”</strong></em> 则是要求版本必须2021.3长期支持版及之后的版本。故在选择是切记选择合适的版本。<br>&emsp;&emsp;2、关于UniVRM的版本：<br>&emsp;&ensp;&emsp;&emsp;因为VRM现在有0.x和1.0两个版本，所以本插件也有两个版本。</p>
<pre><code>VRM 1.0：
VRM_Samples
VRM 0.x：
UniVRM_Samples
</code></pre>
<p>&emsp;&ensp;&emsp;&emsp;所以请根据自己需要下载（我一般是都下载，两个插件不冲突）<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/06/10/NumwoEnAQgzlUpK.png"
                      alt="image.png"
                ></p>
<hr>
<h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><h3 id="emsp-emsp-第一步：新建Unity项目以及骨骼修复"><a href="#emsp-emsp-第一步：新建Unity项目以及骨骼修复" class="headerlink" title="&emsp;&emsp;第一步：新建Unity项目以及骨骼修复"></a>&emsp;&emsp;第一步：新建Unity项目以及骨骼修复</h3><p>&emsp;&emsp;选择 <em><strong>“3D-核心模板”</strong></em> ，按图示填写后，点击 <em><strong>“创建项目”</strong></em><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/06/10/trY4cvApKI6f5yQ.png"
                      alt="image.png"
                ><br>&emsp;&emsp;等他自己初始化项目完成，完成后会自动打开，没自动打开的话可以自己点一下<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/06/10/fKPUdhQy35qRDVg.png"
                      alt="image.png"
                ><br>&emsp;&emsp;打开项目之后会有这个界面<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/06/10/zIer6cVGiWHDlUp.png"
                      alt="image.png"
                ><br>&emsp;&emsp;将我们下载的插件一个一个拖进来安装好（插件后缀是.unitypackage）<br>&emsp;&emsp;UniVRM.unitypackage这个拖进去会打开这个界面，点击全部后点击导入即可<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/06/10/5Qo49aPDMvilswH.png"
                      alt="image.png"
                ><br>&emsp;&emsp;VRM.unitypackage这个拖进去会打开这个界面，点击全部后点击导入即可（注：不管是否勾选，点一下全部点击导入就好）<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/06/10/7tigUvqQr2maVj4.png"
                      alt="Clip_2024-06-10_12-14-47.png"
                ><br>&emsp;&emsp;MMD4Mecanim.unitypackage这个拖进去会打开这个界面，点击全部后点击导入即可<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/06/10/aZUwLNpcxfXAiIK.png"
                      alt="Clip_2024-06-10_12-20-15.png"
                ><br>&emsp;&emsp;出现这个点击“yes”即可<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/06/10/pzXyuG9OEBQoRfN.png"
                      alt="image.png"
                ><br>&emsp;&emsp;然后右键新建两个文件夹来放我们的模型，一个放MMD模型，另一个放导出的VRM模型<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/06/10/tln1WACVZS8M2f9.png"
                      alt="image.png"
                ><br>&emsp;&emsp;然后双击打开我们存放MMD模型的文件夹，把我们需要修改的模型包括贴图一整个文件夹塞进去，这时文件架构就变成了</p>
<pre><code>Assets
    ├─Mode-MMD
    │  └─REM式プロセカ風初音ミクVS - ver.1.2
    │      └─REM&#39;s SEKAI Style Hatsune Miku VS - ver.1.2
    │          └─REM&#39;s SEKAI Style Hatsune Miku VS - ver.1.2
    │              ├─albd
    │              ├─omake
    │              └─spt
</code></pre>
<p>&emsp;&emsp;熟悉REM式的MIKU这个模型的同学，就可以看出来，把这个拖进来就是把REM式MIKU这所有的文件夹直接塞在了Assets文件夹下我们刚刚创建的存放MMD模型的文件夹下。<br>&emsp;&emsp;然后找到我们的PMX模型<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/06/10/G6v5QdJy3EpgO2W.png"
                      alt="image.png"
                ><br>&emsp;&emsp;此时我们要用REM式プロセカ風初音ミクVS.pmx这个模型来创建VRM，所以我们点击同名的REM式プロセカ風初音ミクVS_袖無し.MMD4Mecanim.asset，就是模型后面那个蓝色的立方体图标的那个文件。（图片中选中的那个文件），在右边打开的信息窗中，首先 <em><strong>阅读模型声明</strong></em> ，然后把下面三个可选项都勾选。然后点击 <em><strong>Argee</strong></em><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/06/10/MWiE68v1oInP7qa.png"
                      alt="image.png"
                ><br>&emsp;&emsp;在下面这个窗口中点 <em><strong>Process</strong></em><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/06/10/AGMt3Ss5qLbBzIZ.png"
                      alt="image.png"
                ><br>&emsp;&emsp;会出现这个窗口，不用管，等一小会，他会自己关掉，然后Unity会开始走进度条，继续等一下<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/06/10/dvIGslJPb2joaKy.png"
                      alt="image.png"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/06/10/BwzxQs6C8ePrXpg.png"
                      alt="image.png"
                ><br>&emsp;&emsp;然后我们的资产管理器就多了一堆东西<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/06/10/nxVGXf1O3jWdpP5.png"
                      alt="image.png"
                ><br>&emsp;&emsp;接下来我们把那个带一个看起来像播放键的东西塞到我们的层级里面，这样你就发现了我们屏幕中出现了一只MIKU，如下图：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/06/10/m64pTjay7sPNLk5.png"
                      alt="image.png"
                ><br>&emsp;&emsp;然后点击 <em><strong>Rig</strong></em> ，选择 <em><strong>人型</strong></em><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/06/10/hZROS9MboqXaHJv.png"
                      alt="Clip_2024-06-10_13-42-42.png"
                ><br>&emsp;&emsp;然后点击 <em><strong>应用</strong></em><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/06/10/UDemZrMx3nSBEJw.png"
                      alt="Clip_2024-06-10_13-44-14.png"
                ><br>&emsp;&emsp;等他走完进度条之后点 <em><strong>配置</strong></em>，然后点 <em><strong>配置 Avatar</strong></em><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/06/10/MX8SuTIyctxZghO.png"
                      alt="image.png"
                ><br>&emsp;&emsp;在这个界面里，对关节处的骨骼做一个校正（就是，点一下小绿人身上的每一个圈圈，看看模型是否对应到，比如点小绿人的左肩，看看骨骼是否对应到MIKU的左肩，不对的点击列表修改就行，没有对应的就选最上面的None）<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/06/10/EjeDihCp5WqA86t.png"
                      alt="image.png"
                ><br>对应完之后往下翻一下，先点击 <em><strong>Apply</strong></em> ，再点击 <em><strong>Done</strong></em><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/06/10/C2OqisXPWNUVnjZ.png"
                      alt="image.png"
                ></p>
<h3 id="emsp-emsp-第二步：材质修复"><a href="#emsp-emsp-第二步：材质修复" class="headerlink" title="&emsp;&emsp;第二步：材质修复"></a>&emsp;&emsp;第二步：材质修复</h3><p>&emsp;&emsp;但是看起来衣服的颜色还有肤色什么的有点小差别，unity中有点偏黄（大概<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/06/10/QrkMuzi62cyJmwW.png"
                      alt="image.png"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/06/10/OdFIgQKa8ycfn2T.png"
                      alt="image.png"
                ><br>&emsp;&emsp;接下来解释调整材质的时间了，先来到 <em><strong>Materials</strong></em> 文件夹下<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/06/10/nCriu5zsR6g9vU4.png"
                      alt="image.png"
                ><br>&emsp;&emsp;首先全选材质，然后在 <em><strong>Shader</strong></em> 中选择 <em><strong>VRM</strong></em>，然后再选择 <em><strong>MTOON</strong></em><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/06/10/Od3vcKgPsRyfakY.png"
                      alt="image.png"
                ><br>&emsp;&emsp;然后根据MMD中的模型细节进行调整就好，每一项参数和每一个材质都可以单独实施（说不定会碰撞到不一样的火花）<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/06/10/WpT8BrsJxV6IDLe.png"
                      alt="image.png"
                ><br>&emsp;&emsp;基础参数讲解如下：</p>
<pre><code>Rendering：渲染
  Mode：模式
    Rendering Type：渲染类型
      Opaque：不透明
      Cutout：剪切
      Transparent：透明
      TransparentWithZWrite：使用ZWrite透明
    Cull Mode：关于透明的遮挡方式（我自己感觉
      Back：背面剔除
      Front：正面剔除 
      Off：关闭
  Color：颜色
    Texture：纹理
      Lit Color,Alpha：发光色彩，透明
      Shade Color：阴影颜色
  Lighting：光照
    Shading Toony：TOONY 着色
    Normal Map：法线映射
  Emission：发光
    MatCap：球面朝向映射
  Rim：边缘光
    Color：边缘光颜色
    Lighting Mix：光照混合
    Fresnel Power：菲涅耳功率
    Lift：提升
  OutLine：轮廓线
    Width：宽度
      mode：模式
        None：没有一个
        WorldCoordinates：世界坐标
        ScreenCoordinates：屏幕坐标
    Color：颜色
</code></pre>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/06/10/3o7hZIeiY9NKPxG.png"
                      alt="image.png"
                ></p>
<h3 id="emsp-emsp-第三步：物理修复"><a href="#emsp-emsp-第三步：物理修复" class="headerlink" title="&emsp;&emsp;第三步：物理修复"></a>&emsp;&emsp;第三步：物理修复</h3><p>&emsp;&emsp;接下来就是调整一些细节了，比如：物理<br>&emsp;&emsp;展开层级下的 <em><strong>U_Char</strong></em> 选择 <em><strong>secondary</strong></em> ，<del>若没有，自己创建一个对象与这个同名也行</del> <em><strong>这里先导出VRM，再导入VRM！！！！</strong></em><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/06/10/y3Qb5ZEtJuhSYCg.png"
                      alt="image.png"
                ><br>&emsp;&emsp;接下来我们先做头发之类的物理效果，选择第一个后会出现这样的东西<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/06/10/IPrYmcnfHNpkt68.png"
                      alt="image.png"
                ><br>&emsp;&emsp;基础参数讲解：</p>
<table>
<thead>
<tr>
<th>原文</th>
<th>翻译</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>注释</td>
<td>注释</td>
<td>用来写名字之类的</td>
</tr>
<tr>
<td>Gizmo Color</td>
<td>修改器颜色</td>
<td>用来看那个碰撞球的颜色</td>
</tr>
<tr>
<td>Settings</td>
<td>设置</td>
<td>就，，设置</td>
</tr>
<tr>
<td>Stiffness Force</td>
<td>刚度力</td>
<td>感觉像MMD的阻尼那种东西，这个值越大，越不容易被触发物理效果</td>
</tr>
<tr>
<td>Gravity Power</td>
<td>重力功率</td>
<td>重力大小，相同质量的东西，越大掉的越快</td>
</tr>
<tr>
<td>Gravity Dir</td>
<td>重力方向</td>
<td>就。。方向</td>
</tr>
<tr>
<td>Drag Force</td>
<td>阻力</td>
<td>个人感觉也和阻尼差不多诶。。。</td>
</tr>
<tr>
<td>中心</td>
<td>中心</td>
<td>不知道咋描述，自己试试</td>
</tr>
<tr>
<td>Root Bones</td>
<td>根骨骼</td>
<td>就是想让哪些骨骼产生物理效果</td>
</tr>
<tr>
<td>Collision</td>
<td>碰撞</td>
<td>碰撞球</td>
</tr>
<tr>
<td>Hit Radius</td>
<td>命中半径</td>
<td>碰撞球的大小</td>
</tr>
<tr>
<td>Collider Groups</td>
<td>碰撞器组</td>
<td>与骨骼产生交互的地方</td>
</tr>
<tr>
<td>Update Type</td>
<td>更新类型</td>
<td>不建议动</td>
</tr>
</tbody></table>
<p>&emsp;&emsp;小提示：对于那种父子级相联系的一串骨骼，直接把父级塞到Root Bones中就行，子级不用设置，这样一大串就做完了，如下图所示<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/06/10/e6oDryZBQYp18ES.png"
                      alt="image.png"
                ><br>&emsp;&emsp;其余你们自己添加，然后设置参数就好，然后按下图所示的步骤应用参数。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/06/10/EOnXj6VsFMRguyS.png"
                      alt="image.png"
                ><br>&emsp;&emsp;接下来设置四肢之类的碰撞体积<br>&emsp;&emsp;选中我们要添加的骨骼，我这里以腿为展示，添加组件，选择成 <em><strong>VRM Spring Bone Collider Group</strong></em> ，然后就会有下图<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/06/10/kz4HU8YhPZA7Dnt.png"
                      alt="image.png"
                ><br>&emsp;&emsp;之后就添加碰撞球啊，调整大小和位置啊什么的，由于骨骼长度问题，而这个也只有球状的碰撞，所以难免会在一个骨骼上添加多个球，添加球的逻辑为：尽量不要重复，稍微大于材质表面一点点就好，球与球之间尽量不要有重叠部分，然后继续和上一步一样，应用参数。但是此刻那个黄色的物理和这个紫色的碰撞体积之间依旧不会发生交互，所以需要设置一下，回到需要和这个紫色球发生碰撞的组，就刚才设置了黄色球的地方，把我们的设置了紫色球的骨骼拖到Collider Groups上面即可。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/06/10/Km1zABTqSWtkoab.png"
                      alt="image.png"
                ></p>
<h3 id="emsp-emsp-第四步：导出与再次导入"><a href="#emsp-emsp-第四步：导出与再次导入" class="headerlink" title="&emsp;&emsp;第四步：导出与再次导入"></a>&emsp;&emsp;第四步：导出与再次导入</h3><p>&emsp;&emsp;处理好这些就可以先导出一遍了（导出之后才可以做表情），导出先选中模型，然后点VRM0，然后如果是Apose，就点一下这个TPOSE（不管是不是Apose，其实都建议点一遍）<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/06/10/TGnlcbf8BQ3gXoF.png"
                      alt="image.png"
                ><br>&emsp;&emsp;然后点Export VRM0.X，在弹出的窗口中如实填写信息，我用YYB 10th MIKU演示如下：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/06/10/XvGe2HJUcibWO4l.png"
                      alt="image.png"
                ><br>&emsp;&emsp;其余例如缩略图等按照自己喜好便可，填写完成之后点最下面export即可，然后等待一段时间，就可以看到导出的模型了。<br>&emsp;&emsp;将层级中的模型删掉。把导出的VRM继续塞到 <em><strong>Assets</strong></em> 中，然后把这个拖到层级那里。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/06/10/wbnvOZMeqmdSE1j.png"
                      alt="image.png"
                ><br>&emsp;&emsp;这样就导入成功了</p>
<h3 id="emsp-emsp-第五步：修复表情"><a href="#emsp-emsp-第五步：修复表情" class="headerlink" title="&emsp;&emsp;第五步：修复表情"></a>&emsp;&emsp;第五步：修复表情</h3><p>&emsp;&emsp;然后找到名字中含有BlendShapes的文件夹，比如此刻我的就是YYB Hatsune Miku_10th_v1.02_toonchange.BlendShapes，打开之后会看到这种东西。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/06/10/IDdtrHbRv7LgWYB.png"
                      alt="image.png"
                ><br>&emsp;&emsp;选中BlendShape，将AEIOU这几个表情在下面对应修一下，对应表情，比如点一下“A”，然后在U_Char_2里面把あ拉倒最大，然后IUEO等等，口型必须其余看心情，流程如下：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/06/10/nPK5kThbXwIH2yq.png"
                      alt="image.png"
                ><br>&emsp;&emsp;这些做完之后就完了，就可以到出啦~ 导出方法和刚才一样，这里就不再写啦~~ 祝各位玩得愉快</p>
<hr>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>&emsp;&emsp;1、如何添加许可证：<br>&emsp;&ensp;&emsp;&emsp;首先在UnityHub上登录你的账号，如果是第一次使用，大概率会出现如下所示，如果没有下图一的图示，请参照本步骤后续几张图，打开许可证界面后从第二步开始继续操作<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/06/10/tT72RAr8v4ZeJMm.png"
                      alt="image.png"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/06/10/dORryQaIGixzLeg.png"
                      alt="image.png"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/06/10/Sn6coi8sdZw1x47.png"
                      alt="image.png"
                ><br>&emsp;&ensp;&emsp;&emsp;点击 <em><strong>管理许可证</strong></em> ，再打开的窗口中点击 <em><strong>添加</strong></em><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/06/10/3e8VdOLIfNUukph.png"
                      alt="image.png"
                ><br>&emsp;&ensp;&emsp;&emsp;点击 <em><strong>获取免费的个人版许可证</strong></em><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/06/10/daNgETMYDwKb7LR.png"
                      alt="image.png"
                ><br>&emsp;&ensp;&emsp;&emsp;点击 <em><strong>同意并取得个人版授权</strong></em><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/06/10/kvgCVXGbaUwNiyj.png"
                      alt="image.png"
                ><br>&emsp;&emsp;2、遇到无法创建项目的情况，尝试取消勾选版本管理<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/06/10/MHayECXigFKjeIN.png"
                      alt="image.png"
                ><br>&emsp;&emsp;3、如果在配置骨骼时遇到如下报错，并且点击配置没有任何反应</p>
<pre><code>Cannot configure avatar, inspector is locked
UnityEngine.GUIUtility:ProcessEvent (int,intptr,bool&amp;)
</code></pre>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/06/10/qhv5gducpmso9Kx.png"
                      alt="Clip_2024-06-10_18-59-18.png"
                ><br>&emsp;&emsp;可以把这个锁点一下，然后就正常了<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/06/10/bwdjZaTg56VGLkf.png"
                      alt="Clip_2024-06-10_19-04-13.png"
                ></p>
]]></content>
      <categories>
        <category>MMD</category>
        <category>MMD 教程</category>
        <category>VRM教程系列</category>
      </categories>
      <tags>
        <tag>VRM</tag>
        <tag>PMX</tag>
      </tags>
  </entry>
  <entry>
    <title>MMD教程系列01-如何建造一个镂空的多边体</title>
    <url>/posts/14648/</url>
    <content><![CDATA[<p>&emsp;&emsp;最近在到处水群的时候，看到了一位热衷于复刻PJSK的MV的群友<a class="link"   href="https://space.bilibili.com/104696950" >诺耶耶<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>。在做MMD的时候遇到了一些小问题，所以我去试了试，然后感觉还不错，然后写了这个做镂空多边体的教程。请注意，此处并不是真正意义上的镂空，而是伪造的，所以当你使用某些会把透明通道关闭的渲染时，会穿帮。</p>
<hr>
<h2 id="STUFF："><a href="#STUFF：" class="headerlink" title="STUFF："></a>STUFF：</h2><h3 id="TOOL："><a href="#TOOL：" class="headerlink" title="TOOL："></a>TOOL：</h3><p>&emsp;&emsp;1、Metasequoia4_Ver.4.8.3b<br>&emsp;&emsp;2、GIMP_Ver_2.10.34<br>&emsp;&emsp;3、MikuMikuDance_Ver_926<br>&emsp;&emsp;4、PmxEditor_0273</p>
<h3 id="MODEL"><a href="#MODEL" class="headerlink" title="MODEL:"></a>MODEL:</h3><p>&emsp;&emsp;ぴるら式星界&emsp;&emsp;modeler: PilouLaBaka</p>
<hr>
<h2 id="如何建造一个镂空的多边体"><a href="#如何建造一个镂空的多边体" class="headerlink" title="如何建造一个镂空的多边体"></a>如何建造一个镂空的多边体</h2><h3 id="模型建造篇"><a href="#模型建造篇" class="headerlink" title="模型建造篇"></a>模型建造篇</h3><p>&emsp;&emsp;首先我在Metasequoia4里面建造了一个块块，然后选择一侧顶点放在一起，为什么没有合并呢，因为这样建造完他的UV还是一个方块，不是三角形，这样我画贴图就会很方便。至于为什么是Metasequoia4呢，是因为我用习惯了，包括导出UV贴图等，可以根据自己情况选择，比如PE的创建简易物体，然后用UV导出插件导出一张UV，此处记着UV图必须是带透明通道的格式。具体步骤见下：</p>
<h3 id="视频版"><a href="#视频版" class="headerlink" title="视频版"></a>视频版</h3><iframe src="https://www.acfun.cn/player/ac43645857" width="768" height="432" frameborder="0" allowfullscreen></iframe>

<h3 id="图文版"><a href="#图文版" class="headerlink" title="图文版"></a>图文版</h3><p>&emsp;&emsp;第一步：打开Metasequoia4。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/26/PfRNyJgxOUB6971.jpg"
                      alt="1.jpg"
                ><br>&emsp;&emsp;第二步：选择 <em><strong>“基本图形”</strong></em> ，在新打开的窗口中选择 <em><strong>“立方体”</strong></em> ，点击 <em><strong>生成</strong></em>。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/26/P6D7oYLsu4gGcQX.jpg"
                      alt="2.jpg"
                ><br>&emsp;&emsp;第三步：选择一侧顶点（图中绿色的顶点），选择缩放，在新打开的窗口中输入 <em><strong>0</strong></em> ，点击 <em><strong>OK</strong></em>。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/26/xZFLY7eE91DRpCn.jpg"
                      alt="3.jpg"
                ><br>&emsp;&emsp;然后就可以得到一个四棱锥。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/26/LgrykZiVSXFDzhJ.jpg"
                      alt="4.jpg"
                ><br>&emsp;&emsp;第四步：点击 <em><strong>左上角</strong></em> 那个 <em><strong>模型（字符）</strong></em> 大框框，在下拉选框中选择 <em><strong>导出UV贴图</strong></em> ，然后点击 <em><strong>展开</strong></em> ，之后大概率能够得到一个绿色的四边形和你的四棱锥，如果没有，在 <em><strong>视图窗的左上角选中展开图和物体</strong></em> ，如图中 <em><strong>第一步的文字提示下面的那个彩色框</strong></em>中所示。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/26/a5PSrjHRbTg76lF.jpg"
                      alt="5.jpg"
                ><br>&emsp;&emsp;第五步：点击 <em><strong>UV操作</strong></em> ，选择 <em><strong>输出UV线图</strong></em>。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/26/3oNX9TRSdnr7tQh.jpg"
                      alt="6.jpg"
                ><br>&emsp;&emsp;第六步：在新打开的窗口中输入UV图的长和宽，建议与贴图一致，不然之后很麻烦，然后选中文件，指定路径保存即可。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/26/gMHahxfku9tSPvm.jpg"
                      alt="7.jpg"
                ><br>&emsp;&emsp;第七步，点击 <em><strong>文件</strong></em>，选择 <em><strong>另存为</strong></em>，保存类型选择 <em><strong>.pmd</strong></em>，此时要注意你的pmd文件必须 <em><strong>与刚才导出的UV图处于同一文件夹下</strong></em>。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/26/yVYMTgGuiceAxEb.jpg"
                      alt="8.jpg"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/26/dLc2fRKBDOCrikx.jpg"
                      alt="9.jpg"
                ><br>&emsp;&emsp;然后你就可以得到以下文件。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/26/FZDElRVxfGN6KBW.jpg"
                      alt="10.jpg"
                ></p>
<h3 id="贴图处理篇"><a href="#贴图处理篇" class="headerlink" title="贴图处理篇"></a>贴图处理篇</h3><p>&emsp;&emsp;此处重点是将导出的UV贴图处理成一个框框，建议看视频版教程，图片版我不写了，用UV贴图作为基础修改是因为这样后期只需要重新指定一下材质的贴图路径就好，不需要做UV上的修改。中间记着得是透明的，所以处理后保存时文件类型必须是带透明通道的，如bmp，png等，所以这一步你用美图秀秀做出来一个框也是一样的效果。</p>
<h3 id="视频版-1"><a href="#视频版-1" class="headerlink" title="视频版"></a>视频版</h3><iframe src="https://www.acfun.cn/player/ac43645838" width="768" height="432" frameborder="0" allowfullscreen></iframe>

<h3 id="模型处理篇"><a href="#模型处理篇" class="headerlink" title="模型处理篇"></a>模型处理篇</h3><p>&emsp;&emsp;此处是将我们的模型变成镂空的。</p>
<h3 id="视频版-2"><a href="#视频版-2" class="headerlink" title="视频版"></a>视频版</h3><iframe src="https://www.acfun.cn/player/ac43645829" width="768" height="432" frameborder="0" allowfullscreen></iframe>

<h3 id="图文版-1"><a href="#图文版-1" class="headerlink" title="图文版"></a>图文版</h3><p>&emsp;&emsp;第一步：用PE打开刚才导出的PMD，会发现一片白，连坐标轴都看不见。没关系，不要介意。首先我们在PmxView窗口中选择 <em><strong>显</strong></em>，然后点击 <em><strong>背景色旁边的白色的框</strong></em>，然后在新打开的窗口选择一个自己喜欢的颜色（此处建议对比度高一点，比如深色系），点击 <em><strong>确定</strong></em>。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/26/HmIqOwR7DcYFMyL.jpg"
                      alt="1.jpg"
                ><br>&emsp;&emsp;第二步：把整个模型缩小，用插件也行，直接顶点缩放也行，反正没刚体没J点，你想怎么缩放怎么缩放，但是此时模型应该是比较大的，缩放应该在0.1倍左右才算正常，具体大小你自己看看吧，按照自己所需要的缩放就成。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/26/ueqhCSLBHnMroY9.jpg"
                      alt="2.jpg"
                ><br>&emsp;&emsp;第三步：在 <em><strong>Pmx编集</strong></em> 窗口下 <em><strong>材质</strong></em>一栏中，将我们刚从处理好的贴图赋予材质（在tex那里输入我们刚处理好的贴图的文件名即可，如下图）<br>&emsp;&emsp;此时，我们的模型就变成透明的了。但是有一个问题，只能透过一边，看不见对面的，怎么办呢，此时在描绘那里打开 <em><strong>双面描绘</strong></em> 就解决了！然后保存为pmx即可<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/26/aAsMIjkoDbpXdcq.jpg"
                      alt="3.jpg"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/26/tFDMydbiju4AqeS.jpg"
                      alt="4.jpg"
                ><br>&emsp;&emsp;这样，我们就做好了一个（伪）镂空的四棱锥，其余的也是同理，只不过在处理UV那里就不太一样了，下面的视频是对复杂模型镂空化的处理。但是，注意到其实他这个透明处理的不太行，这边其实更建议用SAI2做这个透明通道，SAI2中可以直接选择明度转换到透明度，就很方便。最后如果有不正常透过关系，记着调材质顺序。</p>
<iframe src="https://www.acfun.cn/player/ac43642417" width="768" height="432" frameborder="0" allowfullscreen></iframe>]]></content>
      <categories>
        <category>MMD</category>
        <category>MMD 教程</category>
        <category>MMD教程系列</category>
      </categories>
      <tags>
        <tag>MMD</tag>
      </tags>
  </entry>
  <entry>
    <title>安歌的动作使用指南</title>
    <url>/posts/40366/</url>
    <content><![CDATA[<p>&emsp;&emsp;<em><strong>欢迎各位使用动作数据<br>&emsp;&emsp;本动作源于游戏&emsp;<a class="link"   href="https://pjsekai.sega.jp/" >《世界计划 彩色舞台 feat. 初音未来》<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>，故日语用户请谨慎使用。<br>&emsp;&emsp;使用愉快！建议配合视频版食用</strong></em></p>
<hr>
<h2 id="STUFF"><a href="#STUFF" class="headerlink" title="STUFF"></a>STUFF</h2><p>&emsp;&emsp;<em><strong>使用到的模型：</strong></em> <br>&emsp;&emsp;<em><strong>Sour式初音ミクVer.1.02_by_Sour暄</strong></em> <br>&emsp;&emsp;<em><strong>使用到的PMXEditor版本</strong></em> <br>&emsp;&emsp;<em><strong>PmxEditor_0257</strong></em></p>
<hr>
<h2 id="步骤一："><a href="#步骤一：" class="headerlink" title="步骤一："></a>步骤一：</h2><p>&emsp;&emsp;首先，在PE中打开你所需要修改的模型。<br>&emsp;&emsp;此处使用Sour式初音ミクVer.1.02_by_Sour暄作为示范<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2023/12/14/1TSad5RqlpEysfw.png"
                      alt="image1.png"
                ><br>&emsp;&emsp;首先，将<em><strong>下半身</strong></em>顺序移动至<em><strong>上半身</strong></em>上方，并且将<em><strong>上半身</strong></em>亲骨改为<em><strong>下半身</strong></em><br><br><br>&emsp;&emsp;如图所示<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2023/12/14/gDFY9iHQ5tWC7dJ.png"
                      alt="image2.png"
                ><br>&emsp;&emsp;其次，将<em><strong>腰，グルーブ，センター</strong></em>三个骨骼调整至与下半身处于同一位置<br>&emsp;&emsp;如图所示<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2023/12/14/Z8jdHyNaCJuUkxf.png"
                      alt="image3.png"
                ><br></p>
<hr>
<h2 id="步骤二："><a href="#步骤二：" class="headerlink" title="步骤二："></a>步骤二：</h2><p>&emsp;&emsp;将模型修正为<em><strong>T—POSE</strong></em><br><br>&emsp;&emsp;打开T窗，将模型修改为<em><strong>T—POSE</strong></em>，建议调整骨骼<em><strong>肩P</strong></em>与<em><strong>肩C</strong></em>，若无，可替换为<em><strong>肩</strong></em>与<em><strong>腕</strong></em>，此处大致认为肩与胳膊处于水平状态即可，不必过分要求度数<br><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2023/12/14/ZH2hIoz7TbfLmle.png"
                      alt="image4.png"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2023/12/14/OIGXqKiFUAhVpLR.png"
                      alt="image5.png"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2023/12/14/MEaCtSTz2rceiUp.png"
                      alt="image6.png"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2023/12/14/agw3NnFz8bRBlSy.png"
                      alt="image7.png"
                ><br><br>&emsp;&emsp;点击OK即可，等待进度条走完即可<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2023/12/14/DVPWl7rdSTc6Azb.png"
                      alt="image8.png"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2023/12/14/QGVnM8beWjCdER6.png"
                      alt="image9.png"
                ><br><br>&emsp;&emsp;最后保存即可</p>
<hr>
<h2 id="视频版教程"><a href="#视频版教程" class="headerlink" title="视频版教程"></a>视频版教程<br></h2><div style="position:relative; width:100%; height:0; padding-bottom:75%;">
<iframe src="//player.bilibili.com/player.html?aid=622141662&bvid=BV1Eb4y157F2&cid=1366083295&p=1" 
scrolling="no" border="0" frameborder="no"  framespacing="0"  
style="position:absolute; width:100%; height:100%;  left:0; top:0"  > </iframe>
</div>]]></content>
      <categories>
        <category>MMD</category>
        <category>MMD 教程</category>
        <category>PJSK动作类</category>
      </categories>
      <tags>
        <tag>PJSK</tag>
      </tags>
  </entry>
  <entry>
    <title>MME教程系列01—AutoLuminous4的超详细使用教程</title>
    <url>/posts/6e81bfe7/</url>
    <content><![CDATA[<p>&emsp;&emsp;我又来了，这次是AutoLuminous4的超详细用法！比B站那个还详细（确信）在这里写写，然后我就不发到B站了，大致看看吧。然后就是，其实在这里写到的所有效果，在そぼろ的ReadMe文件中都有写到。</p>
<hr>
<h2 id="STUFF"><a href="#STUFF" class="headerlink" title="STUFF"></a>STUFF</h2><h3 id="MODEL"><a href="#MODEL" class="headerlink" title="MODEL"></a>MODEL</h3><p>&emsp;&emsp;◆Sour式初音ミクVer.1.02◆<br>&emsp;&emsp;製作者&#x2F;Modeller：Sour暄</p>
<h3 id="POSE"><a href="#POSE" class="headerlink" title="POSE"></a>POSE</h3><p>&emsp;&emsp;Ponx-迫奈熏</p>
<h3 id="MME"><a href="#MME" class="headerlink" title="MME"></a>MME</h3><h3 id="Main"><a href="#Main" class="headerlink" title="Main"></a>Main</h3><p>&emsp;&emsp;&emsp;&emsp;発光エフェクト<br>&emsp;&emsp;&ensp;AutoLuminous Ver.4.2<br>&emsp;&emsp;&emsp;&emsp;&ensp;製作：そぼろ</p>
<h3 id="APPEND"><a href="#APPEND" class="headerlink" title="APPEND"></a>APPEND</h3><p>&emsp;&emsp;splitview_v01<br>&emsp;&emsp;製作者：データP<br>&emsp;&emsp;Diffusion<br>&emsp;&emsp;製作者：そぼろ</p>
<h3 id="TOOL"><a href="#TOOL" class="headerlink" title="TOOL"></a>TOOL</h3><p>&emsp;&emsp;1、VSCode<br>&emsp;&emsp;2、MikuMikuDance<br>&emsp;&emsp;3、PmxEditor</p>
<hr>
<h2 id="某些缩写："><a href="#某些缩写：" class="headerlink" title="某些缩写："></a>某些缩写：</h2><pre><code>AutoLuminous4=AL、AL4（4为大版本，即Ver.4.x，本教程为Ver.4.2）
ReadMe=RM
MikuMikuDance=MMD
PmxEditor=PE
</code></pre>
<hr>
<h2 id="MME介绍"><a href="#MME介绍" class="headerlink" title="MME介绍"></a>MME介绍</h2><p>&emsp;&emsp;AL是由そぼろ为MMD所制作的一款基础性的插件，可以为符合AL标准要求的模型提供发光的效果。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/31/oeK6ntRiUdC9SrF.png"
                      alt="加入对比.png"
                ><br>&emsp;&emsp;AL目前已经更新到第四代，即AutoLuminous_ver4.2.本教程基于本AL版本下所编写，若有不同，请自行参照ReadMe文件或是下载最新版。</p>
<h3 id="下载指路："><a href="#下载指路：" class="headerlink" title="下载指路："></a>下载指路：</h3><p>&emsp;&emsp;<a class="link"   href="https://onedrive.live.com/?authkey=Arbitrary&id=EF581C37A4524EDA!107&cid=EF581C37A4524EDA" >そぼろ的配布站点<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<hr>
<h2 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h2><p>&emsp;&emsp;AL的开放度极高，一般情况下都可以做到随载随用，所以本章节教程尽量不涉及模型的修改，代码层面的修改等，尽量在MMD主体以及MME插件下做简单讲解。</p>
<h3 id="文件介绍"><a href="#文件介绍" class="headerlink" title="文件介绍"></a>文件介绍</h3><p>&emsp;&emsp;当我们下载好AL，并且全部解压之后，可以获得如下文件（如果是乱码建议换个可以改编码的压缩器）</p>
<pre><code>AutoLuminous4
│  AL_Object.fxsub
│  AutoLuminous.fx
│  AutoLuminous.png
│  AutoLuminous.x
│  AutoLuminous.xml
│  AutoLuminousBasic.fx
│  AutoLuminousBasic.x
│  Readme.txt
│  Readme上級編.txt
│  
├─Options
│       AL_BlackMask.fxsub
│       AL_Test.x
│       AL_Texture.fxsub
│       AutoLuminousSetter.zip
│       full_saturate.fx
│       LightSampling.fx
│       LightSampling.x
│       ToneCurve.x
│       白背景.x
│       追加UV一括設定スクリプト.cx
│       黒背景.x
│      
└─Samples
        Sample1.x
        Sample2.pmd
        Sample3.pmx
        Sample4.pmx
        Sample5.pmx
        Sample6.pmx
        Sample6.png
</code></pre>
<p>&emsp;&emsp;其中AutoLuminous.x与AutoLuminousBasic.x是我们重点使用的文件，而AutoLuminousBasic.x是AutoLuminous.x的阉割版，前者没有后者那样的开放度，如：前者x，y，z参数等没有办法调整，发光只能发出白光等。故下文所有教程都是建立于AutoLuminous.x这一版本上。</p>
<h3 id="MMD内附件控制参数介绍"><a href="#MMD内附件控制参数介绍" class="headerlink" title="MMD内附件控制参数介绍"></a>MMD内附件控制参数介绍</h3><p>◆&ensp;Si参数讲解<br>&emsp;&emsp;Si是指发光强度，对比如下：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/01/31/sJm2BZ8cgwzVMAo.png"
                      alt="SI对比.png"
                ><br>◆&ensp;Tr参数讲解<br>&emsp;&emsp;此处借用原作者的话</p>
<pre><code>原文：
    ・Tr: ぼかし強度

    発光部分のぼかしの強さを指定します。
    大きくすることはできません。
    これは、もともとのぼかし強度がかなり大きく設定されているためです。
    それでも大きくしたい場合はエフェクトの直接編集が必要です
译文：
    Tr：模糊强度。
    
    指定发光区域的模糊强度。
    不能增加。
    这是因为原始模糊强度设置得相当高。
    如果还想增加，则需要直接编辑效果。
</code></pre>
<p>&emsp;&emsp;对比如下：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/02/03/MxLSvQDW9pdCzKw.jpg"
                      alt="tr对比.jpg"
                ><br>◆&ensp;X参数讲解<br>&emsp;&emsp;X为炫光的光芒数，请注意，光芒数是以2倍关系存在的，比如你输入x&#x3D;1，则会有2条光芒，以此类推，并且，当你光芒数增加时，亮度也会提升，同时对于电脑的渲染压力也会增大。对比如下：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/02/03/dmqjgWPnCvNVUbY.jpg"
                      alt="X对比.jpg"
                ><br>◆&ensp;Y参数讲解<br>&emsp;&emsp;Y参数掌控原始亮度，调节范围在-100到100之间。对比如下：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/02/03/gJcvdMmSoIpl16L.jpg"
                      alt="Y对比.jpg"
                ><br>◆&ensp;Z参数讲解<br>&emsp;&emsp;Z参数实际上就是更加精细的Si参数，此处借用作者的话：  </p>
<pre><code>原文：
    ・Z: 発光強度

    値の指定方法が違うだけで、効果はSiと同じです。
    適正範囲は -100～500 程度です。
    -100でSi=0と、100でSi=2と同じ効果があります。
    ダミーボーンから発光強度を操作したい場合を想定しています。
译文：
    Z：发光强度。

    效果与 Si 相同，只是指定值的方法不同。
    合适的范围是 -100 至 500。
    效果与 Si=0 时的 -100 和 Si=2 时的 100 相同。
    假设您想操作假骨的发光强度。
</code></pre>
<p>◆&ensp;Rx参数讲解<br>&emsp;&emsp;Rx是光芒的角度，只有当x≠0时（即光芒启用时），此数据才可以生效，对比如下：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/02/03/vd1OKrLckwVYheZ.jpg"
                      alt="Rx对比.jpg"
                ><br>◆&ensp;Ry参数讲解<br>&emsp;&emsp;Ry是改变光芒的长度，作者建议的范围在-100~100，太长会出现条纹，对比如下<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/02/03/vswaVkr4ELWzJN9.jpg"
                      alt="0.jpg"
                ><br>&emsp;&emsp;<del>(我好像没咋看出0和100的区别，可能是透明通道的锅，MMD里面挺明显)</del> <br>下面是Ry&#x3D;400，就有很明显的条纹了，但是我加了个Diffusion，会稍微好一点，短范围内可以试试？（第一个图没有加Diffusion，第二个图加了）<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/02/03/oBECcgNZifldxSI.jpg"
                      alt="400.jpg"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/02/03/Z8mOLzsX4hHoeRD.jpg"
                      alt="400+Diffusion.jpg"
                ><br>◆&ensp;Rz参数讲解<br>&emsp;&emsp;这个参数就是用来kirakira的闪（呼唰呼唰~~~~~）， 输入的值是以秒为单位的闪烁周期。正数表示正弦波闪烁，负数表示方波闪烁。0代表不闪烁，绝对值越小闪的越快<br> <del>（这个就不配图了吧，MarkDown配GIF有点麻烦的说）</del><br> <del>（嘴上说着，还是配了）</del><br>&emsp;&emsp;这个是Ry&#x3D;1的<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/02/03/RcEXBp1sQeHTlDv.gif"
                      alt="1.gif"
                ><br>&emsp;&emsp;这个是Ry&#x3D;0.1的<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/02/03/fIb3WEJZF6H2jwc.gif"
                      alt="0.1.gif"
                ><br>&emsp;&emsp;这个是Ry&#x3D;-1的<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/02/03/mN3bFJIK81BdDAt.gif"
                      alt="-1.gif"
                ><br>&emsp;&emsp;这个是Ry&#x3D;-0.1的<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/02/03/lvxq9ZHbB4pP3Xt.gif"
                      alt="-0.1.gif"
                ><br>&emsp;&emsp;<del>(不知道0.1和-0.1能不能看出来差别，应该可以。。)</del><br>&emsp;&emsp;可以将坐标轴系改成附件来修改更加随意的效果，X,Y,Z对应的移动，Rx，Ry，Rz对应的是转动。更改控制类型的方法：在图示红框内连续点击，会有三个参数：</p>
<pre><code>1、LOCAL：轴坐标系，会根据你骨骼的预定轴向为坐标系
2、GLOBAL：世界坐标系，轴向严格按照上下Y，左右X，前后Z的方向
3、ACCESSORY：附件控制状态，此时拖拽X，Y，Z或者Rx，Ry，Rz将会改变附件编辑框内的数据
</code></pre>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/02/03/IuUTd9ygOqWj2Em.png"
                      alt="image.png"
                ></p>
<hr>
<h3 id="MME特效分配栏参数讲解"><a href="#MME特效分配栏参数讲解" class="headerlink" title="MME特效分配栏参数讲解"></a>MME特效分配栏参数讲解</h3><p>&emsp;&emsp;当我们加入AL之后，在MME窗口会出现下面这一栏<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/02/03/Prc3JW7nFYXMiZT.png"
                      alt="image.png"
                ><br>&emsp;&emsp;这一栏便是AL的特效分配栏，其中White.pmx是我们模型的文件名。而后面那一大串路径，是我们的特效文件。之前听过这样一个比喻：.x文件，.fx文件，.fxsub文件，三者的关系就像胶囊一样。x文件是胶囊外面那层皮，fx文件是里面的药，fxsub文件是模型的特异性受体。一般情况下，x文件不是真正起作用的，起作用的是fx文件，二者一般要搭配使用。而单独有效的x文件，比如B站MMD十周年教程里的screen.x，这种就类似于药片，x文件自己有效。对于模型的fxsub文件，相当于特异性受体，有了，可以对模型进行调控，没有，有时候也可以用fx直接强力打击。（不知道能不能看懂）<br>&emsp;&emsp;此时，AL_Object.fxsub调控我们模型，该发光的发光，不该发光的不要发光。当我们去除掉这一个分配，就会和下图一样，整个模型都亮起来了：<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/02/03/I1kmuBwxqFGMsvR.png"
                      alt="正常分配.png"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/02/03/IbQHmZVpE8hSwzn.png"
                      alt="解除分配.png"
                ><br>&emsp;&emsp;如果我们把前面的勾选去掉，就会发不了光：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/02/03/OVjYgh7pZ4iluJk.png"
                      alt="image.png"
                ><br>&emsp;&emsp;其余的相关挂载分配见下表（我常用的）：</p>
<pre><code>AL_Object.fxsub：正常
AL_BlackMask.fxsub：取消发光，和取消勾选一个结果
AL_Texture.fxsub：局部纹理高强度发光，详见下文
</code></pre>
<h3 id="故障排除"><a href="#故障排除" class="headerlink" title="故障排除"></a>故障排除</h3><p>&emsp;&emsp;此处借用作者的方法：</p>
<pre><code>出现错误，无法运行。
    →检查 MME 是否为 0.27 或更高版本。
    →再次尝试下载。
    →不幸的是，您的 grabo 很可能与之不兼容。

错误未出现，但无法正常工作。
    →请检查是否只使用样本和 AutoLuminous 就能正常工作。
    →检查 AutoLuminous.x 的位置、大小等是否为异常值。
    → 再次尝试下载。
    →不幸的是，很有可能抓取器不兼容。
    →如果您怀疑存在错误，请在 Twitter 等网站上报告。

材质变形无法反映。
    →由于 MME 规范的原因，变形后的颜色无法正常获取。
    自 3.5 版起，镜面反射强度和 Alpha 会被反映。
    在 MMM 中，可以使用材质变形。

太重，无法正常工作。
    →尝试编辑效果并将 HALF_DRAW 设置为 1。
    图像质量会下降，但会更轻。
    编辑效果并将 HDR_RENDER 设置为 0。
    功能会受到限制，但图像会变得更亮。
    尝试减少采样次数。
    尝试 AutoLuminousBasic。
    考虑替换 ObjectLuminous 或 KeyLuminous。
    更换 PC 或抓取器。

不想发光的部分会自行发光。
    如果添加的球体发光，请将模型添加到选项文件夹中
    将选项文件夹中的 full_saturate.fx 应用于模型。
    在 &quot;MME 分配 &quot;选项卡中选择 AL_EmitterRT、
    将 &quot;AL_BlackMask.fx &quot;分配给不想发光的模型。
    编辑效果并将 HDR_RENDER 设置为 0。
    将 &quot;KEYCOLOR_NUM &quot;设为 0 以关闭关键色彩发射功能。

如何编辑配件？
    用记事本打开 X 文件，直接调整数值。
    用记事本打开 X 文件，直接调整数值...
    自述文件的高级部分添加了关于在 PMDE 中编辑附件的内容。
</code></pre>
<h3 id="恭喜你-基础篇到此完结"><a href="#恭喜你-基础篇到此完结" class="headerlink" title="恭喜你~ 基础篇到此完结~"></a>恭喜你~ 基础篇到此完结~</h3><hr>
<h2 id="高级篇"><a href="#高级篇" class="headerlink" title="高级篇"></a>高级篇</h2><p>&emsp;&emsp;欢迎来到AL的进阶教程！在此篇中，默认你已经会了PE的所有基础教程，并且，熟练掌握各种可以正确修改fx的软件（例如，VSCode，EveryEditor等等），就让我们开始愉快的AL的进阶之旅吧。注：本教程内AL的所有参数均为初始参数，不做任何修改，修改的仅仅是模型。</p>
<h3 id="扒扒示例内容的底裤"><a href="#扒扒示例内容的底裤" class="headerlink" title="扒扒示例内容的底裤"></a>扒扒示例内容的底裤</h3><p>&emsp;&emsp;首先让我们看看そぼろ様为我们准备了写什么好玩的例子</p>
<pre><code>Samples：
        Sample1.x
        Sample2.pmd
        Sample3.pmx
        Sample4.pmx
        Sample5.pmx
        Sample6.pmx
        Sample6.png
样品 1.
    一个涂有四种不同颜色的球。
    球的蓝色和粉色部分被设置为发光。

样本 2
    PMD 版本的样本。
    绿色和黄色被指定为发光颜色。
    您可以尝试使用变形来控制面部表情。

样本 3
    PMX 版本的样本。 这是一个灰色立方体。
    可以测试 2.0 版的新功能，如顶点发射。

样本 4.
    PMX 版本的样本。 多板多边形。
    您可以测试顶点发射中的色调变形和 3.0 以来的其他新功能。
    您还可以通过材质变形测试发射强度的变化。

样本 5.
    这是 PMX 版本的样本。 小球呈螺旋状排列。
    您可以使用 AutoLuminouSetter 测试复杂的顶点发射。

样本 6.
    这是自 4.0 版起新增的发射序列控制示例。
    同名的 PNG 文件是一个球形样本。
    您还可以尝试 4.0 中的其他变形。
</code></pre>
<h3 id="附加UV参数讲解"><a href="#附加UV参数讲解" class="headerlink" title="附加UV参数讲解"></a>附加UV参数讲解</h3><pre><code>附加 UV1。
　X：0.2，Y：0.7
　　表示这是 AutoLuminous 的附加 UV 数据的识别码。
　　该值为固定值。

　Z：闪烁周期
　　以秒为单位指定闪烁周期。
    负值会导致方波闪烁。

　W：标志
    指定标志。 从以下项目中添加所需的项目。
    曲面的所有顶点的该值必须相等。

　    　-数字 1：纹理模式。
　    　　0：标准（纹理乘法）
　　　1：无纹理乘法。
　　　2：高强度提取，如果为 UV2 指定了（1,1,1,1,1），则相当于 AL_Texture。
　　10 位数字：色彩模式。
　　　00：标准（RGB 规格）
　　　10 : 将 UV2 的 XYZ 从 RGB 改为 HSV。
附加 UV2
　X：红色，Y：绿色，Z：蓝色
　　指定发射颜色。

　W：发光强度
　　指定发光强度。 标准值为 1。


附加 UV3
　X：纹理颜色减法。
　　该值从纹理颜色中减去，如果小于 0 则四舍五入为 0。

　Y：闪烁阶段
　　以秒为单位指定闪烁阶段。

　Z：弹出式
　　按指定值将发光部分向正常方向推出。
　　此功能可用于隐藏发光对象。
</code></pre>
<h3 id="扒扒示例3的底裤（可以看到顶点发光以及闪烁的顶点发光）"><a href="#扒扒示例3的底裤（可以看到顶点发光以及闪烁的顶点发光）" class="headerlink" title="扒扒示例3的底裤（可以看到顶点发光以及闪烁的顶点发光）"></a>扒扒示例3的底裤（可以看到顶点发光以及闪烁的顶点发光）</h3><p>&emsp;&emsp;3的特殊之处在于，明明是是一个灰色的块块，四个顶点颜色不一样，还有一个角在闪，神奇的呢。（本节是一个大块，根据标题可以看到，本节是顶点发光有关<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/02/03/17AIfUpokqycwiB.gif"
                      alt="示例3.gif"
                ><br>&emsp;&emsp;打开PE看看参数，映入眼帘的就是 <em><strong>追加UV:3</strong></em><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/02/03/spPrqSJlynKfamN.png"
                      alt="image.png"
                ><br>&emsp;&emsp;再结合そぼろ様的论述：PMX 版本的样本。 这是一个灰色立方体。可以测试 2.0 版的新功能，如顶点发射。<br>&emsp;&emsp; <del>顶点发射是虾米？？？？我怎么不知道？？？？我在RM怎么没有找到！！小事啦~ 现在我们可就不能光停留在RM的初级版本，我们应该升升级，看看 <em><strong>Readme上級編.txt</strong></em> 这个RM啦。</del><br>&emsp;&emsp;そぼろ様曾云：PMXのみ、追加UVを用いて頂点ごとの発光制御を行うことができます。材質指定より柔軟に設定できますが、改造やデータ管理は煩雑になります。<br>&emsp;&emsp;意思就是:只有 PMX 允许使用附加 UV 对每个顶点进行发射控制。这样的设置比材料规格更为灵活，但修改和数据管理更为复杂。<br>&emsp;&emsp;由此我们可以得出，只要在PE里面对模型设置好有关的数值，那么我们也可以这样玩~~这样我们就来PE实操一下吧。<br>&emsp;&emsp;首先，根据そぼろ様在RM中写到：</p>
<pre><code>附加 UV1。
　X：0.2，Y：0.7
　　表示这是 AutoLuminous 的附加 UV 数据的识别码。
　　该值为固定值。
</code></pre>
<p>&emsp;&emsp;那么也就是说，当某顶点追加UV1的数值中X：0.2，Y：0.7就说明这个是与AL有关的顶点。那么我们来看看，示例3中有哪些是带有AL的“身份证”的呢。导出一份顶点CSV，可以看到<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/02/03/P59Ei7L1jskWa6B.png"
                      alt="image.png"
                ><br>&emsp;&emsp;4、5、6、7、11、14、23这几个顶点的追加UV1_x,追加UV1_y，都是0.2和0.7的身份代码。那就说明这几个顶点和AL有关，现来看看那个会闪红光的角角吧。分别是11、14、23都是那个角上的三个面的顶点，他们的追加UV1_z,追加UV1_w都是2和0，这两个数据代表的是闪烁和标志，相关解释看上面。<br>&emsp;&emsp;然后，看看追加UV2的参数吧。哇！神奇诶！他们的追加UV2_x,追加UV2_y,追加UV2_z,追加UV2_w的数值，都是0.8,0.03,0.02,1，前面三个是用来调节颜色的，后面一个是发光的倍率，默认要填1，把颜色参数输入到材质那里看看。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/02/03/X5s7tpQauMHNfom.png"
                      alt="image.png"
                ><br>&emsp;&emsp;红不红！！！过年就得喜庆点。这样看上去和发的光颜色一样呢（笑<br>&emsp;&emsp;再来看看追加UV3：0,0,0,0,0,好多0啊，为什么呢？因为UV3我们根本没用到啊~其实这个样子你到MMD里面已经成功了，可以发红光闪烁，其余颜色的话，在材质那里调节好颜色之后，把参数复制到UV2的XYZ里面就好，不想闪烁，就把附加UV1里面的Z填成0就好<br>&emsp;&emsp;但是，他只能发出来一种颜色啊，我们当然不满足于此，我们还要随心所欲 <del>mercy</del> 的修改颜色！！！！！！！<br>&emsp;&emsp;接下来，欢迎来到Sample4的世界！</p>
<h3 id="扒扒示例4的底裤（可以看到色相修改，表情的使用）"><a href="#扒扒示例4的底裤（可以看到色相修改，表情的使用）" class="headerlink" title="扒扒示例4的底裤（可以看到色相修改，表情的使用）"></a>扒扒示例4的底裤（可以看到色相修改，表情的使用）</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/02/03/S2XHUNDFlKhuBLP.gif"
                      alt="示例4.gif"
                ><br>&emsp;&emsp;好欢快，开趴！！！！（懒了，写不动了咋办，碎碎念）</p>
<h3 id="色相改变"><a href="#色相改变" class="headerlink" title="色相改变"></a>色相改变</h3><p>&emsp;&emsp;首先拆拆这个色相改变，继续用PE打开这个模型，顺手导出一份CSV。好嘛，开屏一张，追加UV:3<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/02/03/EfzTvauKMVblo2Y.png"
                      alt="image.png"
                ><br>&emsp;&emsp;看看追加，然后通过模型窗，找到我们可以改色相的顶点，老熟人4，5，6，7号<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/02/03/zpkr4AJ3Ms2HmZc.png"
                      alt="image.png"
                ></p>
<pre><code>Vertex,4,-2,7,0.1,0,0,-1,1,0,0,0.2,0.7,0,10,1,1,1,0.5,0,0,0.2,0,0,0,0,0,0,&quot;センター&quot;,1,&quot;&quot;,0,&quot;&quot;,0,&quot;&quot;,0,0,0,0,0,0,0,0,0,0
Vertex,5,2,7,0.1,0,0,-1,1,1,0,0.2,0.7,0,10,1,1,1,0.5,0,0,0.2,0,0,0,0,0,0,&quot;センター&quot;,1,&quot;&quot;,0,&quot;&quot;,0,&quot;&quot;,0,0,0,0,0,0,0,0,0,0
Vertex,6,-2,3,0.1,0,0,-1,1,0,1,0.2,0.7,0,10,1,1,1,0.5,0,0,0.2,0,0,0,0,0,0,&quot;センター&quot;,1,&quot;&quot;,0,&quot;&quot;,0,&quot;&quot;,0,0,0,0,0,0,0,0,0,0
Vertex,7,2,3,0.1,0,0,-1,1,1,1,0.2,0.7,0,10,1,1,1,0.5,0,0,0.2,0,0,0,0,0,0,&quot;センター&quot;,1,&quot;&quot;,0,&quot;&quot;,0,&quot;&quot;,0,0,0,0,0,0,0,0,0,0
</code></pre>
<table>
<thead>
<tr>
<th>追加UV1_x</th>
<th>追加UV1_y</th>
<th>追加UV1_z</th>
<th>追加UV1_w</th>
</tr>
</thead>
<tbody><tr>
<td>0.2</td>
<td>0.7</td>
<td>0</td>
<td>10</td>
</tr>
</tbody></table>
<p>&emsp;&emsp;其中追加UV1的0.2，0.7没什么说的，但是，10呢？往上翻翻，10代表HSV，这个SHV是我们改变色相的关键。<br>&emsp;&emsp;继续来看追加UV2</p>
<table>
<thead>
<tr>
<th>追加UV2_x</th>
<th>追加UV2_y</th>
<th>追加UV2_z</th>
<th>追加UV2_w</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>1</td>
<td>1</td>
<td>0.5</td>
</tr>
</tbody></table>
<p>&emsp;&emsp;这个xyz好理解，但是为什么追加w是0.5？不是说标准值是1么？宝宝~ 是1没错，但是，咋也不能被规矩限死啊，看看1的下场。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/02/03/ZtDI5oY9CvjcOqU.png"
                      alt="image.png"
                ><br>&emsp;&emsp;好大的！！所以0.5就刚刚合适，懂了吧~<br>&emsp;&emsp;然后看看追加UV3</p>
<table>
<thead>
<tr>
<th>追加UV3_x</th>
<th>追加UV3_y</th>
<th>追加UV3_z</th>
<th>追加UV3_w</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>0</td>
<td>0.2</td>
<td>0</td>
</tr>
</tbody></table>
<p>&emsp;&emsp;弹出是什么呢？其实就是法线方向的偏移量，来张图看看吧~<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s2.loli.net/2024/02/03/Tl2Bua6UCc4hSJn.png"
                      alt="image.png"
                ><br>&emsp;&emsp;眼睛好的小伙伴可以看出来，我把一个顶点改成1后，发光的部位就向前走了1个单位，就是这样。<br>&emsp;&emsp;接下来，就是制作表情~，制作UV表情的步骤建议自己搜搜，我懒了，其实更简单的办法就是，PE打开你要修改的模型，打开示例4，然后在示例4的色相表情上右键，复制，然后在你的要修改的模型那里粘贴，这是最简单的，然后把里面的顶点改成你修改过的就成。然后按照示例4的表情参数抄过去就成。</p>
<h3 id="表情系列"><a href="#表情系列" class="headerlink" title="表情系列"></a>表情系列</h3><p>&emsp;&emsp;有两种方式，控制材质和控制顶点。其实这个在MMD内重点是名称匹配即可，对于顶点和材质都一样，所以，你做顶点表情，把要改的放进去与做材质表情，把要改的材质放过去，大差不差，只是控制的范围罢了，具体可以看看示例文件以及SOUR的模型。<br>&emsp;&emsp;关于表情，只要名字是以下的，并且在对应控制栏里面填对数据，就可以（比如材质的话，你要在表情控制的材质里面，把反射度开到100以上）(嫌自己一个一个做麻烦的话，可去找找Emil大佬的汉化版插件，当然，你用日语我不反对)</p>
<pre><code>・LightUp
・LightOff
・LightBlink
・LightBS
・LightUpE
・LightDuty
・LightMin
・LClockUp
・LClockDown

通过 &quot;LightUp &quot;和 &quot;LightOff &quot;可以调节灯光强度。
LightUp &quot;可将光亮度提高三倍。
如果使用 &quot;LightOff&quot;，灯光会在最大亮度时完全熄灭。
  
使用虚拟表达式 &quot;LightBlink &quot;和 &quot;LightBS&quot;、
LightBlink &quot;和 &quot;LightBS &quot;虚拟表达式可用于控制个别型号的灯光闪烁。
LightBlink &quot;发出正弦波闪烁，&quot;LightBS &quot;发出方波闪烁。
最大间隔为 10 秒。

使用 &quot;LightUpE &quot;时，亮度以指数形式增加。
最大增幅为 400 倍。

通过 &quot;LightDuty &quot;可以改变闪烁的开/关比例。
LightMin &quot;可以设置闪烁时的最小亮度。

&quot;LClockUp &quot;可加快闪烁周期，并通过下述顶点光功能控制光序、
LClockUp &quot;通过下述顶点光功能加快闪烁和光序列控制的周期时间。
最大速度可提高六倍。
&quot;LClockDown &quot;则相反地减慢闪烁周期。 最大速度为 1/6x。
</code></pre>
<hr>
<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>&emsp;&emsp;就这样吧，有意思的就这样。</p>
]]></content>
      <categories>
        <category>MMD</category>
        <category>MMD 教程</category>
        <category>MME教程系列</category>
      </categories>
      <tags>
        <tag>MME</tag>
      </tags>
  </entry>
</search>
